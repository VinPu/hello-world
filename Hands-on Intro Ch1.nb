(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1060526,      19145]
NotebookOptionsPosition[   1056259,      19000]
NotebookOutlinePosition[   1056606,      19015]
CellTagsIndexPosition[   1056563,      19012]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"10", "!"}]], "Input",
 CellChangeTimes->{{3.771518338014956*^9, 3.771518338647812*^9}}],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{3.771518339819695*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"717", "/", "3"}]], "Input",
 CellChangeTimes->{{3.7715183606051807`*^9, 3.7715183644343076`*^9}}],

Cell[BoxData["239"], "Output",
 CellChangeTimes->{3.7715183648703156`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"718", "/", "3"}]], "Input",
 CellChangeTimes->{{3.771518380837641*^9, 3.7715183826644206`*^9}}],

Cell[BoxData[
 FractionBox["718", "3"]], "Output",
 CellChangeTimes->{3.7715183831435785`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"718", "/", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715183887742057`*^9, 3.7715183965787706`*^9}}],

Cell[BoxData["239.33333333333334`"], "Output",
 CellChangeTimes->{3.771518397750613*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"718", "/", "3"}], ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715184071479692`*^9, 3.7715184126979856`*^9}}],

Cell[BoxData["239.3333333333333333333`5."], "Output",
 CellChangeTimes->{3.7715184137006793`*^9}]
}, Open  ]],

Cell["", "WolframAlphaShort",
 CellChangeTimes->{3.771518440646867*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "718/3", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", "718/3"}, "ExtrusionOpen" -> 
      True, "Formats" -> {
       "cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"718/3"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox["718", "3"], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Rational", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              FractionBox["718", "3"], 
              InterpretationBox[
               StyleBox[
                
                GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                 Baseline], "CacheGraphics" -> False], 
               Spacer[10], Selectable -> False], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"irreducible\"", "\[NoBreak]", 
                 "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Decimal approximation", "scanner" -> "Numeric", "id" -> 
     "DecimalApproximation", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[718/3, 79]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  StyleBox[
                  "\"239.33333333333333333333333333333333333333333333333333333\
33\[Ellipsis]\"", LineIndent -> 0.54, StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
                "Column", 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], FrameMargins -> {{0, 10}, {0, 0}}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "DecimalApproximation__More digits"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "NumberLine", "id" -> 
     "NumberLine", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[718/3]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{239.33333333333334`, 4.308}]}, 
                  "239.33333333333334`"], 
                 Annotation[#, 239.33333333333334`, "Tooltip"]& ]}, ImageSize -> 
               330., Axes -> {True, False}, 
               PlotRange -> {{167.53333333333333`, 311.1333333333333}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Repeating decimal", "scanner" -> "Rational", "id" -> 
     "RepeatingDecimal", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"RealDigits[718/3]"}], 
       XMLElement["moutput", {}, {"{{2, 3, 9, {3}}, 3}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox[
                GridBox[{{
                   TemplateBox[{"\"239.\"", 
                    OverscriptBox["\"3\"", "_"]}, "RowDefault"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 DefaultBaseStyle -> "Column", 
                 GridBoxItemSize -> {"Columns" -> {{
                    DirectedInfinity[1]}}, "Rows" -> {{
                    DirectedInfinity[1]}}}], "Column"], "\"  \"", 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  TemplateBox[{"\"period \"", "1"}, "RowDefault"], 
                  "\[NoBreak]", "\")\""}], {
                FontFamily -> "Verdana", FontSize -> 10, 
                 GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Mixed fraction", "scanner" -> "Rational", "id" -> 
     "MixedFraction", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"{IntegerPart[718/3], FractionalPart[718/3]}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{"239", "\[InvisibleSpace]", 
                FractionBox["1", "3"]}], 
              $CellContext`TagBoxWrapper["StringBoxes" -> RowBox[{"239", " ", 
                  FractionBox["1", "3"]}]]], DigitBlockMinimum -> {
               DirectedInfinity[1], 
               DirectedInfinity[1]}, StripOnInput -> False], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "MixedFraction__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Quotient and remainder", "scanner" -> "Rational", "id" -> 
     "QuotientAndRemainder", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"{Quotient[718, 3], Mod[718, 3]}"}], 
       XMLElement["moutput", {}, {"{239, 1}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                TemplateBox[{"\[Times]", "\"\[Times]\"", 
                  FrameBox[
                  "239", FrameStyle -> GrayLevel[0.7], StripOnInput -> False],
                   "3"}, "RowWithSeparators"], "+", 
                FrameBox[
                "1", FrameStyle -> GrayLevel[0.7], StripOnInput -> False]}], 
              HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "QuotientAndRemainder__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Pie chart", "scanner" -> "Rational", "id" -> 
     "PieChart", "position" -> "800", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               GraphicsBox[{{{}, {}, {{
                    Directive[
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66]]], 
                    RGBColor[0.5, 0.5, 1.]], {{{{{{}, {{
                    Directive[
                    RGBColor[1., 0.856, 0.422], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 
                    3.141592653589793}]}}}}}, {}}, {{}}}}, {{{{{{}, {}}}, \
{}}}, {}}, {}, {}}, {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
                  GrayLevel[0.5], 
                  Thickness[0.01], 
                  CircleBox[{0, 0}], 
                  InsetBox[
                   BoxData[
                    FormBox[
                    TemplateBox[{
                    StyleBox["\"239\"", 
                    GrayLevel[0], 
                    Directive[FontFamily -> "Times"], FontSize -> 12.3, 
                    StripOnInput -> False], "\" \"", 
                    StyleBox[
                    "\"\[Times]\[VeryThinSpace]\[VeryThinSpace]\
\[VeryThinSpace]\"", 
                    GrayLevel[0], FontFamily -> "Helvetica", StripOnInput -> 
                    False]}, "RowDefault"], TraditionalForm]], {0, 0}]}}, 
                BaseStyle -> Automatic, GridLinesStyle -> Automatic, 
                ImageSize -> 50, LabelStyle -> {
                  GrayLevel[0], FontFamily -> "Arial"}, 
                PlotRange -> {{-1., 1.}, {-1., 1.}}, PlotRangePadding -> 
                Scaled[0.05]], "+", 
               GraphicsBox[{{{}, {}, {{
                    Directive[
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66]]], 
                    RGBColor[0.5, 0.5, 1.]], {{{{{{}, {{
                    Directive[
                    RGBColor[1., 0.856, 0.422], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {1.0471975511965979`, 
                    3.141592653589793}]}, {
                    Directive[
                    RGBColor[0.941, 0.941, 0.941], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {-1.0471975511965974`, 
                    1.0471975511965979`}]}, {
                    Directive[
                    RGBColor[0.941, 0.941, 0.941], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -1.0471975511965974`}]}}}}}, \
{}}, {{}}}}, {{{{{{}, {}}, {{}, {}}, {{}, {}}}, {}}}, {}}, {}, {}}, {{{}, \
{}}}, {{{{}, {}, {}, {}}}, {}}}, {
                  GrayLevel[0.5], 
                  Thickness[0.01], 
                  CircleBox[{0, 0}]}}, BaseStyle -> Automatic, GridLinesStyle -> 
                Automatic, ImageSize -> 50, LabelStyle -> {
                  GrayLevel[0], FontFamily -> "Arial"}, 
                PlotRange -> {{-1., 1.}, {-1., 1.}}, PlotRangePadding -> 
                Scaled[0.05]]}], 
             $CellContext`TagBoxWrapper["StringBoxes" -> ""]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Prime factorization", "scanner" -> "Integer", "id" -> 
     "PrimeFactorization", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FactorInteger[718/3]"}], 
       XMLElement["moutput", {}, {"{{2, 1}, {3, -1}, {359, 1}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{"2", 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["3", 
                TagBox[
                 RowBox[{"-", "1"}], HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], "359"}], 
             DigitBlockMinimum -> {
               DirectedInfinity[1], 
               DirectedInfinity[1]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1\
, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Continued fraction", "scanner" -> "ContinuedFraction", 
     "id" -> "ContinuedFraction", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ContinuedFraction[718/3]"}], 
       XMLElement["moutput", {}, {"{239, 3}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"[\"", "\"239; 3\"", "\"]\""}, "RowDefault"]}},
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", GridBoxItemSize -> {"Columns" -> {{
                   Scaled[1.003]}}}], "Column"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Fraction form", "input" -> 
         "ContinuedFraction__Fraction form"}, {}]}]}], Typeset`pod11$$ = 
   XMLElement[
   "pod", {"title" -> "Egyptian fraction expansion", "scanner" -> "Rational", 
     "id" -> "EgyptianFractionExpansion", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"239", "\" + \"", 
              TagBox[
               FractionBox["1", "3"], HoldForm]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "11", "datatypes" -> 
    "Math", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.044", 
    "parsetiming" -> "0.10300000000000001", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSPa8391c7h5ffgc4gcfi9200001f83b973f8h49hbf", "host" -> 
    "http://www5b.wolframalpha.com", "server" -> "42", "related" -> 
    "http://www5b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa8401c7h5ffgc4gcfi92000044gcfd0i9g0eig5d1974172802644588749", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2019, 7, 7, 21, 1, 14.1559372`8.903513578283192}, "Line" -> 8, 
    "SessionID" -> 32514846202028766043}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "718/3"}, Typeset`open$$ = True,
    Typeset`newq$$ = "718/3"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {1337., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 FractionBox["718", "3"]], "Output",
 CellChangeTimes->{3.7715184613959837`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "718/3", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", "718/3"}, "ExtrusionOpen" -> 
      True, "Formats" -> {
       "cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"718/3"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox["718", "3"], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Rational", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              FractionBox["718", "3"], 
              InterpretationBox[
               StyleBox[
                
                GraphicsBox[{}, ImageSize -> {10, 0}, BaselinePosition -> 
                 Baseline], "CacheGraphics" -> False], 
               Spacer[10], Selectable -> False], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"irreducible\"", "\[NoBreak]", 
                 "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Decimal approximation", "scanner" -> "Numeric", "id" -> 
     "DecimalApproximation", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[718/3, 79]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  StyleBox[
                  "\"239.33333333333333333333333333333333333333333333333333333\
33\[Ellipsis]\"", LineIndent -> 0.54, StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
                "Column", 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], FrameMargins -> {{0, 10}, {0, 0}}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "DecimalApproximation__More digits"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "NumberLine", "id" -> 
     "NumberLine", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[718/3]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{239.33333333333334`, 4.308}]}, 
                  "239.33333333333334`"], 
                 Annotation[#, 239.33333333333334`, "Tooltip"]& ]}, ImageSize -> 
               330., Axes -> {True, False}, 
               PlotRange -> {{167.53333333333333`, 311.1333333333333}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Repeating decimal", "scanner" -> "Rational", "id" -> 
     "RepeatingDecimal", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"RealDigits[718/3]"}], 
       XMLElement["moutput", {}, {"{{2, 3, 9, {3}}, 3}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox[
                GridBox[{{
                   TemplateBox[{"\"239.\"", 
                    OverscriptBox["\"3\"", "_"]}, "RowDefault"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 DefaultBaseStyle -> "Column", 
                 GridBoxItemSize -> {"Columns" -> {{
                    DirectedInfinity[1]}}, "Rows" -> {{
                    DirectedInfinity[1]}}}], "Column"], "\"  \"", 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  TemplateBox[{"\"period \"", "1"}, "RowDefault"], 
                  "\[NoBreak]", "\")\""}], {
                FontFamily -> "Verdana", FontSize -> 10, 
                 GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Mixed fraction", "scanner" -> "Rational", "id" -> 
     "MixedFraction", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"{IntegerPart[718/3], FractionalPart[718/3]}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{"239", "\[InvisibleSpace]", 
                FractionBox["1", "3"]}], 
              $CellContext`TagBoxWrapper["StringBoxes" -> RowBox[{"239", " ", 
                  FractionBox["1", "3"]}]]], DigitBlockMinimum -> {
               DirectedInfinity[1], 
               DirectedInfinity[1]}, StripOnInput -> False], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "MixedFraction__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Quotient and remainder", "scanner" -> "Rational", "id" -> 
     "QuotientAndRemainder", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"{Quotient[718, 3], Mod[718, 3]}"}], 
       XMLElement["moutput", {}, {"{239, 1}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                TemplateBox[{"\[Times]", "\"\[Times]\"", 
                  FrameBox[
                  "239", FrameStyle -> GrayLevel[0.7], StripOnInput -> False],
                   "3"}, "RowWithSeparators"], "+", 
                FrameBox[
                "1", FrameStyle -> GrayLevel[0.7], StripOnInput -> False]}], 
              HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "QuotientAndRemainder__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Pie chart", "scanner" -> "Rational", "id" -> 
     "PieChart", "position" -> "800", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               GraphicsBox[{{{}, {}, {{
                    Directive[
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66]]], 
                    RGBColor[0.5, 0.5, 1.]], {{{{{{}, {{
                    Directive[
                    RGBColor[1., 0.856, 0.422], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 
                    3.141592653589793}]}}}}}, {}}, {{}}}}, {{{{{{}, {}}}, \
{}}}, {}}, {}, {}}, {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
                  GrayLevel[0.5], 
                  Thickness[0.01], 
                  CircleBox[{0, 0}], 
                  InsetBox[
                   BoxData[
                    FormBox[
                    TemplateBox[{
                    StyleBox["\"239\"", 
                    GrayLevel[0], 
                    Directive[FontFamily -> "Times"], FontSize -> 12.3, 
                    StripOnInput -> False], "\" \"", 
                    StyleBox[
                    "\"\[Times]\[VeryThinSpace]\[VeryThinSpace]\
\[VeryThinSpace]\"", 
                    GrayLevel[0], FontFamily -> "Helvetica", StripOnInput -> 
                    False]}, "RowDefault"], TraditionalForm]], {0, 0}]}}, 
                BaseStyle -> Automatic, GridLinesStyle -> Automatic, 
                ImageSize -> 50, LabelStyle -> {
                  GrayLevel[0], FontFamily -> "Arial"}, 
                PlotRange -> {{-1., 1.}, {-1., 1.}}, PlotRangePadding -> 
                Scaled[0.05]], "+", 
               GraphicsBox[{{{}, {}, {{
                    Directive[
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66]]], 
                    RGBColor[0.5, 0.5, 1.]], {{{{{{}, {{
                    Directive[
                    RGBColor[1., 0.856, 0.422], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {1.0471975511965979`, 
                    3.141592653589793}]}, {
                    Directive[
                    RGBColor[0.941, 0.941, 0.941], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 1., {-1.0471975511965974`, 
                    1.0471975511965979`}]}, {
                    Directive[
                    RGBColor[0.941, 0.941, 0.941], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0.5], 
                    Opacity[0.66], 
                    Thickness[0.006]]]], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -1.0471975511965974`}]}}}}}, \
{}}, {{}}}}, {{{{{{}, {}}, {{}, {}}, {{}, {}}}, {}}}, {}}, {}, {}}, {{{}, \
{}}}, {{{{}, {}, {}, {}}}, {}}}, {
                  GrayLevel[0.5], 
                  Thickness[0.01], 
                  CircleBox[{0, 0}]}}, BaseStyle -> Automatic, GridLinesStyle -> 
                Automatic, ImageSize -> 50, LabelStyle -> {
                  GrayLevel[0], FontFamily -> "Arial"}, 
                PlotRange -> {{-1., 1.}, {-1., 1.}}, PlotRangePadding -> 
                Scaled[0.05]]}], 
             $CellContext`TagBoxWrapper["StringBoxes" -> ""]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Prime factorization", "scanner" -> "Integer", "id" -> 
     "PrimeFactorization", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FactorInteger[718/3]"}], 
       XMLElement["moutput", {}, {"{{2, 1}, {3, -1}, {359, 1}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{"2", 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
               SuperscriptBox["3", 
                TagBox[
                 RowBox[{"-", "1"}], HoldForm]], 
               StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], "359"}], 
             DigitBlockMinimum -> {
               DirectedInfinity[1], 
               DirectedInfinity[1]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1\
, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Continued fraction", "scanner" -> "ContinuedFraction", 
     "id" -> "ContinuedFraction", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ContinuedFraction[718/3]"}], 
       XMLElement["moutput", {}, {"{239, 3}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"[\"", "\"239; 3\"", "\"]\""}, "RowDefault"]}},
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", GridBoxItemSize -> {"Columns" -> {{
                   Scaled[1.003]}}}], "Column"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Fraction form", "input" -> 
         "ContinuedFraction__Fraction form"}, {}]}]}], Typeset`pod11$$ = 
   XMLElement[
   "pod", {"title" -> "Egyptian fraction expansion", "scanner" -> "Rational", 
     "id" -> "EgyptianFractionExpansion", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"239", "\" + \"", 
              TagBox[
               FractionBox["1", "3"], HoldForm]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "11", "datatypes" -> 
    "Math", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "0.8240000000000001", "parsetiming" -> "0.106", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSPa1939213h704fga5ad6ce600005fidfib350h5hafc", "host" -> 
    "http://www5b.wolframalpha.com", "server" -> "56", "related" -> 
    "http://www5b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa1939313h704fga5ad6ce600004c45c1dha75ci3c72586184755524934074", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2019, 7, 7, 21, 2, 28.9718984`9.214551866316393}, "Line" -> 10,
     "SessionID" -> 32514846202028766043}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "718/3"}, Typeset`open$$ = True,
    Typeset`newq$$ = "718/3"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {1337., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 FractionBox["718", "3"]], "Output",
 CellChangeTimes->{3.7715185453786454`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", " ", "=", " ", "5"}]], "Input",
 CellChangeTimes->{{3.7715187306691628`*^9, 3.7715187320663047`*^9}}],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.7715187342253428`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"3", "a"}], "+", "1"}]], "Input",
 CellChangeTimes->{{3.7715187376342764`*^9, 3.7715187401254187`*^9}}],

Cell[BoxData["16"], "Output",
 CellChangeTimes->{3.7715187408429127`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "a", "]"}]], "Input",
 CellChangeTimes->{{3.771518743503152*^9, 3.7715187460565805`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"a", "+", "5"}], ")"}], 
   RowBox[{"(", 
    RowBox[{"a", "+", "9"}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771518756916357*^9, 3.771518769486025*^9}}],

Cell[BoxData[
 RowBox[{"45", "+", 
  RowBox[{"14", " ", "a"}], "+", 
  SuperscriptBox["a", "2"]}]], "Output",
 CellChangeTimes->{3.771518770071919*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"2", "x"}], "-", "7"}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7715187793122425`*^9, 3.771518791381011*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    FractionBox["7", "2"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.7715187922612658`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "^", "3"}]], "Input",
 CellChangeTimes->{{3.7715189192453365`*^9, 3.771518940902112*^9}}],

Cell[BoxData["8"], "Output",
 CellChangeTimes->{3.7715189416885605`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"2", "x"}], "-", "7"}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771518967697818*^9, 3.7715189792592087`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", "3.5`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.7715189801147423`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "solve 2x-7=0", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", "Solve[2*x - 7 == 0, {x}]"},
       "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Solve[2 x - 7 == 0, {x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "-", "7"}], "\[LongEqual]", 
                    "0"}], HoldForm]}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "{Reduce[-7 + 2 x == 0, x], N[Reduce[-7 + 2 x == 0, x]]}"}], 
       XMLElement["moutput", {}, {"{x == 7/2, {3.5}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", 
              TagBox[
               FractionBox["7", "2"], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Decimal form", "input" -> "Result__Decimal form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Root plot", "scanner" -> "Solve", "id" -> "RootPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[{-7 + 2 x, 0}, {x, -5.25, 5.25}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{{}, {}, 
                TagBox[{
                  Directive[
                   Opacity[1.], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   AbsoluteThickness[1]], 
                  LineBox[CompressedData["
1:eJwtlGs01HkcxgcN0/wrw/wKp7LlOm4xJ1Et5mu7bEW6a1SMayUVYZVJu44u
S7Sl5FYc7YbOUezsiIj+363JKrPYRjW7zqJcZ7eJGLfQrD2nF8/5nM85z6vn
xbM8NHpnhC6Dwdg6m/+ZkFf4Qasl+NC3ZUL7HR8lN/b+Kp0mqPy9rCvgWz6+
K+BkHpokOOaX2ihN4mPIjykuLcMEXXZ45x5K5KNv2cHowl6CJXuk7i2xfLSo
X6H2aCKYGZSTUBjBx+auRwOJ2QQPxYg0Hj58tOF1do44EuRmDQ4mLuJj2ZMc
b9tNXHz1pqmIe9sFuf6R1udijZFdVmn81RoXrOhrbDe6ZfSZzvjFuSJmZz3n
M1dgr4tFWJnCEGNNMyUvVU64Km7klglrAebXTLZSc5xQLek637t+Ho4Jhx7H
WjhiVIf2mH4RG90GtW562x3wqpWhZ8lrFm6++r25Isoek4XbOXlOBgiOvFR5
th2+TL2Xqk5n4hGZv2zsKQ8VLz72Y4MeHomciQvutsVcttin/wtd9GXWF48Y
2qL+AdX1jD0M1CvXbGmwt8HqXSq2re0M/X537eNnm61x8HnY8F+dk3TdcG7d
2EkrTPzmUWnGjjE6qGDQLizLEq9MJUX0aIfpHi+R2SRtgcOR7m/jmt/TXuqN
Sc1/LseQ5p5LxY/6aXlenaRtfBmqVAFbLHlvaE9Pn8g51svQUWm+YY1BG63f
/hOvP9kcB+wjDnCe1NJ77bpTTF8twdEz/AeXL9YIOPFeKWUrF+NRD8lDcrVN
EKtMO1x/zAyz9nRLE/q7BDfsDXZZNJjg1hKn4/3cAcGx7Hgr/amFGMlkZf1h
Pigo+TST77OaYJX/pTZ35bCgeHfNwp5rxhh+0s1o7uExgZ8s/ORUEwfP153e
4PpwUnB63bnapvULUMlKc745My3gjSe0hulSqOa0W59dxwCbjs2Vk6cMsLSC
du5V6cAvRclFqxzn4APXyp2NUj24kp2zLzp3dld5wgmhiAmaFqu1hSkf6b6D
S/+9oGsAh8Mv7uoZHaGXDSjOuD1jAYMONvKtUtFZp4Xzrp1gA248tbalT0mL
Rt9JYzznQXKFeCzgQbngcWxE1TvGAuBkO0gjDLoEIt27lQtLDGHCOLj4nota
YOeh0yeq5sCmN3NdtLWjAki+Fp2eYQQM3ZtJ+8OnBZYNOTYXAo0hw1SUb5qg
A3yt5RFv4IJs+vIdpg4TDnjnOCi4BGKYgeW+21hQF1TRcdaEwJC4XmwYxIKl
Sb9lui4mED+09OsXR1nQUTU+ft2CwKn2js69F1kgchTKhHwCSZJgo7CnLAg1
MQvs8COQGhgen/jlXIhU5/+gSiNw+37U2hJbNjxnS73zLxHgOcj1I93YYM9r
0mzJJHCnyFHhsIEN/4RO7bubO+vp6ihJKBuOKvfbRpcS+DkkuqCugA0xT5ag
RkYA58cxFFwKWrtc44obCcBZhfy6BQX8T742/nICsomVeUI+BcOrz2RUKwg0
dmv4HX4UxJX/LRS/JSCvSQhTpVHQ1jRKOfQR2O782vluLgWuqvl0u4pA6233
6eOlFGgsvaw9P8z65YksjYyC3d7+SrVmts8MCKlWUHA/6Hh64QSBNnGNk/gt
BYuSLnhtmyYgHDL76PGBgs//BcoIcYNWS8F/2NBWIA==
                   "]]}, Annotation[#, "Charting`Private`Tag$3105254#1"]& ], 
                
                TagBox[{}, 
                 Annotation[#, 
                  "Charting`Private`Tag$3105254#2"]& ]}}, {}, {}}, {
             GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
              AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, {{-15., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-10., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {0., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-20., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-19., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-18., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-17., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-16., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-14., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-13., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-12., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-11., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-9., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-8., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-7., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{-4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {0., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {4., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-5.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-4.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-0.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {5., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {5.5, 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {6., 
                   FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                   0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {None, None}, 
              DisplayFunction -> Identity, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.05], 
                 Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
              All, DisplayFunction -> Identity, AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, Epilog -> {
                AbsolutePointSize[5], 
                Hue[0], {
                 TagBox[
                  TooltipBox[
                   PointBox[{3.5, 0}], 
                   
                   TemplateBox[{"\"(\"", "3.5`", "\",\"", "0", "\")\""}, 
                    "RowDefault"]], Annotation[#, 
                   Row[{"(", 3.5, ",", 0, ")"}], "Tooltip"]& ]}}, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLines -> {None, None}, GridLinesStyle -> {
                GrayLevel[0.85], 
                GrayLevel[0.9]}, ImageSize -> 330., 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                PointSize[Medium], "PointSizeFunction" -> "SmallPointSize", 
                "ScalingFunctions" -> None, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
              PlotRange -> {{-5.25, 5.25}, {-17.49999957142857, 
               3.499999571428571}}, PlotRangeClipping -> True, 
              PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "Solve", "id" -> 
     "NumberLine", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[x == 7/2, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{3.5, 0.06300000000000003}]}, "3.5`"], 
                 Annotation[#, 3.5, "Tooltip"]& ]}, ImageSize -> 330., 
               Axes -> {True, False}, 
               PlotRange -> {{2.4499999999999997`, 4.550000000000001}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "Solve", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.79", 
    "parsetiming" -> "0.42", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSPa1822113h705afc62d60b100001467774ai7a32h4h", "host" -> 
    "http://www5b.wolframalpha.com", "server" -> "56", "related" -> 
    "http://www5b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa1822213h705afc62d60b1000046236i3c98f572222586184755524934074", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2019, 7, 7, 21, 10, 33.1380407`9.272901726157748}, "Line" -> 
    18, "SessionID" -> 32514846202028766043}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "Solve[2*x - 7 == 0, {x}]"}, 
   Typeset`open$$ = True, Typeset`newq$$ = "solve 2x-7=0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {751., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    FractionBox["7", "2"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.7715190224113073`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"2", "x"}], "-", "7"}], "\[Equal]", "0"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"3", "x"}], "-", 
       RowBox[{"2", "y"}]}], "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7715191924657607`*^9, 3.77151923759061*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "\[Rule]", 
     FractionBox["7", "2"]}], ",", 
    RowBox[{"y", "\[Rule]", 
     FractionBox["21", "4"]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.7715192400594935`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      FractionBox["7", "2"]}], ",", 
     RowBox[{"y", "\[Rule]", 
      FractionBox["21", "4"]}]}], "}"}], "}"}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "\[Rule]", "3.5`"}], ",", 
    RowBox[{"y", "\[Rule]", "5.25`"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.7715192450859704`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"a", "*", 
      RowBox[{"x", "^", "2"}]}], "+", 
     RowBox[{"b", "*", "x"}], "+", "c"}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7715192581671767`*^9, 3.771519286641911*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "b"}], "-", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["b", "2"], "-", 
         RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
      RowBox[{"2", " ", "a"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "b"}], "+", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["b", "2"], "-", 
         RowBox[{"4", " ", "a", " ", "c"}]}]]}], 
      RowBox[{"2", " ", "a"}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771519288145789*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "x"}], "-", "7"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7715193052279515`*^9, 3.771519326245039*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwt1H801Xccx3HEcrH8uG7cG+7lI+73tkuhK1+2+05Mp1w1oh3ard1Yjt+r
jhT9MErUKhUW7obupHNTTmdJndZ9L4qoO0uYtFUUYZXrR90su2tn3z9e5/Hv
66+nqyI9MsHEyMhI9n7/uXtYNmEwEPxfGoey50/3vyOMNEbYPHpz+S1hpFEQ
kDGbPkkYabxRdNz88RBhpNHcq9cF7xJGGk9u37R6XwVhpFFtvE1l5E8YaTRL
CPPhfuHGGIDs32+m1BS7Mi7DyObyzVS7gNEfs199nHJskI/X37hI2nQSbNpR
nnRhjQs+DJRd6vWUYMTxaME/p5zQ87bIxhC+FMOUP0es/IuHKq3c0z3TD2tb
d/Zsi+Ni12DQ2JV6X5Tnn+T8WueA3sHtRVvu++CeTXPOW7Lno7TBuHc/yweN
xHzNiv32uK/06KPq4CX44NCpAnW3Hb64eae5O2kxOlkknp0KtmX0xuSlIrN+
J2ts5JV8k3pEjJv9/6xrbrbEiwvS7z95sghFWbQhTWWOnCDlXv9IEVb/EdWy
c7kZdr6kBq5VCXE4lxMU5miCU2jxPbHyxKslwtDnMbOatIWrbK9GL8TFI31T
3srXmvBdktnVZwiGXO1nzcaMa4pfZgZrOG6YcfaC3pY9qPGa5kgVCgHGfEWq
7+Xc1iRI7ER3y5yx9U5fkW9Um9Rvc2TrnV08pMW/XFxbNii9+NOarkU8BzTJ
5DyM545LDSHTxbJJNs61WpurePla+u7teo32oA3mPe5ZsfX0rHQ3n7r27QYL
bKg4sHbPhDFUtU3I5ywwxfSaeJunMWYQkpl6PV01o5EnlTsX5JqDTf1H7NbJ
MU3hZ5kBvpWWgMrkmiWTTRpT+5KhvTPzQFBV52foGpb2duwfz7e2hSa5V75n
jl4ana2QlDfbwboXhX2J8+ZAiuWYmzbWHhrE5w4tS2YBX32r9INRDuSc48Xx
6qwhu2lFlHWFA7zOKKh1kbAhozalUeLNhcfhfSmp8vlgZeKv8HrGA0fTtJYN
7VwITV1XIjrhBEUP6kTRHs7geMU5PdTdhVEAx7ceLF7cy2d0hcgDa8TKRgGo
rH6IpVMJiOLyo1W7XWFdo7l65d/u0DPEqjkR7Qbn7rJDPNUeoFU8W27HJ1B5
sz3P/RMhPDE9oy9xI3CDFaFbFCqEqdrEC1wPAs9lv8l9w4XAHRtzchUT8Onp
DQiOFUL8tok33oEE2oaevtqYKYSZPEO9bD2BqbmGuIrzQvD4kcsrPEogfJWv
nx2fgoCw/k6rEwS2Hmms5npQED5SWXCslMB39wKsXcUUfC0WTJcpCQzEwqh3
IAXXLnl01qoJZCXLqmTrKYi85XugpZWA6vAWq8KjFCQkTget7CDQ3jm681gp
BVkWlyc7tATG7dOGy5QUKCPoL7u6CdDK7Tdq1RQ874GggUECnfW5WS2tFMxk
mUwmDL//qzMd6tBS8OGClrMjowR4koNRXd0U+GwMc9DpCMRfP+I1MEhBqDFL
u32aQJGJXeXIKAWfn27P1+sJNHxawtLpKEgKPRyY847A/SLHHXo9BUy/YEZb
8dRgoOBfg1k+Vw==
       "]]},
     Annotation[#, "Charting`Private`Tag$10205#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-26.99999918367347, 12.99999918367347}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.771519327748921*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771521732051815*^9, 3.771521752647023*^9}}],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
        "]], LineBox[CompressedData["
1:eJwV1Xs41GkbB3BhMlM5VJJ0IaUUsiWJHL6/6mUjETsyXm0OGxUlXswmbZHz
st6SnEo1DuNUUZnYzauUc0iaUE45DzE/yyDn/b1/PNdzff55rvv53vf1PGpu
l+zcxcXExK5S6/97/AGvoprzLsiebExeWibxIXOdwk/+geAnegRPUM61ct9X
lBEMw/1eYwLKI+bl7aZ/hMHxoEdDB2XNQ8phtewo3P/FcUsjZS+jQG2mSyy2
1ZsPllJuSfX0JNVvonh0j2ou5emk5LKiTfFov6v0Lp6ywp2qdVdkElAjLTUS
SPlAvMgDEok4x58NOk2Z9d+tLyW/J8GuezqYoHw59oRs3WgK+EHis6qUSyIe
FTNb0mDixzrcukSiLfTLaqV3D6Bt8nh9AeWrhGQh2f0Q/2NvZ4VRTjPRleTx
02GjnHJQg7KOscWTje8z8HKQ0yZaJFF20IV1pTYT2W2C4VeUuw7EPUIZFwpT
Nh7WlL31s06ml2TD6nzwh7WUl/RKxWjPc/Bzimxh8wIJFd0RZl12HkKqvKut
KDtrmy8ybz1Bxgozl63zJIyTuXHTDwvQvj/Rs26OxJobEnJWrEJ8K9MLuER5
eOwXztjZp7hQnhRTOEsivVK9Yk/kc5y69rZM5juJm/P82BWyRTCssGi4P0Pi
2t5w++bEIvC8uB1alJ3SBgb9uDwYSOxdMp4mIR/AZRRXFkOSU2dtJCIhnn+y
OfJ4Ccp58Hg+SWL868q7rE8l8E7Ru76TcoPVWe25/j+hq7rAY0yQiFDfaWMi
WQrdvGeGOSSJhWFmnavaa5xVHim0HyExKflYx9L9NdROBYymDVPzoUq7rZv7
Gh6H9bT6BFQ/7HlOEnvL0ZDx7tmZIRK88g1jmcQbaJhNjh3pp/JMaZEVOFdA
0cZV16+ThHuRjn9TRgXcr9CfxnSQOPU+oq1kqAKPtRX3c9pJHKMd4ERfqkTj
jKz1288kdvom6Wpdr0KQ2Kfqvk8keo6y7L3v14AmMbt8p4GE6cBV14bOGkTF
+GbdqieRGsK5qK1cC6+vGrzf35Gw+2skfORuLVx7BOsDakm80frthUdKHWI2
yXzUrKTyl0nf6JxQj5OnnwUplZLQHZka1TBrgtLTjJzVOSRcDOh+rWea4CPD
EBRxScRFKM1GhDXByco4ySmLymMraINvm9Ca32rGSafOc4pSzjz8AeF14cPS
aSTWNyhZbyGacWJYMfDCLRKiAhQoGvHxjRkJ4jKJei2jdT4/86FlYLvPn00i
I1s/oPo6H37bH2pn+VP1P9htxK7g49D0mr1LPiSexm2u/nj8EzRnFqNjz1P5
XpzpinNpgY5eVYXSv0kMaRbI0CLaIKUrKF02oOadm+d7KqcNzhLdtE/6JBK3
cvnP69rQ1GDrnK1HwlwpLdVN9jPM12ibHdlDIpMRs+N18mc4hTCHHDSo+ws8
TIPyv4BZp94hkifxJUvF+++mDuj/6ucgJhTixcpHdjkTHYjqNrEO+ybE7bOG
B5zlO1Et2vcbbVgIq11MsQaHTgS7HQtf7hOi7FF0fE5XJw6Ff7Fo/iwE57no
hfNoF9p/jZeYrBCiyGVgeTD0K378a9FCPUWIIO+XR+0f9GKzceMWF0MhDmPq
jExBL3DH2vKCvhCr5H4IqS7rBbuXs5W9T4jkp+l/Gnb1ol6a3XNjN1WfKFpT
RbkPe2daM4LVhJi4wlozlNoHwrbgnjRDCM/IqfeXE/uhUrkr0KdlDKyHPzjc
+2MQ5jonXvl5jsEjsla8u2kEQ717YOs2irdhWlqx74TU++Sr//HoN5xeO/BG
3vFvFAe5++YrjGDyYLVpD3sS4yq7TN7kC1BwSXrWzWcKppFlZuEYguT1wRC3
hBmUfn/iHHlvACEp2yw2JswijjnOsxXvxzHJ67sqouexcNp484xrL55YXGwT
5i7Crilv6U78VxikvqpszFoGB99vTvE68cStmVAYFCPejPXY+E9/hscWptYh
0QrioFLAKl/LFjzrk+KZj4sTO3umNWSGmmEpT9sRs0KSEFgPSkumNoJtqaef
J0YjWG2Zu1lra1CbM2FXOUcjcgW1JRv7y3HOf+6k6iop4vtDO4lzSy9w10xv
7icpOvGvKscNuX7ZyHvskFS2mk6sUneh6a7LRsmGIL1dcnTCVCuK11rIRctA
ufeSIp24COeoQGEW5CJs+nI06QSD9bu9olcmIqo86xeP04lxhyDXhvMc/OdH
zv3sBDrR4Vhaw59LREhBhdG6FDoh4SutZ45E3NwoaLuaRifyJjx3iELv4PGQ
zno7Lp3YN+WwSKP+GUFkaeRCMZ1IHNu8ILH9Fk7XtPrYttMJ+9TRu3OlEbi4
Z166tJtODFquHww9Ho6rySr5O/rphOoEa1N0VyhSzrkPzI/SCX910ZiUeAj4
9ElH7hKdaG2PdShJY6PPR2FGToJByJ7YZnC7yg8TbYYJQVIM4trHwoJz4z6Q
zQ1uPCHHIOyX9UIZcR5QWZvp9VKeQVSuzJNPHnKBdmA1fccmBnG7Zs1mk4iT
MOoZybqpzCBi6ke92DfMYWkhc2RejUEMr9XveT3sbvoPXZ3j8Q==
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$10601#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->
   NCache[{{-Pi, Pi}, {0., 0.9999993309535186}}, {{-3.141592653589793, 
    3.141592653589793}, {0., 0.9999993309535186}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.771521754433*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{
      RowBox[{"-", "3"}], "*", "Pi"}], ",", 
     RowBox[{"3", "*", "Pi"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771521732051815*^9, 3.771521752647023*^9}, {
  3.771521784294394*^9, 3.7715217894234557`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
kcCVGeeJWUa0r8wz8f8AxFguUg==
        "]], LineBox[CompressedData["
1:eJwVl3k4lO0Xx2XJvsygrDNjsiWEZImck7JWSvVGkRaENkkUabOVkjZbiUpS
KFT27R47M9JbCqU3ZcmasUXR8pvfX8/1ue7nub/nnO+5z3Pdavv8t3jz8/Hx
xS3g4/v/063tntTTtJMg2G+3e+ovFyIXxG22WnwT2I6LIqN53P9j8ca478lg
uEJ3pwGPbcfvO3xqS4Nmu48WtX+48HZKfsniHelgE/hiKfA4krtTDewfgtk6
d/WM31wwHrlL9zF9DHyjabqTv3j7fe1TvaqZA+mr965dyuPEnqUqxfK54Pkk
089hngtL/E2v+Ifng6HjtXtb5rjwa3RHrMDcM5iudx9a95OndyDsclLAC7jr
52vD+MHT218dQ/YUQZuj9eob37ng3td7cWtnMZRI7/qoPc3T37fw4sCmUtBc
uDnh8SRPf9f6aGmoAP2WO+6eXC5UdR2OelBUCeHJy/3TvvHi2XEt0lSfwOYY
iYyaES48yD5QnSdVDS9Pu51pGODCtaF5Vgi7GsouT2pn9nMhTPsKa210DWSx
Vfn8e7mwLTOPdPyuBempKqj4xAXB9OnKv6MNkHvhtJvNWy4MT/4aLilphO8U
qpTBay68WiukcCyyCUpUkvj5Wrlwu1/+WJ8yG3qlf9ZtauTC8qWmms2OL8Eh
JwPzSrggFwpbwxe1woj50pt1BVyYY9uds+hphTlWwxaSz4V9Jrrf2i3/BZEr
3Ybej7mg12lp5/D2NRjF/6MemMiFe3zV/2msegNqRv/cLLjOBepSm+P8996A
RUxmRlcsF36EbLxffrANLse/4XwI50KNsse8nsA70FegCKYd5oLr7rN5VKNO
qPSju4MVFzgXBGy5SZ3Qvj679JMpF6zyL3zk/O6Evti6NV6GPD8XXBONan4P
DTWyP9XUuTCWfs9zdk8XKHKvMfxEuBDxtXrxx6ufoNWDWbi8ZQxmpGxzS75/
AlqwfbZJ3Rj4mrLXJbh1A2VCLUS9Ygy01g2ZPZL9DM1fRt8W5IyBRMKE957u
z1BEF+nLihmDDhN+1pvgHtAJfNg2jmOg8kRVdGdmD/AbfheUNhuDfWrmW768
6wHG9KiwwvIxGBU/2sc17gWhQfnnwypjwPflPxHJqV5YQpMZvDn7DbQvlzrb
+fdDlFlMKV/WNwjpPtpb7jMI42l6u+79GoWqbbG6a5MGIT8l/r7hxCgIsh8F
sRsGYZLPwyuvfxTiCj4Jv9cYgms1fvePto5CeswG3ZneIfisKPRQ/O4osFdo
BxnsGQFugObZZ5ajoHyxe+FD1zHIKReq0z8wAp+qXZW1Y8fgdZnNAju3EUif
f708h4wBpeVCjeOGEdD2r3N9psmFEmaerrz+CJhsz8qu5PU954GdVsn4MCy9
Ya51sGkcxmxPbFl/bBjW7RHgRHhNgtbaMZqzzxCE/kqkFt75Dk1vjxZF0AaA
LrTA6k/hdxgQznW/Iz4AdZIH/exefYekshOxj358BWk6sN4vmIE6ccGZhDdf
IWPNwOE/+2dg6HXHxLuor/Aq2rTZznAW/uxOapgb6gd1SufZD/U/YGw3Pe9O
Vh+80lD89ndsHvafmom7KtEDG0s816wc5sNLLcPfZAffQ5LGYutHKoIYHGtw
tKn/JaQ+2MPIUhBGH9PZb4xtRRB89ugPd3VhtPu+1yqYUwib3c79K2MgjMY7
X33XXFsIgrL3zp20E0b7PRJ376wogEPh3Z/tgoUxOzbj41eF52C51+P+1zZh
/P3V43PzcA58oLkz1a+K4OWYOM3N/UlQMHdwruO2CFoM1BRTphMgrv3Um8uZ
Iri45n1EmGA8WMelhE9ViqC1/auL23SuQdbvDz01oyKoZ2CaFCJ3Hk5+3PFg
r6MoLrSbkL4TF0IW33ZRvyskhsvyw82qg+4TmQErrjNVDLnnp6v/eqUTMWPN
MkG6GN6Z3HNYa+sD8uvl9KYDZmJ4cUtgq77uQ9Kz4MaplQd56werny58/Zjk
+rW84fwrhsE5HaFL+/OIrfma8z9SxJE80dohc6uIYLT2hpzH4vg7xTkv6k8R
MW+TXuxRKI6/Rr2NvDyLie7hT09qW8VxaiolxW1ZCaHeP9UZt0ACr68Ws9It
KCWfRIqWa/hIoIBE8DmlrAoS3KnzydlIEk8WbbzoIF1Nnp++OKhjJYkFOeIS
qSurCZf5dVLAURJ1L0V/ynGrJr6H7wsX7ZXE+5tfGM1nVpOd/AqGStcl8WjL
JcHdq2rIal2hyB6uJBZJHJI32FZLQl/viyufl0TvzWesjIJrSVEwKzleWAq7
K42nxpJqiX71qae2dCkMc4n4L+lDLWFsn2zPdpLCrJ2fPmW61xHBc91LA59K
4dkxK6uCrfUENVYbbyiVQmn/M/zuAfXkNPu2lUa9FHJrW+Yq4+rJjNz2rR0f
pVChbv25/KZ6MpjVEmYhIY2iq8RqN5k3EE5b6SuBg9L4ueRNxgnJRiISsvjD
x2BpjBOvza7RbCTraEF9heHS2Dp0dbYRGkmFr8FPn9vSWD//7uSCgEaS+zuT
2dIsjanMC0UG/zaSZln2Kkc5GdxyR8Yl+nwTmU3zMi9SksHeBLsQs+QmoqHz
15SpJoM6Mg9X38ptIufReOWcngyu83L/uv9DEzE/nLY8204GTZZb+BnrNxOf
H2b6i5xkUEHCznGXdTNJiGjTDd8mg/2ybKeV25vJxC0RnZ17ZXDVazPJqbBm
ktVwTF3slAy+7ZK5/KihmXQ4Sy4JPi+Dca6789Z3NhOh/x6p9VyQwShv/ZS7
Q81k79RHWlm8DO7yOKfhIs4migw7xQO5Mvi1Qfix8Ho2scv5sri9QAbdtJ89
0t3JJkEmYYusy2VwdhnfSn4/Nnm94ZmsUpMM2ixK9SZRbBIToizF/sLjO06m
UeVsUixYJGEyKINdjjMlhk1s0n91s3j6mAwWP+nIu/qWTdZkRomEzsvgtWPt
oXtG2cTfkCH8dQEFM3/zXW2bZZPUijKhLSIUVK89k/yDn0N+vuHy68hTsHeM
RtmhwCFaHpcWJCpT8Ns117p4Jof8M6TOx8+kYNoi2e/huhzy7O+O3+/1Kdhv
W+J+AjjET7duNsaegm33Aev2ckhSscfMdycKOhuFdST5cUi99c/pvf9QMMLF
T44ewCFqO/QnzfdR8NO7YhWHsxyyqa9p/KEvBa0v/DUdjeKQ0/6eXIo/BcNu
1yavjeWQ91HJo0OnKDgk8/aVdDKHCFNWjPwTTkGD7A8/I1M5ZOWdl0PVFyno
pfVaJi+dQzy1fAf1rlJws3EtxD3ikOvP+QduJVCw76nxc+YTDiGrU/uF7lDQ
Ukct/lA+h3xrMu0LSKfg+Nl5yqECDnHoPvTFIY+Cr0ISE2LLOSQ5seavfSEF
W7e9WHaqikMGNyrQ7MspeCxy4fml1RxiKnTE0q6agvoVieVJtRwSXVG707aR
glZGtQsa6jmkPVAxxOYlBcVt14YWNHKIxjL/pHVtFBTS1Nzg2cwhx3vqCte+
p6Bg0Ju0N2wOqbul9Na6m4IqXKHb/C0cIud8dHJNPwXHJN95T/HYU6RBZs0I
BcOfZOs8fMkhz4nycpygYFy2HUWhlUP4TwRshFkKOl2tsd7A4y36jQetfvPy
WXZhcA2P7/erXFotQMVqy+26P3nfj9859thSlIqN4jZmx3iM25oaLKSp6CxT
afKUp3dNnNa/Sp6KI1dPbcnmcEh3TaDAKmUqMq2uF/nx4tUPbVYzV6NiR9fe
uJEmDjljSEczLSoatD8QMuDl2zp43MNUj4ozfbvtTXn1UL3HDjNZQcXkx+Ph
C3j1OuTCSFlpTsUrdvw9cSwOqZAKLjUGKvqK37jRXckhEg2cjhU2VHT7/a16
qoxD3E6rzRitp6J9eEEqp5hDso1PyBk5U9Fnpm2rD8+/uZEWI0MXKu63v0Rt
5Pnr+IDpbLCLitrxXiIjPP9v7Tzpv9yTikKVVl5tjznErHnJEz1/Kiq9GBKb
vMshF8+FsHWDqOh540eBdgqHdJi+Glx2iopbMsIj1BM5JDgzVEPnAhUHG9s2
HbrMIQ27/l279AoVRcQgr4TXv/Lymvu0b1KxRPLwDJvX3wURr9M071Jx6Hci
v3UghwhaaFVqPKSimOK1ZY8OccjWybAu9Rwq3j9tI9jmzSGTe7QVlhRTUSNE
7NpZFw4xsDp7nf6Kinp/+nINzTjk3Pe3ebR3VAyYSJ94vZxDXj3RaVXtoiKf
bPn5VVocckS5XUxlgMdukh7e8hzy5IdupMJfKo6H9PVocdlE68WHYMpyWSQz
i95fTWYT3/pTpyeNZTFXWb1T9AqbPO5QiWxbJYsvfBtvOZ9nE+1fHtcTbGUx
Kdnccj1vPunY9OYoesji9g2mY6MmbKLXMfJZ7Yos8lmWrlFqbiZHhmIH+G/K
Yt4xBdVLZc0kd15vrDdZFo/kTBtycpqJPuPo/MMMWUwz1v9WfaWZGPhNy+tU
yKKe+u/ZC5uayYr5X45GI7Lo12wZmMVuIscl05xlJ2SxeVpb3b60iRTQwXV6
RhadL38tKX/URIzXnfcu4pfDD0bsM8zIJmJyRejcKiU51Mk8oPJ9FW/+06UK
rR3kMOjl8mV99xoJrKXTtz6SQ2aBg0TapgYiI6V798VTOUw2SWEdNG0gnzvN
6HIFcnjSV3FWmt5Azh3ZQn/HksMHl1pW/vetnrBuRdFdPshhR5kOJT6mnliP
j9DdJOXRTkU9qKK0jqxLLWF4BsrjdcFd4fZ/a4jjrDMzEBZhl6TFIXuvKvL8
xSY5t4rFuOWSW8zB6KdEMt5ir9oORTRzCam97n0ezqWV7QverYgdKzwNzu6O
gMnH5l4cb0UcaLzRAa5R0F5p6hN0TBHP7j5wWMc2Bu4NrDjcfFkR2wfiAm/F
XAMjC92QgCpF/KOyWtjBNBlce1SuVy9RQqmSrcZ9EQ+APZpyY5GOEl55cSRK
dvYBWM4qxR80UEKj+Fyt934ZoCahmCS/WgmvXUzuX+L0EIZXyqf6bVfCz7kO
lncpj+B0jGQWJUYJ/54SDQ6IyIZ0gz+svWNKOJ3oL30iOh9MfMx6HKaVMH5L
hMGGwnxgpx4TMJpTwsifu3wHe/NhQmzAhn+hMt6/bvfrOD4D7H/FTldVRq+O
gKn2mWfQfev+294Nypga/vzbedcXoCJgM+ido8x7Lehi/rdCyDc/K+r0TBkf
3gzOHZArgnVHS3VMipWx40Yf3yeLIjj4n97hhbXKuGvq+TbhmCIoK140mflB
GdMd+3/ZMorB9dDg/ICoCp5i5/s6WZdAwrvL0gd8VZB5KevV6q1lUFJnmP36
iAriKie3G8fL4OOLjnXmQSp45bsLMz6hDNRvLAkVCVfB7tT4F2ntZfDcqbwv
M0UFn+11tedsK4fWxuHS3lYVLG4v0tyzpgImi65tW/9OBS3HNe4H7aoA+UwT
7vMuFRwp6p1fGVIB7pHh6uGDKqjXyu4syquAEVS6yuBXRZGtsRJFCpUgUubg
tWulKt6Vnpq7+aESdLO4f+osVDGi49as40QlbEpOuKVrrYomY06bcoSrIDH4
S+u8kyqeacjn+KyoAvUVIea3fVVxe5uDQ2t0Fdgz6W8X+Kuih/Ulv9bbVXCQ
Un/EL0gVS5qnAk7kVsFzrkyGWbgqelWGUereVsGaJ4+lOlJUMeWIQIKtKgGv
FKcsq3RVzIjwmovl3fMvXppem/lYFVfHloqGAYF/fTEkqFAVpwLyFm3bQ8BD
o7NX9hUvnowD2SOpBMLlzpw59U4V5zZtVTrxhMBDAXXF3i5V3PdEXyenjMDo
F3+n54OqqJKkYizZTiA0Tbh0Mz8Nx4+ueuEuyAJS6hu4XoSGbadipHpEWSD4
rlnPVoqGUbRinzXSLIgTj023UKIh70fLjFNkQZvmN3cTBo8FAi6forFAwdpp
saEmDa9qxvOvXcKC9JMysZpGNFzoQvT26LJg4GaArZoZDSdj9EYLDVigm/eG
T8WKhnz8Ni/7jVlQ1B8fRHGk4dPeCOm3liyY55tZLrGZhhOhgadvIAtQxWV4
4XYa6nvd0Vq2jgWcLYq7f+2lYUD+wY0jjiyQORKqOOtDQ899pp1UJxZsj+lq
mzhMw0vPoivlnFnwmaTaD4TQsKrHuPTRdhZodP3h7zlLQzlxyhezHSw4MLO7
8mMUb7+FB6Mz3Fgwrcs0enOdhsZl9f7ie1hgbh8x2pJEQ5d1iY0L97HgjGdf
ZmMqDXWGI+o+erKg9ozN3poHNKTO6gdc8WaByO1M5cosGs4vOd+p4MOCjYXC
7cV5NNTzfSp01pcFN/71vfa8kIa3m5cLsvxY0DHS7Pi0nIa1ui+7uw6wQEV4
mdDjahoKqd/MeHOQBXuZsSS9kYahVR0eGYdYkLn6W0jqSxpu3W6u7HyYBSOu
TsbJbTQs90j72sljg+N5Yzfe09DccGWrxREWBF2VybrSTcPkD4HdITwuyw7w
vNhPw20Di7Vv8vhv/RvViBEaXlyuWXSBx+u+rOg8PUFDn/ThJBcex/yKv3Fy
loarKD+6+HncunhmQ+BvGnb/1Loew9OTXeEifESAjq83324Y4cXn6lRS7StK
xxrHwstLeZzqpxjmKU3HJxoa49a8fHoiQ0085Ol4bKJLwIyXr9a9rnFXZTrK
u1I6RHj1OFRumbNVjY7u3tahhbz6PWtP9XbSoqOik+Gf1ftZMDPxh+6gR8dx
k/7AdC8WWEju+bB2BR1z57JGe3j+nNOujrcyp6P6uHToX55/9WuZm8yBjgl5
I3o/PFggtjtC1NiGjgUd/yi9dGdBfILNmaXOdIxIuvRV3JUF7/MzzdRd6Kgd
2DkS9A8LaC3CU7RddLRsKDtesYUFj/nZPnJ+dEzfpr67ewMLvqkuY0r705Ge
aDNY7sACI/PYj6JBdCz8pL8uyJYFlf5Ozn/P0VH6i2fDGWDBZP/cVFc0Hb1D
n/38YsECbfdHiSWxdKxfJJq7xIwXjz3fx4BkOlKix4eteeflkNrz/X15dPR1
2DE3yTtv6UkeotWFdOTrFQvZoMSCTknxJ6nldKxu+c2Ikuf5N+c5sb2RjjM1
yjbx4rx+apMPa/5Ex/Xnf+a4jhLY4lBDy+yjo0I+e6nAF968IUeqw4fpOBZy
3efwOwLTOY0LLWfoWBvM6DlfSWB/TYV9x0IGUnxPaORfIrA65UibA42By5o+
/7dRkYBre526mRoDq9W3Z4iLEThGUQ7WVGfgjfMlrrFzVfD4QqOCgA4D+7vW
e3d8qAK54wyPipUM/K/QRel2chWMbngzqL+Rgad9fTMERKtA+KL2KtXNDOTU
b30sNlMJzNozl8W3MnCkpXN5Z08luJov0x90ZaC3y9GKxvJKqNOIDLzvxcCV
D25E/D1QCXf+rPwjG8ZA9qKoAhFSAX/lrSWszzJQ46zikezMCtin56R0NJyB
mQv0lknGVfDqv9+k5SIDxVnP+Be7V8CL0sQjkQk8FmVF2nwvB/bx2U/TuQyk
PfhsvFOlHH4Ml5B3XxiI19McuqAU3PjrXwr0M/DS3sQSB0YpVCm+7jIcZOAe
ffmrkXylEGk/NHtljIEffO7+2MMqAelMRQPbeQYm3nENJatLQHNv6L0iOTVc
Jnh56YHlxbCtw+J8kp0aaj287bx6ogCaIjXoVx3VUCIh+lhoawFYGElXRm9U
wzVbFpcn5BQA80rPj6CtaljvGqPi610AE9YxR7ftVsOUMK2UqI4XEJfbvpty
Qg0PH6B3cAufQ1NUgNXlTDUUmO29PbwrHyyMH82fEWKick2gvubHTLCtOT/R
KsJEl+J7tyvOZ8Lmze4DNAkmNhR7RptoZcL+Q5S2KioTM8cjWjsDHsKNjFPZ
f+hMvBYSXDoplAHDcpt3nFnFRI9Bs12uOvfh1vcfRaf9mZhk5d4a8y4RMiLa
nrw8xsRXNspenqqJkEvJTVcN5q1Llh619k6AOj3PuMowJvZEbLul8P0mjHu/
9P4dw8TB6cTHO+Wvg337fbnTGUw8dqePWfUiGrZ6hYm9fMREQauSjkGbKPCY
3M6nmsOLf9RM2q0zAo5LSYxWPGNiclLSsPqfc3DPNrj2VxUTc/P+mB5KCYac
t5tLN9Qw8eTS8lDR+kAo2rcs7049Ey8f2d5/lHsUWs58vm3ZwsTZa6P/BV/Z
Dx0S5ddiXzExhb59zc6BPdBzOyH64xsmVpRMnVaI3g6j2kfDdNuZ2DspYns4
3BZmixyPhb1nIsVDuoc15G31P1KcwCQ=
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$11247#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->
   NCache[{{(-3) Pi, 3 Pi}, {-0.21723362080148653`, 
     0.9999939785913345}}, {{-9.42477796076938, 
    9.42477796076938}, {-0.21723362080148653`, 0.9999939785913345}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.771521792352777*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot sin(x)/x", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Plot", "Plots", 1, 2, "Content"}, "ExtrusionOpen" -> 
      True, "Formats" -> {
       "cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x]/x, {x, -9.4, 9.4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    FractionBox[
                    RowBox[{"sin", "(", "x", ")"}], "x"]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plot", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x]/x, {x, -9.4, 9.4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max8330$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min8329$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min8329$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max8330$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3170075$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min8329$\
3170076$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max8330$3170077$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max8330$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min8329$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3170075$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min8329$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min8329$\
3170076$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max8330$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max8330$\
3170077$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3170054[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][$CellContext`x^(-1) 
                    Sin[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min8329$$], 
                    (
                    Piecewise[{{
                    0. + 10.075511450176283` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.075511450176283` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min8329$$], \
-9.42477796076938], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min8329$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max8330$$]], 
                    (
                    Piecewise[{{
                    0. + 10.075511450176283` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.075511450176283` Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min8329$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max8330$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min8329$$ + 
                    0.01884955592153876, 
                    CalculateUtilities`GraphicsUtilities`Private`max8330$$]], 
                    9.42477796076938]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {330.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min8329$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max8330$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3170054]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3170054[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3170054[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMNsbLJySggzFpQEnK93rxpbFw7WA72+\
DPg89ukmbtKsV0gKb0w6m+NI/\
vnnvueo8OZZT2e72evmzNB8lpeg1PD60ZylkuC0HfneQKtGZSpJfw2U1rYjC7wMkPoN531Zr3Us2I8\
edX+D7hScGJga+GcWYY6MmeInnGEl17Rood2Z9MuEwIZz/\
h8c72y62tF889DMYyIsaAEnqnLWSeKaIh7SHQFWveciK++\
eOD8vip4DyG7wWIBPQ96x0rQi2MFIRjPsG3XmymbmNihghKFD13mpw8h20v0EYxMR3DLMc3ziZruy0\
wUVPtublTcrNOQT786/hAxi4m73FJu7MjMCyMC0bfaVn9c+\
4GeH7dFl7J49XEYX5vOPJGDDsCvUznk9Z18oxUXeuin3N1XvNlo0GePWXq/6UDps1yGE/\
bhgGzQ1vj1dpbhn/WFl7m2PVzcd+15rN3lICrhkMluI+SFnweRTPlgZdo+\
3R1bh0e41bFd4zOkApWOJGNs+wX1x/3K/B6U4ixdpMNSEfUMyCCHKyLOm532ZSZYUYUSSzw/Lp+\
2WRjWYcScGf72jNBmR1gnpB1yxOa/XSh7sQk2Zc/\
Km4ll1NNhrzvCwNTUGtFfwProyy5go5lYCQxXtDUazCHVVIjooJlPyhB4pwIhpDsl/24b/\
7hYiWQqj2F6lKexYErzUl4Ev2ywAcgpiZr7tiBoyu4bTGbSB7XqotYmi5Om80x3W8y3bihOdBDSQgt\
SfhA7zaFblP4q5vC0h7crQndmtCtCd2a0K0J/++a4CLGf6Xfgxm4Tg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x]/x, {x, -25, 25}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max8332$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min8331$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min8331$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max8332$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3170163$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min8331$\
3170164$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max8332$3170165$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max8332$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min8331$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3170163$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min8331$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min8331$\
3170164$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max8332$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max8332$\
3170165$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3170143[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][$CellContext`x^(-1) 
                    Sin[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min8331$$], 
                    (
                    Piecewise[{{
                    0. + 26.868030533803417` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    26.868030533803417` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min8331$$], \
-25.132741228718345`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min8331$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max8332$$]], 
                    (
                    Piecewise[{{
                    0. + 26.868030533803417` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    26.868030533803417` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min8331$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max8332$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min8331$$ + 
                    0.05026548245743669, 
                    CalculateUtilities`GraphicsUtilities`Private`max8332$$]], 
                    25.132741228718345`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {330.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min8331$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max8332$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3170143]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3170143[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 
                    Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3170143[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/wBEs+\
IUhBPSEB3WVZaoCTlvd5kkli4drCdvfDz4LGbpNl2K8V0Aa3Sh1E9aY5nzpyZzpNDEST9Xq+\
nrhrzUbA4uYGnx8aMxTwXBY93T3IJSlHBkyv47LYxIegdYOQUYue7bswHIedEu/MbfJ+\
wqGBEwzdNGdUU1GxPkjyjkao9E0mPzE9mTESE0Z/wdDR8/\
Xz4auRgMJYJ0RokV6O2kHkmiYKkh0DXjHnPCP/ujo/K4+eCsRB+FMAjUA+\
MdypJbGAEJwzz8b71cjN1FxPThMdExhdOk5XnuO0FSkvK0ynMc3zjfLKGbYGJTJXj5l7JzSYFufBv4\
gMR2picxyZtz5ZAvzAuGX1nZfXPuRvg+W1beCmO1xOH+b1jyBvR9AjUKp3PWtfJMVJ1rY1+\
wdVFzZetBnn+lKn/lw6o0qthvGgbBswPTY3Xa28V/mVbeJFj1y/Efd+\
YL85RAq4bDpXgPom4YIsomikPnETbp6ty43AYdyq+Q3T6VLDCCUycZb/Y/\
nhYgdebQoi1m21BOryeAQHkYFyx5XaHplSPMyJJZIAX1/\
XLJpuKOhSPO9vXnvKYmgHmCNm0PKHZT5bqTnSUff2j4lZyOdNkyPs+\
15CC3Cj6W1gfacjl8VR4RhLiBU29enNYJTUh0lv2gxIkzAmnCEl/mY/\
95h4uVwKp2pOoLulYHNjSnPgn0S8LfAA81Vlzx/YcXd5ti9kE4rhWXUCTZHnabI/\
pfpPpxg3Nge5Lgm9J/Ad6tyl0m8Jf3RRW9uBuTejWhG5N6NaEbk34f9cEGzH+K/0Gj4y4Pg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.89", 
    "parsetiming" -> "0.584", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa1291233d02adg16fb57f00001e6iadahi00604i1", "host" -> 
    "http://www5b.wolframalpha.com", "server" -> "51", "related" -> 
    "http://www5b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa1292233d02adg16fb57f00001b559g0658d65a715606516680789693320", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2019, 7, 7, 21, 57, 21.3742448`9.082465710955173}, "Line" -> 
    25, "SessionID" -> 32514846202028766043}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plots", 1, 2, "Content"}, Typeset`open$$ = True, Typeset`newq$$ = 
   "plot sin(x)/x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {901., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     TagBox[
      FormBox[
       StyleBox[
        DynamicModuleBox[{
         CalculateUtilities`GraphicsUtilities`Private`max5188$$ = 0.8, 
         CalculateUtilities`GraphicsUtilities`Private`min5187$$ = -0.8, 
         CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
         Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
         Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
         Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
         Typeset`specs$$ = {{
           Hold[CalculateUtilities`GraphicsUtilities`Private`more$$], {
           False, True}}, {{
            Hold[
            CalculateUtilities`GraphicsUtilities`Private`min5187$$], -0.5, 
            "min"}, -1, 1}, {{
            Hold[CalculateUtilities`GraphicsUtilities`Private`max5188$$], 0.5,
             "max"}, -1, 1}, {
           Hold[
            Style[
             Overlay[{
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "WABitmaps", "PodInfoBackground"]]], 
               Pane[
                Column[{
                  Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
              Alignment -> {Left, Top}]]], 
           Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
         330., {104., 111.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
         Typeset`skipInitDone$$ = False, 
         CalculateUtilities`GraphicsUtilities`Private`more$2426653$$ = False, 
         CalculateUtilities`GraphicsUtilities`Private`min5187$2426654$$ = 0, 
         CalculateUtilities`GraphicsUtilities`Private`max5188$2426655$$ = 0}, 
         DynamicBox[Manipulate`ManipulateBoxes[
          2, TraditionalForm, 
           "Variables" :> {
            CalculateUtilities`GraphicsUtilities`Private`max5188$$ = 0.5, 
             CalculateUtilities`GraphicsUtilities`Private`min5187$$ = -0.5, 
             CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
           "ControllerVariables" :> {
             Hold[
             CalculateUtilities`GraphicsUtilities`Private`more$$, 
              CalculateUtilities`GraphicsUtilities`Private`more$2426653$$, 
              False], 
             Hold[
             CalculateUtilities`GraphicsUtilities`Private`min5187$$, 
              CalculateUtilities`GraphicsUtilities`Private`min5187$2426654$$, 
              0], 
             Hold[
             CalculateUtilities`GraphicsUtilities`Private`max5188$$, 
              CalculateUtilities`GraphicsUtilities`Private`max5188$2426655$$, 
              0]}, "OtherVariables" :> {
            Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
             Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
             Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
             Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Quiet[
             Function[Null, 
              CalculateUtilities`GraphicsUtilities`Private`post$2426633[
               Plot[
                SlotSequence[1], AspectRatio -> If[
                  TrueQ[CalculateUtilities`GraphicsUtilities`Private`aspect], 
                  Automatic, 1/GoldenRatio]]], HoldAll][$CellContext`x^(-1) 
              Sin[$CellContext`x], {$CellContext`x, 
               If[
                NumericQ[
                CalculateUtilities`GraphicsUtilities`Private`min5187$$], 
                (
                Piecewise[{{
                  0. + 10.075511450176283` Tan[1.5040801783846716` #], # < 
                   0}}, 0. + 
                 10.075511450176283` Tan[1.5040801783846716` #]]& )[
                CalculateUtilities`GraphicsUtilities`Private`min5187$$], \
-9.42477796076938], 
               If[
                And[
                 NumericQ[
                 CalculateUtilities`GraphicsUtilities`Private`min5187$$], 
                 NumericQ[
                 CalculateUtilities`GraphicsUtilities`Private`max5188$$]], 
                (
                Piecewise[{{
                  0. + 10.075511450176283` Tan[1.5040801783846716` #], # < 
                   0}}, 0. + 
                 10.075511450176283` Tan[1.5040801783846716` #]]& )[
                 If[
                 CalculateUtilities`GraphicsUtilities`Private`min5187$$ == 
                  CalculateUtilities`GraphicsUtilities`Private`max5188$$, 
                  CalculateUtilities`GraphicsUtilities`Private`min5187$$ + 
                  0.01884955592153876, 
                  CalculateUtilities`GraphicsUtilities`Private`max5188$$]], 
                9.42477796076938]}, 
              LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
              WorkingPrecision -> MachinePrecision, PlotRange -> Automatic, 
              LabelStyle -> {}, Ticks -> Automatic, ImageSize -> {330.}, 
              AxesLabel -> {
                RawBoxes[
                 FormBox["x", TraditionalForm]], 
                RawBoxes[
                 FormBox["y", TraditionalForm]]}, AxesLabel -> {
                RawBoxes[
                 FormBox["x", TraditionalForm]], None}]], 
           "Specifications" :> {{
             CalculateUtilities`GraphicsUtilities`Private`more$$, {
              False, True}, ControlType -> None}, {{
              CalculateUtilities`GraphicsUtilities`Private`min5187$$, -0.5, 
               "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
              CalculateUtilities`GraphicsUtilities`Private`max5188$$, 0.5, 
               "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 2}, 
             Style[
              Overlay[{
                Dynamic[
                 RawBoxes[
                  FEPrivate`FrontEndResource[
                  "WABitmaps", "PodInfoBackground"]]], 
                Pane[
                 Column[{
                   Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                 ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
               Alignment -> {Left, Top}]]}, 
           "Options" :> {
            ControlPlacement -> Bottom, FrameMargins -> {{0, 0}, {0, 10}}, 
             Paneled -> False, AppearanceElements -> {}, 
             LabelStyle -> {"DialogStyle", FontColor -> GrayLevel[0.25]}}, 
           "DefaultOptions" :> {}],
          ImageSizeCache->{811., {137., 145.}},
          SingleEvaluation->True],
         Deinitialization:>None,
         DynamicModuleValues:>{},
         Initialization:>({
            ReleaseHold[
             Hold[CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                  Blank[]]] := 
               Module[{
                 CalculateUtilities`GraphicsUtilities`Private`res, 
                  CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                 CalculateUtilities`GraphicsUtilities`Private`res = ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                   MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                   CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                   CalculateUtilities`GraphicsUtilities`Private`res]]; 
              Options[CalculateUtilities`GraphicsUtilities`Private`post$\
2426633] = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
              CalculateUtilities`GraphicsUtilities`Private`post$2426633[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                  Blank[Graphics]], 
                 OptionsPattern[]] := Check[
                 
                 Module[{
                  CalculateUtilities`GraphicsUtilities`Private`lines, 
                   CalculateUtilities`GraphicsUtilities`Private`pts, 
                   CalculateUtilities`GraphicsUtilities`Private`gg, 
                   CalculateUtilities`GraphicsUtilities`Private`type, 
                   CalculateUtilities`GraphicsUtilities`Private`b, 
                   CalculateUtilities`GraphicsUtilities`Private`l, 
                   CalculateUtilities`GraphicsUtilities`Private`t, 
                   CalculateUtilities`GraphicsUtilities`Private`r, 
                   CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                   CalculateUtilities`GraphicsUtilities`Private`range, 
                   CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                   CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                   CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                   OptionValue["Nearest"]}, 
                  CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                   Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                  If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                  If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
              CalculateUtilities`GraphicsUtilities`Private`post$2426633[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                  Blank[]], 
                 BlankNullSequence[]] := 
               CalculateUtilities`GraphicsUtilities`Private`g; 
              CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                   BlankSequence[Line]]}] := 
               Module[{
                 CalculateUtilities`GraphicsUtilities`Private`ordered, 
                  CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                 CalculateUtilities`GraphicsUtilities`Private`ordered = 
                  Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                   Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                   Return[False]]; 
                 CalculateUtilities`GraphicsUtilities`Private`intervals = 
                  Part[{CalculateUtilities`GraphicsUtilities`Private`l}, All, 
                    1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                  Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                 Alternatives[Automatic, FrameTicks]] = {
                Identity, Identity, Identity, Identity}; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                   Blank[]]}] := 
               Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {
                 CalculateUtilities`GraphicsUtilities`Private`b, 
                  CalculateUtilities`GraphicsUtilities`Private`l, 
                  CalculateUtilities`GraphicsUtilities`Private`t, 
                  CalculateUtilities`GraphicsUtilities`Private`r}]; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                   Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                   Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                   Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                   Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
               Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {
                 CalculateUtilities`GraphicsUtilities`Private`b, 
                  CalculateUtilities`GraphicsUtilities`Private`l, 
                  CalculateUtilities`GraphicsUtilities`Private`t, 
                  CalculateUtilities`GraphicsUtilities`Private`r}]; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                 Blank[]] = {None, None, None, None}; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                 Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
              
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                   Blank[]]}] := 
               Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {
                 CalculateUtilities`GraphicsUtilities`Private`h, 
                  CalculateUtilities`GraphicsUtilities`Private`v}]; 
              CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                 Blank[]] = {None, None}; 
              CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                  Blank[]]] := ReplaceAll[
                 ReplaceAll[
                  Part[
                   DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                   Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                  CalculateUtilities`GraphicsUtilities`Private`b^
                   CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                 Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                  Blank[]]] := 
               CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                 CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                 CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                None] = None; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                False] = None; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                True] = None; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                Automatic] = Identity; 
              CalculateUtilities`GraphicsUtilities`Private`TicksToFunction[
                All] = Identity; 
              CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                   Blank[]] -> 
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                   Blank[]]] := Replace[
                 
                 CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                   Except[None]] :> 
                 Composition[
                  CalculateUtilities`GraphicsUtilities`Private`func, 
                   CalculateUtilities`GraphicsUtilities`Private`f]]; 
              CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[{}\
] = None; CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks, {
                   Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                 Quiet[
                  MatchQ[
                   Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                 Apply[And, 
                  StringMatchQ[
                   Part[
                   CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                 CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                  Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
              CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`ticks, {
                   Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                 MatchQ[
                  Apply[
                  Equal, CalculateUtilities`GraphicsUtilities`Private`ticks, {
                   1}], {
                   Repeated[True]}], Identity, 
                 MatchQ[
                  
                  Apply[# == Log[#2]& , 
                   CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                   Repeated[True]}], Exp, 
                 TrueQ[
                  Quiet[
                   Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                 
                 With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                   Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                  SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                   Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 1,
                     2], 3]& ], True, None]; 
              CalculateUtilities`GraphicsUtilities`Private`iTicksToFunction[
                 Blank[]] = None; 
              
              CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                  Blank[]], 
                 BlankNullSequence[]] := 
               CalculateUtilities`GraphicsUtilities`Private`type; 
              CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                   Blank[]]}, 
                 Blank[]] := 
               With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                  CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                  CalculateUtilities`GraphicsUtilities`Private`acc = Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                 CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                  CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
              CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                   Blank[]]}, 
                 Blank[]] := 
               With[{CalculateUtilities`GraphicsUtilities`Private`prec = Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                  RawBoxes[
                   ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
              CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                   Blank[]], 
                  Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                   Blank[]]}, 
                 Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                  Blank[]]] := 
               Module[{
                 CalculateUtilities`GraphicsUtilities`Private`dates, 
                  CalculateUtilities`GraphicsUtilities`Private`spec}, 
                 CalculateUtilities`GraphicsUtilities`Private`dates = 
                  Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                 CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                 If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                   CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                 With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                   DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
              CalculateUtilities`GraphicsUtilities`Private`numberForm = 
               Function[{
                 CalculateUtilities`GraphicsUtilities`Private`a, 
                  CalculateUtilities`GraphicsUtilities`Private`acc}, 
                 Quiet[
                  RawBoxes[
                   ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
            ReleaseHold[
             Uncompress[
             "6:eJztVt9v0zAQbikwfjP4D5B4RqKr9oYEdDAmDShJee8tcRIL1w62sw3+\
efDZTdKsXaWYDtCUPpzqS/P57rvvrvfsRARJv9frqZvGfBAsTnbw9NSYsZjnouDxu/\
NcEqWo4MkNfHbPmJDoA8LgB4md77Yx74Wcg3bnV/g+\
sKhgoMlXTRnVlKjZoYQ8o5GqPRNJT81PZkxEwOhP8nw4Gu7vj/\
YcDMYyAa2J5GqvLWSeSVAk6SHQLWPeMuDf3PFJefxUMBaS7wXhEVGPjXcqITYwggPDfLxvvd5MPcDE\
NPAYZHzlNFl5jtteoLSkPJ2SeY5vXE7Wy7bAIFPluHlYcrNJQS78O/hAhDYm57FJ27Ml0C+\
Ma0bfRVn9c+4GeH7dFl6Ks/XEYX5vGPIGmp4StUrni9Z1coxUXWujX3B1VfNlq0FePmXq/\
6VjqvRqGMO2YZD5ianxeu2two/awoscu34h7kfGfHaOEnDdcKgE91HEBVtE0Ux54CTaPl2VG4fDuF/\
xHaLTp4IVTmDiLPvF9sduBV5vCiHWbrYF6fB6BgQkJ8YVW24PaEr1OAMJkQFeXNcvm2wq6lA87mxfe\
8pjagaYI2TT8oTmKFmqO+go+/JHxa3kcqHJkPcjrklK5EbR38X6SEMuj6fCM5IQL2jq1ZvDKqkJSG/\
ZD0qQMAdOEZL+Mh/7zT1crgRSdShRXdKxOLClOfdPol8W+\
JjwVGfNHdtzdHm3LWYTiLNadQFNkuVpsz2m+02mGzc0B7ovCb4l8R/o3abQbQp/\
dVNY2YO7NaFbE7o1oVsTujXh/10TbMT4r/Qb5I64dg=="]]}; Typeset`initDone$$ = True),
         SynchronousInitialization->True,
         UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
         UnsavedVariables:>{Typeset`initDone$$},
         UntrackedVariables:>{Typeset`size$$}], "Manipulate",
        Deployed->True,
        StripOnInput->False],
       TraditionalForm],
      Manipulate`InterpretManipulate[1]],
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}},
    RenderingOptions -> {"3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult["plot sin(x)/x", {{"Plot", 1}, "Content"}]]], "Output",
 CellChangeTimes->{3.7715218300409884`*^9, 3.771521883402659*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"x", "*", "y"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7715219589854455`*^9, 3.7715220055635386`*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
3ie8lPxYq8cJ/1T9JFaPEz5X8md96aspFj9PlltfEPRT4/tgsq0j9DPj450R
1u9Ev0zrxTpCv8rRWx8R9MPUJ8P6Qn+3G4/1F0Ef0bpbnS5RDqH/Sf7N+f+G
k3eq7uKLsG9Z9NnEx/xP4Qu0XuD0yZxb/s8de1aGdSjoM0gfwK1fSPpp/qfo
J0jfrM9ZeE7NF3r45NI4rf9Z9B0lT/Yp9Nul/9YXLfpvtF7oA/LJpvGjD9D3
cfqQjD7A/1vxsT5q0f8ifUMfoP9duPVXi76L9Jb9C/0e2Rnzb0U/SfYKHPp8
2hfsU+gzyY6BQ19f9pB9Cv3fsrfg3rrbPoX+quJNcOifLVv0+ZceD/umkPMD
6sNBP+kLel7xI/oJ/Z0uzjV/DLyz7BLnAvj7sm/oFTh6iD6AF5C+se7gx5w9
T2afgueVPFlH8HHq/2H/gjeQnFlf5os/gH2G/j2da6wv9PiH2GfoO+rcZH3J
uxKvYZ+hL6G4gPWFf3/FfdgZT/6W/7H+MfljrC/fLZXoVxiew+U97HynTymH
i0/tHId+qxu/4dAPVbzA+kL/hvQB+wBO3wv7F3yo/Cv2Kfh0+WPsa/Cj2o+s
O7j5ddITxom/gT5Ajz+PPkAPzvpC305+LOsLPfEg6ws9fWKsL/SZlQdgfb11
sfWFfo3iI/Yp/U79FGexvuSxJ8qfZ5+Cs+6sCzj9G6yL8dG5gH3mu9oXtl7Q
R2UPWS/worKHrBf4ZO0j1gv+Pby+R+ivq1+R/Qg98R3rZfSKR1gv6In3WS/o
J6lPj/WC/k7lDVgvT85mb6F/X/kK9iN5+F2JcbThP7n8p/m34Gu17zh/6b9i
HVkv6HW+2HqRD39A+RzWC/pisp+sF3hjz06C51K8zHoxHuIF9pfNS/sCPtB3
0z5ifaFnXVhf6M9rHVlf6Mmzsb7Qg7O+Jk/ll1hf6Mn7sb7euth+hL6il1dE
zrOU17I4yOU/bd2xk9DfLHtrdWrR3yW7zfpCv1B+IOsIvkt+AusIni4/gX0H
vl7nC+sFfl35E6tfazx+PyH05D9ZF3DkaXGK+CB/1gV68rcWp4genHXx5Gzr
Ar1f16C/697EfLLVfcC9ukZAftKrRwSqR/j1i0D1C78eEage4dcXAtUX/HpE
kNnb19CrjuDXHQLVHfz6QqD6QtSrLwSqL0S8+kKg+oL5yfC507Pb0JP/8eoR
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
w75xne85dD/a3leRntyZoVq7lO8227zgU9rlQyLoLeNv9/m8lZ3rn47gj2F/
stduVTxSJi3aRv4DeFB42NW8G5fJfobvkLdSf8LeOL7V8NbN82W4t+tp6fOc
VPi4v9clb3T0ZveufZT0Wuv+p6NbZPfAX+jW650/Jk6PtI6P56zhr41OP/lu
x9P4P1aviamv4HadF+Bz/yharNiL+8z/pK56atnCT5My/yo7eM3e697V8K5y
2edus/GD++MHH9z3xMI1H4XjB+908OmzcwbssO+izz0q31L9yYmnI8gZ/IMP
C23rM3WBfRfc/b3Kvguesv3ar1XLnrTvGv7F/rT+449HkRt4+X/yvXnbzTNs
3dnXgzvtmvhilYNRvgvu/l5m3wXf0WxIztsPHLHvgh95KuvcRaXS7bvgY/dX
XVntyiGTA+fXnox5fxqQfMD0DfyF0a8MuK3Vb1HWBfzE7btXNH9+VwR9A690
btLJ94rsM7mBu79jNn7wBxy9jRO8cuZOE27+v/NI4ySP8VzdikPu7pcWQf/B
i+d7rl+5R8Lvgru/f7Pvgg8/vuSWcUfXmdzAe419bNertcLxGP9Lo+ZO/O+I
jYd77u323rLgRuREMnID7xMtsOLG+0eSkRt4yui8G29EDyQzTnD376jHGCd4
zfj//69Uxgnu4onVqYwTvGf8u1tSGSd9sy86uZle2XvXTj6pfBd8oJNPhO+C
55Sc+S74zU4+ps/4P7OcXtn+As/xQ1yvTH/Ay0sfGCe49MfGae9/St8YJ3iv
dWXLDf37pI0Hv2vr+WcrpnU9aHoCrv1l/MGbP3Rg0Krvjxh/8KNuf5kcwH93
+8u+S578VWdnbH+BX/kgbmdsf9m703syZM8x+piNE1z2x8YJPszZHxsn+Ehn
f2yc4NPOxu2P6TP9EhkKV/xw5ehJNk7wDV//nLvNw6dtnODjnX229TI+zj7b
OMEHOfts4wTv5+yzjRO8/pMXP7lyR9hXSb59yO3jO/42/ZTpFfi6W+Lno8kN
3B8P+HV33tl4rC+0a/y8MzsA/oY772y+5EPc37uNP/jrOn8Zf/pXebbceP9/
8X7/lG9yJR337Dzn8g6zV2dEX7XQt/fVeDa0h+fbF62dVCt3bGSLfXfOOrzY
+HybcD5uNT4XRX+h0/5fKqelGR/3rm722MTRDe4q2Oq0Z7ezYc+MTy7R94s9
csvO2qeMT0nl8Xp07Vu8edetNp7FCefXWuNzl+h/39r5vse/PGpy3i2/MWOW
9Gyd391p/F+P+6WXotvLLLi6bvUR08ODcX/sv+iS7C80+fbZ6fbd2QnnTnhe
dxGf5jVbtZy6NPRDyir+Xrzm7h03NT1hcliQcI4sMj4VRV9md/eZDYpvCM99
3Y94Mnbiw9YvhXm2Qrn+j8/saNmR/1dfXm384/98cFT2f7zxbyv6H0bVzXZX
y+9NPmeU5yx//uzpkqfWG/8ycX07GAmkJ7YfE+z8CNPPEqKfNLv+wq3BmtBu
KE8zp/3YTxpO3m56e9zlBSODdk2a/PDKLTb+HxLs81jjf0j0M5O6tbmnyl7j
X0b9jeOzbhpYqfJx499S+dUbRT/qlWVDaPfmJdjnVOPfQvRLpzaavDRPeO48
6+KRYPyr0178vPMJ7xzBfi4yPs+I/nCN7JkGlztp9ucz+ecPf9Pp6TbjVhj/
R+Lv/twc7LhY98ebKm0wPXzX5YuCx3M2+bZm23k2/qEJ9jA8Xx4Wn28afpy/
9QNpxn/o1dyvJS3PF0wY2D910vV0s2+tlO+q+lzlmzosWm7zSk2wb5uN/xDx
WVO58vmsZ9JsPBUS7NVOo8+qePOt3h8/eKFb6A9v1f1BvdscnlOqU2Q+2LPA
g9v3RXYo/9BbeYNNqseB9xS+lPtoTs7RieKTdt/rjYa8fywK/qzi0w8vRFdm
KHba9H+86PPdH6fnXQvFfQViG1T3B39X+BjhdRR/ThKf0wfi4zec754t1aLn
9bFH7Bx8RXnUKXpPADlUiOcF8sUmFBmbZ2CtNJtvHuVtiuo9f/AcwusLZ74V
xadfja+rTDxw2vBJ6uN64alnat5oFMqB7/Z09CaHvOIfqA4Lrrpz7H3hzJfv
TnXjNzlM1HdTWkwb2mb20ShxXLrOkS3L5l/+Lf9vpic7lEdt4vLeJp8+yqNO
2NZjW41Lf5gcktSX9Zt+JwK8hHB+PwK7sV38p6ueyLxK8/vXut8Brng8NlM4
4zzDvSi9B2L+jPK3q1/vnV5gWjieKsobdFN8Df6I8JeEs17fiM/o3ZVavfrd
StPzrTrX1u3rXeK9kzvMHpIXbK/3olnfL8Tn5PC4/bH5Pq7vdlU9HbyCcO7B
sY4jxGe5m5fhWzhnm+fLVCB/msknl/KELd17lTbf0erXClSXB/9aeF/hzLe5
5Hpi6tAX79x6wvDtOq8LnL/68sEn0kwOOfTdbXp3CDlQN7vu+Jgcxui7vM8G
niJ8RGL/VXCb8jElnmp8bnuP7TbfSqoHTdK7NOiDs2P/RPvsrdz7yeCEzXe5
8uXF9Lse4FHh/N4H8/1IfMotLv7t4v5phrv9+D97Wnr5V4f6nLI46D/V33br
3MRuT0jwZ8YmQ3+b/JAk54dEsOdp4hN1fEye72o8d7vxmNxWafz8HhN4auJ8
zT58LD7tnXwMz6J55Tv8+/YsudNsX8Ti67Ir2jfHQ8NLbdljcvhT/sy5c3F/
xuL6LaovXZcfgp6kCt/kcJvXZ+L/1Mftauwcs8e++6Xqv8scf8Odn7wr0kj0
fHeh/J9D4s9356jfr170z1Y9iiwwP2GZ+Gd1/pjp1TD1AXbQvkavtO6RPJIP
+vO76hvcE/H0KlJcOOM/V87xqeH0x3DpbeQ+rS96ksPpSaSw/FX0akqCf7go
Ffqz8t/WS3/MbxefYtI35JBL80Kf0Z/fEsdvOPUc9gv6c0bzKu7kY3gfzYv9
iJy1ryOVtK+R22DVC+bIDnj2KtJbOHJb6+xSpJizS4Zr3SIXZH/Qhzv1Xd7H
Qw67xKeQ7BvzHajvrpCdBB8hfIBw5tVL9YhHzpfZ/diJk2aXdI4E59U/wLzK
K8/8lOy/d04FTYUzrw3iU0dxlu0X+b19dO4w394az0vuvUGb7zbx2atzjXk9
qO/ep/MRvKLwxsJZ3/Xic71Z/DwynPFwLuOHFFZfxGPdXLyJ3Nqo/jLv226N
Ro7fbuteTPl5fr8MvKTwWcKZbzvx2a533hj/raKfLf8E/E76FYUz/lTXZx4s
zLjg1xwjthmu+nKwS34R/v8Z518FZZY7/4p1n+z8saBA9+BGsPqwzSsL97Dk
14HnFF5NOOs7XnzqOH/S8EecHxi8L38SOTyvvoXNOh9Z9yni87z8UuSQWd+d
JP8WXHXM4A3hyGGc+PR3fqbtd8bzi/xq5HPa5UOCH4v83GZKicOhHVB9P8PW
OZ2v1ttmclOdK1gpf96LRwLFI1EvfgkUv/jxSNDfxSN+/BIofjH51BH9AMUv
XjwSKB7x45dgnXDkUEt8zrnxR7z4JVD8YvKhbrv4yPelp3fZYvuC+svf+n20
RDtTIPZo8aHzxl89aucU9GWmNIp8+cUEmy/0PefMSmo87nh4vit/1VT5MfRn
i+JHfq8QHP41ZZfA4d807WCHYsvD88V+x7lq1mqP7Qv9W77brMJHEyf/Eua1
qJufOv9i45VPH7N5gf8zoNP271NCvw68vBevUT86OuHP3V2/PG5+AvQ/Z2ld
8PL4JSafD4l3fu66YOPOfSafBbpv8lX+jrv+vXmr8YH/08p/Igf1t8TOHGv5
0r6iY/x9FGvqxXfwuejGafrA/Zcro++p3vL5E7YvwPPUe+Sj515fY+MEP3HX
9qTDk3eaHKhbZXO/X2bjh75G45SXni5+yPzVLxPykMuSoYfPQOWl8Svsns5n
E8u/8HMYB/WWPN938jR9gH6dG6fVGcGz/xifr+kD9d+lH9TqXSX7epMD/37v
rQv0bZS/RT7U0UYoz898f03Ily5KTvQnM8YOq17AfOH/6Y+rs9ccdtz2C3h7
912LX+w+kd6TQf9baPy73PgN36Y4q162eF7U9IF7N3m69p6ZZVvoT9o75CN/
H3fpm1O2L6jH/ezuNZt/Dv2shPd+zxr9TT3ODvnxQLrFNa+qn3O38nXILZqQ
H061uKaN8rQtXJ7W5MZ3n+h38+/XRh00uYHXTvv5q3Nfppn+gF9y87J9BP62
/ED0x5OPyY17QzmOTZ6275tNdu4sUjzCOy3o0wjFIwdqDT/z6utHTZ4b9L73
OvW9g08UPks4cg4Un85XvhQ8RXnmR12e2eRvvwuvehxyZvzu73kmZ+hHe/W+
CvruUPVPIre9Gudm3XsCHyV8inD01nt/3s79pZLPdScfw2crHpyaNPOxT4bt
sXWBTy4nf9unvJe+fn+9AsVPrzN9A3+nefLUWrcsMLm5+fM++Wqrw0Lv/h5j
8oG+qavDWn4e+s6Ov+kh+Go3nrB+JHzL6BevDMq83eQGvlByQ69GKd7MoHfp
0atUxZt/ST7oTz+9szdSfDy9iswWjp7wLt90jQd66rl51Odm55Tof9e84GP0
qo8jN+ibST7w6au4+F7VR8Arqi7wh9Nzi0/ho3Wx+JTvfqE6vvWBiL6e1t36
QITPkJ4g/7eFp2jfgf8h/E8P57u5nHzM3g7Rurzp1sXw0cozHJIdADc+99d+
97s7QjvD/b720nPmC168auTWjifCeiu49rX1CYyQnB+RfQCHfpPrG7F5UTef
IzvP/oVe9y9s/GsU51bO6upu4A3073Cdp+xf+HSR/YQ/3139veszQQ70++WS
HUb/lT+MrJteJ+nhxb+Y3YP+iuw8egWud+lNns3c+RJprDog8pycUM9aZfrW
RvWm7e78Mn1rLz4NvXOK71Zy55T5LeAZv3PnLPIHH688APIBL6n7dMiZfoMs
z/WInXjjmMnZ+iR1voNDn6r+IuRDf1oH+RvIIZZQd1uXCr31G6ivyepZ4jPA
+TOmb+BvyI9ivvC56H7P1M4L6Fvp/h3zhb5MyTHZjtQ4bvOCvpH8OvhAv8H1
V9j+ok+vkPxD9Ocvxemd5UeBv6c4fYT8T+wk/Qn428htUkKdcZPJTfWj4Mcj
zp9HboyndOzM9aNdwzzS3xpPf+0j5AD9EvntiXnvXEGWX12cghyg/13v98IH
+g/UX4c8oS/q5GNyoP+hmfr9GD/3GVvHsubpsi7MG4BXzOriI68OFQzw8gDg
6xSXMX7whXqvG3rG09LFfTZ+6Nco7oMP9B+6/hA77+jTmHn7I5cKZwnzfuBZ
FW8yrxK846H3o7y4NVDcauc++HDFy8gBfI6XB+C7Y914TA7Ql1GcjhygHzbN
xenIAforygOgh8TXQzVO7JvF9cntspcfc8rWF/wNh4f+A7+Lrf4c+BCfdpE+
wAe8lcONnnhtlYv7zH8j3kmRPWG+xFO3Obtn9Pjtz8jesr74t+rbNz8Qf/Kg
zkHGCX6bzlnWBT7F5BcxHvBb3DlucuZ876p+Qug576qUSOyfxG4/qbgGHPvW
79UfN5e6J8y3sE+XKf6FHny54ujEeCFX0Fx9sOgt9C8rfocP+0jr6OtPIP2J
ePoTSH+inv4E0h+jJ2+T62PXf2V+o/RqpPrE0H/W9+hn9698r9Qxs+fm//eI
DVuw9HjYDyb8RPFcF77LctT8B/AZ9+R7q+COUE/AF8nfM7snfLvzk0P7I3y6
4xPaGeHH3XftnAJf68YZ9j/jlwpn/OArxMf6ooV/pe9ankr4RPn52B/wyRq/
5YuET9B8mRd4iuTDvLzxmJ2xOMKTP/q8RuuF/nj9k6bn6Oe36t+2OE52O7fT
E5Pbc+rTGB+b1rrvoLBvWfY5Vt3d2416+eFYReHIU3na2HLlV8GVZ46dHPLu
hWW508w+0B+S1KTC9bPvhPlG5cNjczfn+LBag4P23Qa617PB3fsz+dQVflI4
350uPqnKh4OfVd9FlfsPj67y+n4bD30aOxccqNhjazge+Q+x4xo/331V9zsq
uvsdhrcVXko4310iPrerfmF1TPUBThh38vOf7wj7ZPrq/kVJV7fy8syZYo8K
h88u9SHkdn0Iht+u/sCeD+y8dNdnYV/9++Lzon73Cryn8ObCkcNu5cFqPjCh
z6qUUD75VKde1WV7cCU9lMNY5VUaurqt4Yqnoq8IZ5zFxSez6pWJ+dXj0bHd
d37XfUq6+Yc/J+QZPrb+q7nKewzY9+gjf+6cZ/PKkcvddx7s6s6GKz8QfUY4
8xqoePP5jcWmXRt2yuQ/XXXteXrnDVz1dPudbsbfRXyWKz9j/U7qG8x4bkip
ZedOWbwwIyFOn2XzGiU+5f67aWmNuYvMv20v/E71A4BXFv+3xs8aUOWTQ4a/
qfrvneqjAKdOfeNSh0yPHg/7fDLpHndD/e4quPpMIo2EI8/r5Ry+xfWfGK5+
GH633b5bXfbypmmuvwWcOPGrS8ei/ecfNT4ndM+ok/QHXP1IwWvC4fOO4o4u
qiOYfNQ3GP0pw/xJlcI4lHrZoBWR8v+0C8f5kPAe6iuz/iL1B56Kthw2OZZu
fKgrzb16vu6SUaGc1XcXqO/O+ORQ32Cz5NFF7tt82PRqu+o+c9Q3mFiPLhiT
v23nrPoPY03FB5z+5zevDKt578DT5keBH3H2zfRf84qNd/2T4T139bnVnZR/
9p/ZTpg+fyn6C2+VKTh4WJjnHyb8pOQDTh/1+YcLvHGxS3ivBz6SZyQxz5wr
dlpxIvLZo362huqXQz5fJdZxTG5TVV/IqvqLF/fFLos/53JW2ecxrq/b5FBX
9/UWuv5Y86O+Vp/Y3vJb+38zcLfZsfqiP7Twx9yfnDvh5RWzxTJ69aAL6mdr
In0G9/rcDMdut1BfATh2vqFw9gv826ivBv8EPhXULwEOnyThzLct9QjXb2zy
aax5d5K+sV4F1J/WWn1x6MMr4jNM+x28s+oXOQdNL9W1TDivwuKj39cznP63
XcIZP/QdZa/Aoa8rnHVvre/+5vrkDT+qc7CBOwdtfS+rT+yzt9JTDjxywKtH
XIxOVj4w0U8+Ei2peIr5posPdhj9XCT6JC9uqqzzcZw7H6OJ+a7/xZne+tJX
X18439V5FO2m8wJ5cj4G6tcyOes8HSkcP7O2+FxTPzz4ENUpOL8478Yl3AsY
YXWE7Qnn+yyrIwy72fXzv/ldvJ/f+Kfp3N/jzv1IYj7tYHSZG4/Z50UaTx03
Htt3tVUvyCp/AJy+tZbC+e6ZnPHxRN4f6e4XgC9RHnuM/BDmRX3O/Ts+Fbx3
wrn/sc2Xc3yfxg/OuV9A47d5OflEpkg+4F9oPM9IPtgB5ptL68g+HaC8dw+v
7y63+tbGSN8S9fxIpID0E72dLryw9Bz8e8Xv87Uv0Ock8cffAz8o/2SD9hf6
3EfjfEf2EJy8vfTf9m8W8b+q+yng8mMja+THYsdkByJzZAfANyp/XkV2gPOL
fHgB2SvmO0XznezVBfCLXpY9BMePqiaccTYR/xTd3wGXfx6pIf8cXPY5OCD7
DF5Ncv3Is8891J9WS3Ye/X9b+MuKC8DpZ2vk4fhjLaQ/4PhvrwtHD+HP+cW6
l1B/2juKX8C5b5L7b3eeIjf4PKX4CJxxqg/Q5KB790FU5zj4YPXLldA5br9H
oHdhx3v+QFR55svyo1h39WkEmT1/Y4ji9OzKMzOvm8SfeJDxt1Qf3anbXVwJ
Tn8d8Sb4Tt2vbyS/CHyz8IrCmW9GfXe07q9ZvVjzIv7lvOBejPw60/9T6rtb
K7/O66sJ/puQON9zon9E8bjVAcX/kvxJxl9LfXQ3FO+D0193QTjjPyn+55q7
+33getc3+EN5BvAUfRe/F7y8/P8kz+89pT6681p3zz+3fDjyOSn69zw/XPcZ
g3TJmXkVU548i/It4OTPH/fwHfzen+IFcPWPBWOEm3z03R90jxKcvruvlRey
uo/yP0PqNX9wQ92jZjf4fbQF4g8OfeDli3hPqetnm77JuDvUK/gUbdi5wWed
joZ5WvFpvLPwr2O+C/Naiptir+q+FTj3m35X/AVOPuoJd7/PcPJXd7h8VMS7
zxXTfS4/vospvrP58g5SM+0vxk/efuTDxct3uHja9AT65e4dzvAek4tPY0sU
nzJO4iPuo4Fzj2mw4lbzTxRn/evuqxo+Q/muvS7fFdZbxX+t42/z5X6T4mLT
B945eevNB/6e93KYN7C+MtXLmC/4n+rvRR9432bi0r0vfnhvuI/gv8m9/2bn
BfTtdI7wXd7naaNzE/7UQZ4rckfZkrPCc4p3Tprp3EH+8On3wVtP3Tf4eOhv
iP4hLz6inpLK7+NIPrzflXPZk59ULxj62+AfPLPll9zXwrijqPz5fc4/sf2Y
pPzYT84/Mfkny79Nlj6DT5d/28blr2xd1qnPaqPXZ0W9pm9s+T+Z08K+NXDd
ZzH6Z/TdvC5/5cU7R6IFvb6O8sQF/7h8F3LbpvFsU94MnPspC4Qjh3ri85ju
54IrXxetq3wdcpA8I3slT/Cruh9xQfJMzP8fiWT14qzb5Ienu/Hbuqtvze4v
WN1c+AwPp56l+ym27lrHCHYJvJX8/Me1juDeexTmZ9IfAn/OHd6FGyh9Y17Q
f6F1R094v7GJ4mL4gA/XvoAP7z791f7ewr3nhOsFfdctA6c981e47tQvFnj3
E+1daPnt8Kd+96z2L/PlnahVsg/Qw2eu7AnjoZ+hnd6r8e45BvO9+wj2+xqy
z4yfOstPP7+T+daeob3F/7mo9wHA6fPfo/oCOPlD7C34Q4l5SLPD/4j/edlz
cPr/Vb+w9aL+OFTnDjh9/m10niI3e/dY57LlQ4T/dW+Bk8P7h/KkrlRI7ywx
fvwK3lvwztmghOo+3jke6ByPeud4oHPcf5cp0LtMJp/0xO+afOj/V73Ju3dT
MLhf/ob3/lKg95eMP/3zeo/CxsO7cz3u2jV6w/9rXcDfcridR5wjq7Rf+K71
neqeGnL23u3xfx8tdqRciSfeLrLJ7D/v3676bsWuze9FjR7/atacku1zVZpt
9hw/ata2xu1nf7TMcHu3Sv0hXr/H/yf/DK5+Dztn5ZfGuun3ne1+ovBmwpEn
4xy3tPGKjgXC+gJ8aukeBHqLn7Zpe3z8fl9HTH0dJgf8z5XSZ3DVBWJ93bsE
Js/31T8/pOb2D7efOxjW+8Snsu6zW91Z+eRRsg/wwd9Lzr/qj8oP7zU5P67v
Hss2L+uvS1aH95WUH86jfi3kkyz6n/TuATh9/pVn/vRO10Nh3wj+5LeO3vS5
n+gfdfSGM86TGZt9t75Q6N+el9/1uu59g+P//CX7yXzxoxrJ/oOfU54zzb2D
YfiHug/buEGBziWv/W75h7xeXhd9IK+7W/edGQ/75Q7Pb/H6TGy9vHPZ9il4
bvWlMM53VEc70jA+TrOr9KXkVN8+/L3zzuwq53LaUucfYgfsPU8vX8F510v+
tuVdFf++LTvDOoJ3k12Cf20vjoY/+ISFn39To3/YL613KgK9UxH17EYgu+Hf
Vwp0Xynq7d9A+zfq3UsKdC8pvG+uc6qk4kfGCT5ecSh5VPqs1G9p+eR3E/Ct
yV5fWUx9Zf69s9gHuqcGTvzYy8Xv5j9gJ5fVd+86ev1jsUO1r28ddDZ874V4
0B9njgR8U7L1h8ie5Cvk3pXy8kux/1z/p9lD4p01ST03HCnl3xfOGHvX/f6I
0dMXVOnu9x8Yk2mF0XMPZbx+j491AS/j3rWzc4F+zfpxvruTORfA33PvqiXz
XfBh7j23VPiD93Lvv6XCn/01U+PBPuDHbtc7fnwX+kp6B8/6VLUfJ3jv+OFn
vub6YMM+auUDP3f5QOMD/Q97O0++UWOTxRH4mZe1Lon31vMGh1x/ptGDv6T7
aNDjB47WuyLg+I3/uvxYeI+D97v0ziR6BX/6kMFzJuDbU737jIHuM/rv2AR6
xybi1akD1alNH9gXV92+8PswY6/q/W3GD32Zt9y7Yeg/+Jd6ryyxvpAtlsvl
V22fWt+j1gV68Oa6Lwl/8JoFnyg3qM96kyd6/pHewYM/97AGuHplNPG+w8Xo
KOkn/Nl3X7u+cftuR/FZqPeaEu3wtWhP2RnsJ/H4Xuk54+G9iwyX43VDG894
jWeqxsO+Y17/uvcnvbjpQnSWq7N491kuRv4SH/T/sOoy11290vB2qlPkdnUQ
w19SPeIHyQ05s0/fd3I2vKDOR37HM/G+pL0bYONkX+877+xboh5mDJrK7jEe
4rjGrv/WcOKsky6P7d8LDnQvOKznat+Nkv1PfHcif7BNuN1XEv6q9oX3OwKx
9e59V9tf+Ktd5GfCf4H2RWX3nrDZDfZXp4rH92TqEr4fBc796MQ+sfyxkjvX
tuiU46TR44evUh4Pu6H3r3RObbPzq0/CObsr2etviam/xY+/Yoq/DGc8LV18
6r3P8z9/Xnl1i9PFZ54bp+kz8+3r5GA4ec6Lsp92L0DfvdfJwc+rx5RXj3h5
9Zjy6rZ/b9J8C5ePx2VmB8hLl/8hHpfZ+uIPfK/+fHDix31efyP++csnv4j2
nTvT1muE/IQdqrOwLvMT3kXcbOuVJ8Hf2G73bevou3P0XgF4Q+GDPHyvxpPi
3pUynPemJghnfck/N9b7CfYun/LV27XvwJHPVy6PYfqAfJ7VfV7kQ954UodL
V5d+u9/sRhvyyXqPAryj8Jj3ToWXr7b1hX9354fb+j6hOOtxvWsH3lD9Pzv0
np7dM1K/UE/5FYnvKWWOldf9HXDyBmW9+qb187i4zPSTfqHVwuFzj/LPn8sP
T8zbX46+5MXptwvnfi74/cLXCMd+8vsgK+4o+mLy+2G8Bv1q2e3E/vnL0UVe
vpc8eVaXP7fxPyH+XaSHifeIz0b1O6FhXkJ59aIFcg68/79jhkM/8/N7ot23
hHpYUvn25noXyPJm4pPZ8TH7A587vPedwD90+VVbryc1/rb6nSZw7gsvFw6f
bnrH8tay//dO/iKjpz/nRj13v9X6mtSf00H3XpEnfrXeW7b3jburb6RD/Hcb
V5vf+4v6RsZWXlEqT6FDpievqm9keb3Ee7VFxWfPfW6cyIfvuvnsTk3EVyQT
B9k9PsXd10sm1hE2iP/H8d8LWBTGsxrPZDcew+nbKaTfN0cOm9S3M3KEe0cU
fLXmu9LN1/TqAd2rva51Add6RRYKRw5dlR8Ypne9wNXfFZno+VfEL3d471Op
/zmSU/pm56nwC/mdPoPD51dPn/k99MXaj4nvIZyLYOfB7xV+W3WHIx/lbSIH
lLcB76T5jm3k8jbg+HXT9C46elWbuoH8W3DqBZ1cvsjkTz4k8N5xqiE+TXTf
EPwVfmdqUot7mpQO/Rz4D5k74e0v24fvA9CHw7t54PThqM/Q7BXj4R0n5Ia/
euQBZz/B8Vfrefb2pOoUFz37nE79wsOJNxvrvGM89Ifs1fnFd+nDiSlfB04f
TsmqDmd/kV9ao3OTdVFeMZjq8p9Rr882OKG+WXDySJzL5KN4r+lhLz9JneW4
yzfavOhXmSf/AZz+lukeDp/ZHk7fSLr3/hLjrFL2q6Rjo8L+oofUHz44q8vH
Jr4HcnOw7Ljzu9Dzx0Q/UHlj8B6a7w7lja3PRHL7bFXi7zWQ17pL/mfiO4d5
g6/l/4Cnqd7RWfsIHD7N5D/j732d8I7uVssDZEnIA2wy+8y7uPm8+L0Nv8up
eMT6lIS/+5fDrX6q8Tyk+MKrUwSqU5ieU5dRP4kf1wSKa6JeXMO7T1EvfgkU
v5g8eadXffJ+/0mg/hOTG/z9/Eks4d3gHYa/m0C/NdWrgwSqg0S8OkigOoh9
t08Cn12pXr0jUL0j4sU7geIdP24KFDdFvLgpUNzkxy+B4peIF78Eil/M/pO/
1e+S2LyKK54arnu+4HcI3yXc7l0KL5x6Ml+HU2FdCT//eW+fltL9pk9cf2Ak
sY6ZIfaJ7H/i+4eZYktd3c1w6gtjdS4wr2vKh1Tb7d7rBlf+P1r0BZf/R55j
VV/QuxZhnlD2YZ7r57G8PfdQflRdBpx7KxVVlwGnDltt6/r2CyuG5xTr2EH6
49XRAtXRrC4APkX1NY9PTHx8+pjobb7kK3TP2sZJvuJJN06z8+CM38uHxN5Q
ngS5EQd1dXk8mxfx7xmdF9hz6mIrJGfsBvntli6/bfYBvJXei4C+g/TnN6c/
5r+Rx0vSexGMkzz8HPd7NLYu9Cm1VD8D44f+R/3eBHgDxYkX9Y669QkoTqx3
67ipnzx4wnD4Zz5yObg094TJubb4HHN8bB15x7iO4xP2FYjPlcNxPrav2RdN
5Y9Z/kT3UseVdvLEnlPPOuPqWSZP8nK5dN/c3nuXH7VA+xG5wWepFyfiX8W8
OBQ+3GdEPny3vfv9EcOLqK94ln43IXG/ZA7ONHqhUYNjxwyH/7Hed53Y9Mwx
kxv9yTMcH5M/74Lud3wMh89ex8fsMON81+UtTZ74Yz2VZ0DfqC/w+0fgOdTH
G3TO1S7X0cWmJ9B/r99XAs8k+v76HQpw3s3IqvuJ4IxnQfKs9XsnhffT+e4H
jo/Nl3c7r6hvChw+cx0f27+MZ9ib8fHbviNf2tx7nxA7pn4G/53GQO80mr6B
6z1G26f02fZw55HpFX22qR6OPzNKuL0jLVznl+XfGKfvJ+xIwMPfPYHPrToH
0X/GWcx7N4N56R1I8/Pbyd6+8Kz7vQOv/hvLNuu1qRNrh/TUWc7q91/s/rvy
ipt1Dx168nJl6r762o5S4fsM9BWMzeF+x8HemdQ96Fef3ffKw39vDO/Li/8s
/Q4OOPm3xu6dFhvPEd3Dyq13hu3eqO5t5VXdAT1RXB9d5cX1p5Q/aaD8ALjy
BtHiwtGfQ+JzVe9Tgc/RvaTOykugJ8SbxI92jmhfPO/ug9t36UOb0/HawcG9
j5k+6557cEi/e8u8iAtK/pvvqx7Zj5pfrX7goJrrVze/hfV6WPTgXykfPk6/
l2HvAqnv9yHxsXcMtF5r9XtGiXHuTbGFGj84+eGXEn/PNyA/XFW4965R7LRX
1+bcLKrfdQJ/TufdDXe/0r9/F5mguhX7hfNrqt5dtDqI5P++9A0+4PO8d491
fzOg/g4+THFW1l8T76uyXg9rv3jvwQZ/bV5TpH6ek2bP8ZeeWpvvwOqi4e/R
PJpQf9mRzLzwq9+TXQLHD6/i4ehDJve+ULiP8N/cd03O4J1cf6DpIf554b9d
3whyAK+kPDbfpY4wX3kzcOoO2zwcPqs8HH1r5N5dMRx9G6ffuQDHb5zs/f4F
+BrX52ny53eaBrjz1OaFv1RN74nZ7z/KvtHnnPi+WY7Ynzo3GQ91h/Uub2M4
dYqtHt4+sX5h67VU3x2nPBi47ivFVrvz1Pb1ctFnLLK8USx/2M+pe0yxgh7O
vuum319DDvjDMVdXjSb2jWeMVb6YiOPPd/R+74PfsWr9UadCS2qF76vb791v
eWtFJHf4Lhy/u3FYfho49Afkp2Fn+J2ROspHsR/x/5/SOia+d3QxOtx7rzUp
sX5hcibPP8PlXU1uyqtHWyuvDn5B58g/Xl7deyfQzgvwIaojIB/wyfqu5eHl
l+YuXfRMhgkn/5+6zjze6zH9/+m0cygMZlqZ0JiYGZMyfMb7PTFEq1KWkpA0
kTVbSLKPLaeS1LeJLEWbJNFHn08bbai0nVYpCe1HIp38OPfreZ3ffT0e+u+8
Hnf3535f93Vf93Vfq7MvHZIeKxy+4p4qdvUZsDe+r/cX5wU81T4yHr16sPYx
7pdRMR2gfbS6u7LT3qh3ltk3tJ6Hw3vc9DTiuru7vELk8xLRDRy76FqdF3Dy
5uYJh3+ok99C7yxwfvf78D4yul0Tz5/EdoAq6eamcd4f81CHEP7cHtuBy/Vb
2RsHhHjRcruW8KWSV5bPKz1hk7NzWr/db1Z2/dP4TbYexl8p+Qx/Mn6ki1PF
/oD8h57ca/NCHW/jT8Zzj0BPw2UfYJ3gqe476APeSHZF17c37ebiedC3v3g3
xDkbn+gelD5fXj9QuPRtWz/3QkPRDT0fufqI3jvgyOFqyouxfG3J7dl670BP
3tcTxOeMR672Ut/M+H1xSP5dvTfB6ff3nd6b0IE4n9XqH8p41a9I98g+AE6/
tpayD1jenPjzoOwD9l4Wn+xUnDB0xj4/XPcsOPb8txyOff5T3e/g5HWOEh7H
MdbK124fx9UQ7/G+619GnMYbsgPDV+hFtUJ8qem36FEXOhw+OVU4dFYeaH5g
yKM0vI3iSB8PeZSG19Y+jlpw2jk/3lheN9L8+8Pa15n1TXmcD/37eiquCf55
Wvu1RH2prB4X+yt9GNzl0Rj+mewVe9QPxeJwJFcHXD1s/7RP1poegv96uOpa
M09nxX2NnjL0pMrrl5oc0/em/fS94Mv0uw3f7bpu9C2v2DwFsgNkQx603dcr
xD9t9V5wfdPSlg6/SPxTqneT6fPax5vv73/ZfW8Xm3zgvTxpVaeuXTpONJw+
AoetDjj31D7Fq7QM+ct2f6FXH3zkH6NueaW87tYf4ni2cv+d5FvNtWF+0wOF
N1gT48jDUcJdHHKalb8GHHtCI30v/IZ866L7Bfwevd/X/3hop24bvzT8IeEv
CedcoA8Pc/En9H1rKL0Leg7V++tt1ROO496PzF+iuFDkMPbM37dp+9+6o0eV
x+npd//WvePe9qfn7bs2SB4O+G5/rm6F1239y4U32hFw6DNT5+s06bFxn5GK
6dF9lkzt2G256Tnc+4O6j+rYquYS21/krepdGD/jB+/V+/yNz/Qv76PEeb9C
88f3Y4X8pzefveyGRuX1qTprvj6hTou9B9Grw9+LrF8279yTXls8P/vHBe59
eiAZrrr9zIN80Dxmp0IOeP+X8o/MPwXeJFrPvIz5DXUPVgv1CmzfeQed43DL
f2kfx1W+Jv1qn3t3s/620geKy/CqeflJ8zn5p8B1v+TnKs8rrHdORvaZfEn1
P7zzc7LB+itA1ytVr7V7n0nDpvb+yfa5sez/F116XkmLou8Mf1N9LrqUjV9j
+BFRf4E5tm+hv/nS7C1hfLn+rvrwbcP8ho9UHHvPsB7DB8o+DH9bfJziXVuV
zVMpr7rxuSkhbjzH94J3U18Vvhe8SP1H+F7wLfT1Lhv/reH9FEcNHcCPiPrO
z8mAh/oT84wO4PepHuwNYX7DH1b8MPQBV98Qow/4U6q/DX3A26i+a5tAH8Or
hbh0o1sz5SNXUP1V6AY+UPVXoRv4UPl9oBv4NdL3oBv4kaIPdAN/Vv0moBv4
3DK6TTO6gQ9XnX/oBn5smN/oBo7fBLqBvyA/AnQDf051R6Eb+M+hP3hO587w
65RHCT3Dd0zKDu575Ul7xnya4ZxSL7Gnxsf9TiZli249/vbXX/koA53BG7Ze
8++tR83MQGfwdr3z58676d0MdLbx1yz/Y6cTxmegM/jj7fetT9cMz0Bn8AM/
//rvofegM/gLYXwWOoM3DvNnoTN4l7CeLHQGPyWsPwudwZ8P35uFzuAjAt2y
0Bm8ydoNV858dBF4voniuzpITrJ+8OPceWyD3y/IpQz0Vz+mdJzs9tAf/E+y
00Jn8NND3WaTt+C7g7zNQDfw/SFPweQY+ArVXYd/sJN/I/8F6wRfIns16wTf
EOrb51gn+I+hn4KjQ2GqfCVbJ/gxIR/Kzgv4ZQ+G+vmsk7idfspnYZ3gjX4X
8rxYJ/h/ZH+Dn8EnKa+E9YO/q3cf/Ax+ufKI+S7wU84qWvjzhi8z8AN4K9UZ
4HvB1yiuD34Gf1b9EaADeB/l3bOP4PPmhTgo+Bm8gvLK4WfwmbrHpdfZ/f6Y
6tgMrHHH/hZFRs/82s6h/k+VH+5v0/DCA9AhP1r1jraRjyr81fBOyb16b8uC
oobbDZ+oulubB2y5sfea9YZvUT2xLdLTwFWXI3ey4jXBKyueZPxnd56zZmqJ
4SuVB/Thri82tyjab/gCxY3vevT1f6+ZWgE65C9TnPn9Q9YdV9TQ6GZ+HPyy
4BtDnrj02ENM/9mh/IKxZd9byrs7X1N1pZ7tuqFLwwu/N5y81G1ldNhheEPF
jbyn+h3gtyj+4XPpyeBP611fvd3YJ3qv2WP4dao78Ue9l8Cf0vui/tz0hoYX
VqDuU76L3n3jyuhZYHhj+T2bfTGuVlHDqobPUVzZcWXz7MIfl/9efVherDLl
+DVTf07AH5Ufsw7+Nd1H1Dd4VvwGrvoMucriN/AH5Gf/VvwGPkFxCC+L38Db
q6/KBvEb+FHqP7tN/Aa+VXUXTxG/gX+iPsgTxG/gK8P7IvlI/Aa+U/Enu8Vv
4COVb95P/Gbzqx4R9cvAb1ZdJviN+0V9MHNjxG/gn8se+4z4DfwqxXV8LX4D
J19gqvgN/BT1RdosfgOfrv5fNcRv4NQlln3fcOJ24DfwUYovhd/Ad4W+JAn8
Bt5W5+L0Mnxfjvv0IvWNffDrC+7tveYH+nQnPUPf2CSci4r4L9KT1e+DuF74
+Uj167yuwfnN1kytkodvv1NfS8W1GD5e/UCfD3xu/D9EfVSLyui/xfAH1C+4
Wtl6vrBzcaj6L5/xTPOJU3tXTG1+9bufNeLuAb3XVDb8U/UPHVQ2fxXFaRTk
lysfrWr4XsP/pe8tKdv3gznwnOoMFOvdB04fefqIgz+q+K7WZffLZsOtb3LA
E/C6isPPy78C3i/ug2x4Z+lRWqfh0+Qv1nel4Kcrz1d0MHyh7JbXah/NHqZ6
0aKn4f3UFxV/mNUXUZ1q7Yvhl6rPbFPxofmLAh8mXaN4y9LcIarLXVdyEpy+
80+IT8Abqq54+N7yem/t1c+6lvgHnPyaQIfyeL0/qe/2CeF3DT9M8R736bxY
fQL1WW4mPrR3uvLLiOsCpz/vHPEn+F30pQ30N7xCoH9yRjjX9i7uoHOt82j4
NPkXxgT5YPjnXwX5gH0S/C35a2oHOWP4WMmZIslDcPIOSiQPwcnPOquMn5cZ
Pl/937uW6WPTDS9YUWvUpcd/kEwKuL2LewY8F87FMsPXq597afhdw5X/pT7Q
Pxp+tfx0dSU/wV+W/f862XnAsfO/IbkKPqy4zM6ZG6f7kffj5eoXtkf3I3h9
9VWv8lAZbu/WP+venBrmMbyr7tlAz/V2DzKPftfwS/W7Wqfda7eE/YVudh9B
t2tFZ/Cqoj9yG/l/UH2Qi3WuwfuJb6/VOQXfr77qyG3wRjpHOo92v9BfXufa
8KN0rpHn4JdIbszUeQFXH2eT59xTsyTHkOfgHST3kOfgyEnkNviTkrfIbfA6
5NlJboMjz5Hbbh7shIbTPx25DU5dsqru/r1E9xFyG3yR7i/kNu/TI1UvRXQz
fLXuQfWhN/xl1XlAboPXUr/yMyS3wauEfh/Jf7Xv4M8q76yy5DD44bqvjxA/
gFdW343BksPg9+nev1/yFvwT9ZHvID4Az6i/yVDpz+ALpFcgn8GnqT+L+Nzw
N6SfzBa/gc9TfxnkM3ilQGeTz7y7Z0jPRz6Doy8hb8HxKyFvwamHv1vyFvyc
czuVFN9ZnCxQvT9w+p4gJ8Ef0X2BnASfL78/chL8EtURRU6Cr9B7DTkJPl75
OPKLGH6B6ueIPqmjT65+/I5OB6gv/K74XZyOvLVf7StuXan7qEr5+zrUt8lV
0Xm396b6x+3WeQevqb54zo6RnyK7wQeSA+DqXym/+G57F6s/Y7JX5xf8x9Cn
O8c60ZNPU9831gn+qvLusbeA/6C+h6wf/P0Q34h/zfC2iqPADgN+9MhgF0Ju
ow8/o76ELSTfGL9J+cvtJd/A50XxLfsMbyr/GvYl5r9MdduwL4FPlt0MOoB/
pb6B0AG8vuqPsV/giue37wU/WX3ZPlCcE/ha9W9tVzbPHHtHvNip3TGNBqzP
YXcCpx8c9xT4CvXjxu5k61R+AXYk8I6KG8eOBL5ZceDQDT18nfynRe6dMl9y
Hhz98Cn1JYTOjN+nOgzQE/yA4oKK9P5inkfoUyN6Mn6K4tCuK8MXGv6O+o5d
H3B7d7yr/mXQE7y2/JLY8cBfUXwsdjnwrcrrvAS9gXg0xRnq/Wh4kfp7Qmfm
maj8IOiGXneX+idil2aew1UHDP5k/NIQX2TnEbyd+u5xHsHVjzV5U3zI/Kc9
et35a15eL/6ZY3iF73Zvb7BtSXKn+BP8hIBrf/+/vveh7xJ+aNNXVyrOFnnr
3gvmfwS/SnrIYvnHwcfLXpGTfQOcfuXISfTYc9S3sb34BPwK9XGer3uKeRLZ
SfqKfxh/u/pNI3/AT1I/R+Qw+Lnqt4gcw+9Q6bTbq6+76NUM6wGftOmeS+o/
8WSG3wVfG/Asvwt+WJgnCz+gh9+ovorwA/gc9W1s5fw+1U4efW/XOa+ZP4jx
3eTngn/A71O/SM4jeE35y6A/eEZ0wN4O/pT8bqu1v+j/U6I+3XMyjA9xxNOM
buCdtC+ca/AX5AeEnmZ/075z3sGPln+HfQRPxT89nB+q75H7Zoxd/mGWe8fs
mYE+dv+Cz1Uf0mrSn8F7q5/pYOnP4HerryVyGPo8pTpmRdH7oiS5QX0zkbfg
18tvC/3tXSZ/MXQGD/rjvExe5wKcft/QDXyA/NfcO+D4u2dF746SZLLyC/CD
gD8jv/na6D1SknSXvEIOg18u/3tbyWHeX09Kf+C+Y7zqv+WqRe+XkmSW5Ofg
6P1SkvSVHI79aKXJ727c/t7YH3ck0uftXfmM5DznCHyC4hBiP1op9TCVx7XE
8FZBDufQB8B/KglyGD4H/4PiJWK/W2lSXfU22Rfw/ynuAnqCd1H8BnQDPzp8
r+kJ4MfoPoJu4P3dvc97UH0uzB8H/o7uWe5xw3Vfc4873PlnC1L1z3X8WZAq
z8XxW0FaUf1HYr4qSHdLP4n5pyDdJv2nmnv/nqX3Lzjvrz3SG6Eb48cp35z7
jvGPTwh611XSh8Evl15RW/ZG8J7S9yaIf8AXqa/i+brHwQdKn/xU8pb3To1Q
z0R23Y2G0wftZvEh8+xQntcs3fvgG6XHHi+91N6/k1s3PH3uqznkIfPP03sh
5p/C9Ey9R6APuOKREvduSmuo37p7H6V6HyVnyu7EPO/JLtdddj/wQ1UXaIrs
UeDtlO/WSnY/cOXhJu79ler9lXPvr/SH8P4y/gHfp/cgdAAfqPcj38W75mTF
ySPP0dsPV/1ecPTMI3QumB8951HdF9wj6C29de+gV1hciu4p6A8+U/caegK4
9AST5+D9pT9AH/DZ0k+gj/tdow/4DeoHzfq5N/sKR+8CP0Z62t7IrlWStJGe
DN2QY4crriy+NwtS0TOHHmLvdPUpRt8A/0T9lxnPPn6sfseMB/9KfZnR95xf
xnCrh/rwoUfNyZbHC/G9NdTXGDkMPljxSLy/wBV/ZXEL4N0Vf4X8BB+meC3k
J/gQxXchP8Gru3gw6NxecXfsF/gp+i7oxrlbJPpAN/Atoqfbl1T7knP7kn6s
/cIOyX6NUX8frcP2d7v6ECGHwVP1F5sreQh+hfpuYGdjf5O4P5Hh9Gt+08Ub
NFC8wXMu3iCjeIMPXFwB/V4vlrwCXyi5l9f3Ijc2yn6IvQv8G33vc/Ljg/9T
falaij7gT8jOWV3+ffCx6tuFnxf8EPVlpr8j+G3qa3awbbDTgh8le+wu+TXA
6YvXQ/ZP8C+Dn5d+0oZfqHr4eWeXKNG938PZJSpJT5ju/KdjZT/v4ewSE6Vv
9HD2BOpF73P+UNWHT/LOzkD9KPybnKMT1Ceile538IHqq5gXH4Kfpv6S1yhO
G/wW9bXEjg2uPBezY4CrHr75DcHpC4z9GXya+kxVcXEF1Ktv4OIKetKX0MUV
TMDfJz5EPmxWPcxS8Qn4hfKf7hafgFdRvbgGigMBp6/o9aIP+J7gP0rGKj4E
vEj9WIeLPuDDZafaofgQ8NnqV7VGdAN/UP7oexU3Ak7fZPgZ/EDwf5FnZXh3
9TU+1/mDqNvfw91f9KPs4fRk+Ha98wddLztMD6c/H5S9bp/zE02Vnyjv9Gr6
3A1xfiLiHFY5PXm89GTRx+QzfejwE4En6kMX/MslJp93qc/jRPkrLX5M/Ssb
SF8Fb6n+lTWCHDN8rPobKo4l7+Km8CMY/j595eRPAb9U/ovaDm8jPPin9pg8
76K+XQUOv0R4oOf3JudPlV9mqMMbCZc8zDt5mPQVncHpM5gLcVAmbw+qX3Ml
+ZHB6bd7PPW9yftT3vQMJ2/VVzqn+Cizc7YRP9+n9YBv17kgrgx8vfoqvqF9
B39W55T4MfCa6kMq/3h5vxfJB+K4rJ+h+jnWdXEIoyWXiNcyO6fyXiXfDFdf
tuQZF7dAf0/JScORk6/qu9B7lyo+7UPlG4LnFecme6zhf5P871Z2ft80/Gn1
wz1R94jFt6sfbsEdZeNNP790ROjn21rvQYvb173zme4d8IvUh7e1s3/2X/TO
zA6Dnsogl8ArvPLRXSfOPiVzrhvft/GCySV/eyuDfQB8zM2b7xnS6cls4vD+
Vw2e90DRK4qTX2n341L1Cx4n+oD/Tut8cdiv/z6zOPbHr625s0Xv4RnsD+D/
DfNnn3b442E9mf8EOtu9+azo3Ed0A58lOvd1cfIVxpXRIdva2Xv7BTpkkdvg
51T89wsHpk7JDtZ5594kHuYFh18mPMRvlBq+Snw7yeGLhN+j8+juqYS4EfDD
dL6QA+C3qb/nqije3uR8DjqA19W7tZe7d+gLrzhes58cJ73uC9374C9JLn2v
8w6O3rhb9VvB6atL/Cf4t5J70m8Nf0P6LfHG4Kqjjl5t+Dbp1cQhu/WbfOBd
00pyG3ssOP3uidsE576AH8DP0HuBfQevrfdFfednl9+fuCzD6Se7y/nTm+pd
08z509/SPVg9jjNPX9V9yjvC7CTqGzsujjNP5+i+Pi5+f6X/0H09Nb7f03X0
g47v9/RcvdfGxnHm6bfSE3pKDwTvJb4tjPWBdIzi5IkLsvwC9c+9N44/t/65
6IHgl0lv4byAd1fcPvFF4KP0PnV5E/nDlBcwVvFX4HPUz2u55CE4/eDekjwE
v0h9FZs6fSavfeT9Dk6/P+ze4MQLXSD7m+lLspv90+EzhM8Wn4MTL/eRwzsL
f97pOaoDn0AH9JCb1b8PexH47aoLynscfMfD7Z5recmXST3d4+Bvq3/iQJ1T
8BnqW4cdDJz+jNivwLupXmsd6RXoRUvUVxH7G3rIUPUrfEP6BuOXqs/jzvDu
sPEL9e7Afmh9TT+6sUu7VeV+KPARqqNLfXzLX1c/ROgJ3lz1KOAT8PrqG0g9
CLMrKu6duD7wqXonYn8Ap+9nTu9fcL1/kzpOH3td+hj3FOPVR9LiBsHpC8y7
Epy+wG84vW6F7sF6Tq9DDm8T/ZlnhPIC8BOBN9M7GnkITt0M5CH4IaqbMdDp
jdzv6OeM36Y8Bb3rDW+jd/1s3WvgymuweHvw9qp3gdwDf0z5GrxzwZUHkeNd
DP4P1WtFToKvU99P5CS48iZMTrr9Mjnp+MTkJHgD2Ul4Lzs+tPc1OP008Tu4
fEzyOMwOozwOi0sHf1/z8H4Bp58pcenOfmLnC5x6sJxr8P8TnYmTAf+76My5
AN+mOiTadxsvPsndLT4Bv0D7Dp+DUwcV/Qf8QfHtBOkV4DNU14X4RnD1e1W9
gnK7cR/141MdDMO5p4hLd3Yw6W/l+HGqD/m803s7R++siqbH0j8FPw74B5KT
b0bxhKUJcm93pP+UJldITiJXwYdJbjeN9KLSpKHkJPcReuD9uhda/IY9B/u/
j++dEOntBSn9wfG/MD/9vutFdraCVHXenH+kIKV/5WBnt1kquw048/fQfTrV
+RPvdPe1xcHq3jxB9kDwCbpn4RPwUt3L7Av4rbrfWzl/H/lQ3Zz/bqn0jWpO
f75K+nM9pw93kj4MndHHblPfyd1OH24ufbip04enS49iPPP0V9/GWbGelv5L
8i0X62lpR/kXPov9Dul10t/wW5kfQXyC3xwcv9Jul09E32fkEvJQcsnuX/Dt
qjuN3AAvVX0w6GZ+Q9X9Y3/B1S/Y6GP5+KpDhT/d5b+b3oIeO1z05J3o8j0t
Lh38hxGhfjv3Pvhd2l/vryE/dKDzy6gfh90jLq4SO6fpe6/JzkleIXrUCtXr
Rs8HP0rxGDtcfs1zyq8hvoLx9F392uXFzBX/kxdp8X7ql9fMxen1VJwedHb7
YvQBV99V06PAc7oX8PuYHqj6XX+Tnwh8q+p3IR+svkSo723n1PQZ3XfIB8e3
xj8uzpD3jo0fq7rufK+7X8x/B04/a74XPCs+J78M/GvVaYR/wDeqTiPfC35A
54jvBefc8b1Of7A4f+5B6qDudHgv4di3XZ6m5RGAp8Kr/YZ/5wyX76nxJg/B
WwgvdnYhxclYfjdyfr76QeOPBj9K8dj4ncEV52x5qcjh+soLgB9cHI6LByi0
+zeOvyq0+zeOsypMkZ9xnFVhOlzv5R1x3npapD4p6M/gD6pPShyXVZiecvPs
Jje+tdD4nPEL9N6P47Usfsb0Yca/KXmIPgx+nvqku3oI+T+FegjZ5rIbg09V
HWlX9yA/SHUYro3tKvk+6s+CfmLxEuoz6+oe5B9WXQjWg7wtUp/cixXPA35A
fa/Q68C/VL1u9Bbwc9TXlfUgtxerXzB6Hfhu9auFD5HnldV3lXnA5Ucz3Pq3
qB8reh1y6Qv1M2X94K13jB5cMmiH6XXg16oODOsEn6D6k+iZ2I1f2dbm2J1/
XJpBHwZf9K/Dfv9en4UZ9AHwP6yd+/jwv82hH5nhmbI6KtkMdgazh9865LEV
H0/OoE+C1wnzZFkn+OLwu9ndUR5cSdJJdYz5XfMX63vjeMJf5JvqHbEe8ItE
N+iAHv6Y+lwz3vINX3zntR+GbsvF8be/yCX143jO5fe9p/w+4mrM76l6XNjH
zN+quoXxdxWkrcQn4MilJeJDl2eUblXfVd4L4FdsHTfx86FWH9LOacXQz9eP
z18Wxptc5VzcFuq0+Pi0/Dv63e9kP+dcPKy+M8gBi4tQn1nONXgz1TFjPfCt
+lbb+WX8Tcp/BOcc7dV+kZcKTr9d6jyA06eY73J594bbePEJ71Pw2yXHqPPg
/Jhmn+e71qnuPfZ58MtVz6GhyxfupncT5wi8hc4F9nzwT1Uvor7LLx6h/GLo
xrkbGM4pfiU7v3/tOq//U6+OyEx35/q0bmm6t/U01cMp90O1COOzeTd/0zA+
i/+U80gd8toOnyIc/6nFgYsOdRzeWzj+U3D6C1R0uOpamH3SxVGYfcDi2Knf
G9VHKk1ah/w188+C08c5fr+XJKskz+P3e0nyuficc8o8r+leiNdTkPZQvjA4
8mGr7iPiJcDlx7f6KuDX65zG8rAw/avuwWYub1R+HCcnC9NFuk+hP3hH1avh
e5FLlSVnnFxKb9O9jz3T/ESq84M9E3yy+sM6/SG9XPINu7TlV4Z+KOhdhr8i
vWuQ7Gng06R3zYrXk58a1pP0jdeTfyCsx97F4P1VL3qg/MLgS1X/vJf8wuAr
VP+8n+yx4Fl9r6sflb9L9a+Gxnpj/kX1Jewe63X5geGda3n6yPk7pQ+Pcfg4
4WMdPkR4fZ1Hi3shb9fhK4SvjOsY5xerzsNSh9OX8F7FY4Mfrzjtlxz+L+GO
3/KVdA9WdfWUrhR/ck+BE493vKuzNEZ1ls5wdZMU52PvKe7BE9XXb7v4Dbyx
3i/oORY/M+r+t2v/9KnZx8A/Vh+o1bKHg09RXrzszKmL2zG/DPfaR+pnx7sV
/Dzl57Z0+Z4Tle+AnAFvr3wH4jTA6+kdRFwH+NHy47dw47FHrZe/nnuzVP1b
iQew8Ypb494B/5/iKqkLZL8rOVnN4ScKH+Lu/Y2694lDc/YZe7c6elo8mLOT
mB2e7zpW9dKRn1bnRPlQvOMYf57qw2MHA++k/pWsx/ndrK4U88+I+9ga/q7w
Si7uiLpPzzv95ArpJyf8Rj2TCU4P+UR6SD2nh6hOFPWoy98pqnOC3oX+8PDW
z+6e8c387HPu/fLdhROerLFnUQZ7GvjgmwuXzrj/08wgNz7TssqsO779MAOf
g59ZYUO39JEFmaruHbR1zcp2+/bMzBAnbOMfX1dl0L9zmRkOP6fj8eMa/Tw3
U+LeTYuvbnJmrvj9DHHF4AfOWvv8hP+bmuH+Aj8vvKeyF7t6mKNyE7oWNx+f
Vf0Bswu9LbvZ2cG+ZPh22c3YR/At6rNGXA3zVzq7bD1Z4jbB0/Bd2X3uHbcs
fFe2qnvH3bf1jkFHnjFP8UvldTgzgc7Z6m686Jwd5Pb9QNjfbFNnd5K9iPgl
06/o/0KdCnD4VnWBTO+aJ/tnqcMVJ5/84HDqCMG34B/pHF3n8DeFx/lfVl/U
6pVZHqXst3scPk74bocPE45/HL3xCdVrwp8OfofeKTujuh+lSVfJE+535+cy
Pcr5rczfDT5N9mr81+C9lb+Gvxu8T9H44t8Xluetg78Q6upbnI/lOarO1XjF
BYHXXHTCzfe8vTNXWfGo4LXU1z7245Qm9SSHi9z7PSf5H/NbQZqVnEcOgO9S
fP41UR2/grSN6k40kl0dffv50N/c/J6Mb677l/cd4ztLH4jtpbYe20fGN1Z/
ZN5N6OETpbfE74vC9BKtc5PqAYL3E99yXsAv0r0W+0kL038oH62hq9/SX/oe
fMs660oviv2khelw1Rtp6t4d8pcZv6Hnb1Cdz6Gx3p6OlN5byb1HLpO+92oc
H55W/H2oL3qcywecF+yH0rfL8wELlQ/Y3cXFfUX+jrMzXyM9uUrsh8Lumrsu
9kOln6vvcyfF64IP03vhxNjumo7Ue4F4XfDWL5aNT1rH74s0Jzvt7Lieavqe
3jUPxu+O9Du9a55SPSXLbwp9fqU/fGH457cUp/t3fu7r6+ZVX1dydb3p50tC
ndjc4aq/ZO+dME9ul6unep74sJezuxbK7lpN8QnoRceo7+del3eTlZ4PbvFR
kj+7XP2KSfKPwJ/OT5Ts1b0M/r7ql8rvY/g2+X2Yh3v5Tfmb0D+dPpMd4u7H
FkGfyeI/4nzl9V7Y6fLOmskfjR0SOuxUf1XOKe+IOpInxc5fqbolSSXJc+j2
ufqTot8yzwL1wyUvD3zoyTVvP2r1Jst/BJ8QcJMz4M1Dn2I7d6znTMkx8r5Z
j/LfzY8AXkv5+9zLrr6K+XPZry+lLyGH3X4lcV3r0uRq9Ts4weU3yX6VxHnN
lkefxHmOpclb/+u8/78FxS7PsTRZFnDzI4APUD8y7NV2j6jOT2wPL0hfkx0V
nPGTw36R92T4c+obDv+A11B9IdbP/G8qfx+c8UO0v8Sjgh9Uf0DkBnih6h1B
B+bPuzoAjD9aedBx3YmCtI/y9agvzfjX1GcNOwB4PdVxcvEA6Z3qOxzXeShM
Z0meoG8w/kzZf+Af8JNkjxoUy9X0xg6hf3pJXE87XSE5Sb4b+AHJyaoPRXI1
zav+dtVYrqYrJZ8bxPW30w/XltXftngMy0t9O/TDdXnr+UT9Uqs5u8o1umfx
e1r+qerMU6+Dc52q7y1ymPGL1C+Vc+r6khg9XXyynUfmP0b19rnXwOerPxT3
oNUHVn+o9c5/d6v8Mj3cvaM8uCT2+5Qkk2SXiP0+JYnsJOb3d/kavFMMp983
9kn48y81Qv3t2F/2i34oPgS3+g/q37rc+ZvO1Xe1cv6pw+WvGRO9CwrTTMtQ
PzyOoytMT1X/1umK+4KvLs0vbfj0xi0mh83eeEzoRwBfWV04zQP/WJ009VOA
T8CP1nctk/0Qef5h/eM6Zx6werBml5gveq6P9N7SZJ7Gz3B6Pv1qiZ+0/A7x
Sfx+KUynim/rujqKF6mO4lyXxyH/TuLqBKYn6XzdE+c/pmNUx744zn9MW6kf
seubkF+7IPQRcH0T8uqb4PsX5NW/wHCLawp9HHz8W/52yUPXj4C+QuY/ZZ69
N4W4hTWu7v142X/4XfZ3V+hzkUNvBx8guY1dEfyp0A80WaK4OPPXqy7K8ZJ7
lj8e3mVmN7b63uorSl4w+Cy9Z5VvaPjzuh/R/y2fXX0h67u8yEOVF8m7DL4d
rnv8GpeHvlf5tsTXgf9V768WTq8bJr2O+x38Rd2D0I3fHR/6pZo+xviZusfB
Gb9c+snTbvxCjeceNFx9OWe5PPfN7h3N/Bc0Htxw64hvc9Wc/1TxRXZPgY8R
/xQ7e6D6vGTYX877ZH1vXLeqIL1J/c7i911pcpHWQzw8eAv1QY7r25QmU9Qf
sE7k3yxIl4kO050+9oH0MfywpkfpHmG/kD9Piz+fdnrRgkgvKs/vHqn8bujA
PP11XmJ9tSBtKr662NHnY9EnrtNVQL9Rixdl/pvE/zH9f3lfq55nrMcWpmfL
HuL8aGk/9eNz/cvoe5JzfV7y6vOSc31b8urbkvuIvqI6j/uC/mnyHD58XfuI
Hgv+tvRw7Ku8F75W/F6xq7OUFX/GdU4K0y2qX0oeIuu8WH0hz9L7Ebz79K5l
fSGbxXln+U9C3pnvI5PfHPrI5Jxemj9b9Kwf553le6lf5+w47yz/mPp17pB+
YnVBtY+dFF8NfmiDb6ttr/aV+XM5F/v+evGQ8b1GmF4N/ywO8eo2D3iNMI/h
8NWGJZdd1vjgN6Z/go9W39jiOM8uz/1IfQnunQ66l7GDIU/o40ncIHh11V2n
jwm/O119OfG/sL/02aRONetpPK1sH5Pxuk+tX4z6/U10eBPhvNOh84Ohf2Vu
b8w/6RHq19M05p/04ffC77KPFgd1wYpXC0t35JZFfFuazA16US74eb82fMOl
FaudunOnjYcOm5r0uaXumi255orDt3z/+mEfd7n136D1T1DcDvNcE/ql2jsO
/InQt9He19Cz3YJHzzr2yS8dX5Ukq+UX+F56IPTsLj/Cfoc/LBw9mXVeKPnW
yt2zF8T9MQ3Hzj/a2auPlr063E9zMowPcmhVFv0BfFTNXTd2OD9ncdQWHxL6
bFq8vcWfhL6flu8D/tJp4dzxu1bXPfxu5j7FJ0Dn2/780xsP3T7H9AHwz2v9
peXmNZsS8u5Z50u6d9o7fJxw/EHg1RT3Nc59b2t9b2XnL2gsf0GP6J1ldUiS
Mb8hT15QXj/zf9/klM3JY19ln5FdF/ynUwdOvGDX4hzjy+P9bup102lfZxgP
vj+MT8Chz+Ih9ao9WXW57QvjG4f71PQ68B+0/gZu/Okav+n2yA6cbxDswMkO
Z9/7i+x7f3ZxsGsVB9vZ1YNaondQI9mTuQf/E+oEJvhboU9e+T5zXDzeldJb
PtQ6rd7pi6FexA4XZ95BdtRaWif4S8tDf41ukfwvSfaoTwfrhB9WhXqYlv8C
fqPqGMOf0PN/0kvnOLvQ5dKH1T/F6PCx6vk3k/wEr67+AuTNmf1T/YmoswT+
o/pQ4J81vCD0ORrn8kw/U55pnd/IM63o/PXF8tdXcXoy8W8v/IYff5Lz1y+U
nDxGch59Zpb6ZGEvAl8UcMujB182oeO4jw7fYu8R9PB665Z0aPLjzAx2RavL
ofGa3/APNX9r5wc/IcyTJR7M/JLrm3XrOXyh3Xfgf1QfH/aLc7pU9h/2Bfww
1SUbF8nbX971w27r+OLrxRZ/CP6D/GsVnb+pvexgxc6/Nk/+NfYL/HLlnbFf
4HWUTzTJ1W34u+o2FMV9/dK182f8OLnWZPtd9neI9BnkD/S8M9QxzhCfDx2o
w99EfTeszqHqG/xdOOdipPpWVHbxQlcpXminyy97X/kRl7o6h9jH6PcBP5Av
zO9aHKb6GY1Qnw67L9R3ifk577UVd0SdVb7rXtV5aK//D/6F6lF0cXXe3tV7
iv53nOs7NQ/8DE6dMdXTM7/DV6pjRh8EzpH6WWsfV9r5WqE6NqzH4lJCHRjV
xy6vq9PzjtEb+93+ZqZ/9e0nThna3+rbnDVl6OKuzYcr7re8/sxNYXwWuoEP
DHV7soO1fui8XfWXurh3a1bv1raujm6dcO9bn0r4bZ/oLH42f/FZqjfYNt6X
lHqMrMfwLqGvJXzi8s1tHvCCkF+fYx7wH9SvkDr/8KHG2z6C71XdgHVxv8uU
OgatXR7BWuURHCs+4RxlFSfAeOj/yomv3zvzqjmZyi5O6e4Qb5PZ6eKOVvzr
js4NNs7O0N/H4mqeu3XVW/NnZEtcPM+qMD47y8X/tAjxTln2EXxcWE/22ij+
oSSZqnfu737jvVDZxTP3Vzwevwu+RfXB6mgezuNE+Sm+FZ3hk0O1L7+Lx6d9
wvhkpOSD1Zm5OPivxQ92L/QKdSz1rrfx+a3tg1+G/WW/Kol/hms8+E3qN8T5
cvGQFv8GrjgQ6Y1f23omyD7JPNDnKMVVct5Nr3Y444Xb+eK7eoTzkux0foTZ
8iO0dXp7d+nt20UH5NiDQV7l2nX89d8jWcan02td2q7jHdlB+l3oc3E419a/
nvWcpvjtlS4v7F7FhzMePRZ7UXfJT/BWstcxj9XZE51biy/Bt5674NhPB1qe
UbmfSHk3/K6r82+/a3U1t3zS5fnem2Uf+8rwL1ceOqqo/rrcCt3LVuf/3Lrn
X15jnX0veD/VT+Z3fd4Tvwt+zIaZre9vutPWb3mdyo/me8Ff/NPRVYvO2mLz
c06fUd7BysguV5q8Ibv01U6/PSD9lr/RN57V/CucHlIkPYR5wGtp/cxjeb46
19AT/L+iG/ODbxKdmR+cfQE3OVYw7Iifjnk3287JgSslByyfB72uc+fHxr3+
BefX9K7Kt1Zo1vzKpTYefJPutavj/Me0n/QE1g+/jQh0yynPyPSolwL/2/eC
/4c8OM1vccvaR/iEdX2vuqbQExz/l+zwpp8cN73x6r7XfptskL2U/XpM9A90
nJaFr74p6//+VvYzyQfw+zT+2sg+VprU0fx8L/LnaZ13vhf8BvEz3wv+uviT
77J6+LJHwf9m91a9Yr7X6rOpvoTb3/yH2/o/MXHhKjvXyI2x0uehg90LZX8v
yXzm7osDinNgPPtVJjY7zrfx4I+N+rhqi4Ff2/rZl8flh2Ie8LLfTWdn2C/w
OwL/G53Zx2otvhr4TcuZ9l3gU9Vnp7vTS++UXsrvMj78PTnDPJyvbdPvrXn9
hWMyjGeeimV/j7Z1mr5x8YglZ2x8OQP9fX4948FXSR+GbmZ/UD1Mxht/Sj6w
7+Afax+llxo+/4JAH9YP3+7/lc2T2cbn4L1E57qu/iHnPT4vBWnZPD8vdOel
IH007LvR3+yf2vf4dwvT21RvAT5BzuyWnsz3gr8hfoY+8GcVyVvmZ383iG7M
b/so/Yd5LL5X8pZ5OEdNVM+knqv3dZb05Lqu/s8/hDOec1dx9tNDz3+o2Pgb
/Ltwj9v6weEfxls/OMkB9oXfXV22Ly9nkTPgN4n/wfneCuoL3N29K3tr3zkX
nOsekmPwOetqKb2Fe9nsPxrP/OAfSW5Df+i5WvwPHay+ls4L38u5+4Peg4wH
P9iu7DxmkcPgY8K5zvJdlp+o+yjWNwpS6uDF56sgvVv3GvoGfN5c42M9pDDt
IH2P+cG/0L7XdXUUn1UdxXquvv23OhfQH3yP5D/093X82Cf28XzqKTk7wF3a
d+Zx/S9sneCn6lzwXfAb+g/n19fLYt/53rM1jzt3KeeI8RaHo3mY39fhqRf3
wcwPED3hB+t/Lf0Nevo6MMzD+v/p5ADydmOQt0Yf6zuj/YrlTGGq+U2em11O
8dixHC5MP54V5Ab8z3cVlN2bxRnHP/l+8ocy3uTPr3/2X049BKPDaOld7Dvn
pZXqJHB+wRcH/TPDvoO/f/ftxz6TnZnlu8DTTrcduuPb2e7clSTvqG9a/C4o
SJ/UehgPP5wQ7n37Luhz8Fex98DyLN8Fn7eN6xLYvfAfd97Bh0qP9faB92Qf
YJ3mF9Y7Itb3SpLJTg+xeixOb+S7hqpPq3tXpv+TPun0c+x7idPP832VL8P6
2fct4ivWyfgZ4lvmYfxRWif0tzglvY+YHzpnJN98P/S34zy+1OEmV+GTKTvG
5Do8/GEW+oBPC7jpV+DtAl9lrA6U8HmBD43Pwb+THYnx7FeR9j3Wz0sS4vHq
ubwkyUn3zvrlHSo9J+afgvR8vd+hP/JB76Yk1usK0naiZz1nb9ypd1n8/i1M
U80f3++FaaJ72cmNQO+0OOvOV17nK+fkcz6DPVDfafFRsjOwj+zvNvEV9Eeu
yj5gcs/80Vp/XVenAjqzHusTLf3N8XP6vvRe5je5NyXEA7N++Lmz4njZL+bn
vRzve2FaSe9l1sn8NYSzHvhhjviH/WL+ZaKb03vzX2t/mcflm5v8sX678new
7+D3iQ/ruvi9wxW/x3qsTojeoeDsy9WKB+B3wRkf31+lSSp+i/Wc0qSv1hnb
eQrSlpo/plthulpyI34HFaSPiH/gW8YTR+feC/mR4b2QxOfd9DrTM61Oo+Kp
oJv1sQr2vZyz76UFsvvF6ylNpN/aOWKegXofsV8WtyD6sB7W21v2Sc4v48vU
/J8X2z1rcaeyB/4/OhfQuw==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[
        TagBox[{Polygon3DBox[CompressedData["
1:eJxMnXe4FMXz9ffenZ0Ns3kNoCIi5oCiomJEsohgwgRKEDCgopgFFVGMiAEV
zAlRTJjBDKggJhTFnLOiYsCc3vO5p7/P7/1jn67t6enp6ZnprnCqqt2w0Xsd
3ZxKpd6qplJplRcmqdSoplTqrHwqNa6SSh1RSKVuaaRSQ+qp1MrZVOr7Wip1
UiaV6qDGx6jdxvq/nf5/r/PXLKVSW6h+hs75N5dK6bTUF+rvdPVzqdo+W06l
BqiPIXEqNVrnvKa2m+l3nI4NUt080SdrMC+p3Fi/I1X/gPqforq91cdy1b0t
+jrVb5f1dX/RNYZqbK31/ye1Hat2F+j4PF1r67TpX9VmiI4P1u9M/e+sdjWd
+6LG3FrjbKXftvp/hs69Qsef07nr6F4uUd2qxVTqII1tS9HDdGyqjg3W3Lyu
m+uq+9xL46mpbK32/XV8hI5dpP6n6do/ct9qf5uu/6muNU5tbtcYBqjsoz47
qs/Ddf5eqttN/48QvbvKUSoHqq/jNHf3iu6p/ifrHkdonBep3F6/XXVOSWVb
XeNnXfM1jecrnbsnfejch3W8j3576P8RuvbNGs/Pavub+tpOdWmVUzS2gTr3
Cp27gY5dr3H+obFdpn4P17UuUdlRfXTQb7aOpXTOTup7gM4ZoXYD1M9KqttW
93u16p9Xf1foni7X7xz9n6+5K6lso/b36lcW3VZlIUql9tV45uv/sbrGGrrW
4Spf4pno96zqd1FdF/0O1rWLar+32j+j+vU1zr/Vx4Ea8wW63p6ir2X8mqv2
anMj49HvReaAdmrTSuU0tWmon2Fq86aOrSp6BO+T6Pd1zff0e1f03xrHk5rH
RbqnuWrzhupW5p3Q/XbXFHyv/s5Qmz81roEqB+r/aur/cfW/ne73ebW9X/+n
qr8r9TtX/0eqXSfRy/QcTtH4T1bdkzqvncZ8vuZwE413I/1Gqn68zt1I154o
eq7aPKsxnqU2I/T/pIq/iUdVP13XulD1HXTeGPW9ptodoWPXqf4+1fdS/Wjd
x5H6nav/ZdWvrTY3qP50Xfd+1fUWPUrHHxB9pn4b6LpF9bVQ41yg3zNqd7Pu
61zVradzx6v/w9R+mH7j1X5l9Xm+jq3EWDRXx+r4Z5qjkzXOker7Jp37is5r
q9/ROrae+lus84br2GDVva66VXgn9H+QyuN170eqv1H6DdX/czTH3fR7UnQf
vQs/iN6J71T3P0TX+UDP5DWd+5OOv6JzV9KxLN+3jl2s/9+r/EfnXafxXqL6
5fo/Xm0uE/2D6GtF36RxT9L/bdT3DWp3ucb3pvpcobol6mO8rjVUbT/UtV7X
/3VVv63KNXTek2r7pf6vKfop0V+Lfk3H1qE/lf3Uz1uinxDdX/Q7PHfRu2ke
HuU7Vd3TOvcJ0e/p2EDNfz+NKaVyLdXPVf0y1a+t+S3zXHTe2hrHVNVdqX4u
1O800eernK9jX+rU31gj1HYD3hsd20z1l6mfjrpWVf3kdGyu6gpq11n3vJJ+
2+q3qn4rdH6TrttL5z6kc2ep7fb6XSP6TpVbqf4q0VPU5hL1eZLodVR3segv
dO5VarOR/p+n+um63vkqJ2tsnXW9K9RmK9XluK7a/az226gs6feN6NNVnqD2
n4vuqTYX6//W+k3U+Z+q7kfVnar/k3TtMWp3ie5ltPpspz6P1zVj0eur/mP9
L4j+VOedozZDRK+uui56tofq/OGMQ/e6hX7Pqt+ixnaw6lqrzar67a0+jtC5
MzKe8yv1/5u0x8+8b6vvYqj+L9Y7vk3i92VLnbevntlbaj9A5QCN8S61OVDH
Oum6s1Tur99aaneQ+jhR/bfWuceqrr3q9lObp9T+RP1/X/X7q83RatND9Q+q
fqTqZ6rcT+WeOranxt5fv/3YH3WPd6u+m/o5THN0qH576vc+c636j9XP7Ym/
tcdFr9D7vJfue4neo33V5h/Vv6H6AzTu3TT+f3R/i1TuoevN43tX+7V0/Gx9
y/10rXnqcwBj1u8/HX9Tx5ap/dq65z/0fw/RkdqsJ7pJc3S0rvWtrrWT+h2u
Pl9V3SM6p6bj7VQOU/+7qM0CtTlJ9Caq665rnSK6g+j9Ra/Q+D9W+wX6vyV7
n67xl/rbR2PuJfpP0UeofW/184L62Uv1B+laL+laW6j9ANGLRM/T+B9WP7ey
Xuu8+zTmB/T/Gd3LqyofU31f0Q3ea/ifjPkTdZE6LmOeRJdKtVI/G4r+i7Ul
8jtfYY0IfMu3ol9Nm0fSUFr4mU1C/dTE9C26ziM6qa3q5mvMg/X/WtFHFb13
0Ocy/f848EisZTN1bEvRTRpbKu81rKP6m6zxbp42v3VN4M2+E/2U+t+Q70yD
uCX297ua/rcvmW5WH01qv7roD1T/hNq3V7mabnL9xH2yfh4duw37Uzc926zo
u9TuELXLwO/pvAvVppg2D/Se5gRm8ioVN+pYE/uOyvdVH3Hvqr9M97uj2v7H
OlZz/fSK3+WS6D10bFnkPh9hrS54D9xQ5aJm93md6kdqDLHo29kbRRdEzxL9
hc7Ni75PbbrWTd+t+rdij3m66r9Rm0T0g6I/j33u/aKn1Fx/n9rv2Oz+b1X9
nRXf+x0q7wnjfEz1j+l/O5Wtdf0Lwtr7lf6vo//vqd05Ov6s5nEz1Z2q8nzm
QvXnqdyuZp72TNF3aDzvslbzzET/x1oFj6R7/l11V2uuLo+95qpIXVdxm+56
93/JeQ0+N28+9k2+QXjP2GPYQsfuE/2R6C7w+WrzgegLVM6KTO+g+mfUz/rs
4SrnsJ6qvqv+H1A3PVntNxf9qehLRd/W5HvZSm1e0b38y1qk687RsdVVt6Hq
LonMm7G1PaT6lXjX1OaCyLwB8sfEyDyMukudp4brp72fZUW3Ef2x6HX1Tq6V
9l7wYuAr2BtGN7ke+eWq2POvTyV1QuCLPhG9NO15Y45O0LXWEH0YPEfs/g8X
fUaT+Ryu+7DG2VrlqrrXDXXddVX/q66byfjcj3gekdsX4Dci81e8+j/nvI8V
NYgHKl4DVtK7sETH24Uxv6xrVfXbR/SeGsMqqj9Y/w9RByunvU98WPC+9oGe
6UD2b3gM0Wdp7s6EHVffZ4uewLVED9Q4F6jNILVtUp97a6yrwc+oz1Yq/1Kf
E9X+fLVv8O7o+F76tdaxg3XuQpUH6dwD9Suzp+taWbX7iPdOi8shup91VP+j
/ndSn+dpnGvrfyu1uUR9/g5von1pH9YUeFa1X0/lCsbMvqj6osoJ+k1mTdN5
52g8PeGJ4DNFX8ycqz7W+Nvy3jIP+q2u3zD4AJ37t/p9Ru3ba053Uj9Pq/1C
nXu5+nlR9X1EZ0UvFD01b14jUrmW2m+H3KH2L+l+n1Kf96h+kp7xIXpmF6rs
pjEubvL+9KiO1VW2V7md5uR9ZBrRq6vtaoGPOUb3fCX7PDyGxnav5uVSXWe+
6G661rOsIaJ3UNvlqv9O9G8a/9Ma274a50rq71XR6+tYb7VfwJqtcZymedxA
5RK16aTxPw3/KXob0W2QP2K/J6/o/xa65kTRa8FH5s0Hbc/+oPo686M2B4qu
id6nyfxONW1e53u+JR1/VOWwZrcfoPrBoc08Hfs19rnzRe9VMJ/7gvoflViu
HCp6ad688HMqD9K5FdXPVft9I9N7NVkuaSV6ODyW6lcVPVj0b5Hf/1fV/sqC
eaXJut8fNKZ3Vfekyr9it1+i/39H7uctvveCZeUTNRYWmNVU/z7rbNr8z4Y6
1lNz+WuTefdeJfPV+8CPZ8yHw6PvqvO/Ufmixv9O3vzLdrxPaveV6EWi9xS9
luhOot/VuY81m6ffo2D+fa7qb2o2r3KIxvC12nyFbkT/dytaRthbbXuzhqhu
OPu76MNYl/R/A93X/GbzVfvzDYt+GzlGbdbRsb/5FkQfqvafsVZF5sfg4Y5N
Ww5qr9+YtOUX5JDF6me5ypd4RqJ/EP2y6Ad07oc6d2eN4V7V3wvPrvq7NM/3
iP6X/UvztmbG9zaP+0f+1TwtqVhWfkVzuazZ9GAd21rv8HXwujr+dbPl7INY
6yqmX1b7P9TmZ/UxV+98RWP4Uu2WIDfpOksy5sO+abZcfrDO3V7tr9f/A9hD
Nc6Fqj+X9VV1zzH3arOz5nYB8qLqX6n43MUl6xJo309tnqtY3zClat0D7XdX
/fNq10vlDH1Tv1T97T+vb3SjqvUQz8An69zXkBn1/T2nMd/a7P9sVswb+zrf
/X2id0TG1Dh24psqeG+Fl56lY3dobrvCO7H2a2x38syZ57rrlqr/BTl/7+NU
3gC/K3oT3V9bPYtX1GZf/R+b9dpCn9M1vnXV9maVv6m+nX6rq+/+NesuflKf
L5V8r8eK3ln1d8Pzi+6oe7xW97Kf7m/3mvn9L1iP9Xw+U/0pBfMJvA9vqn5u
bL56rv7fpft6WG1miH5V13slrJvnZ62reVr0JNVdmLEcOjRrme5s0V8FmRMd
B/v1NZHb3KXrTVd5re77StWd3mT59vLE9AWqv1T1pzRZ9pxVs97u26rlevQq
K+s+30mbB5ig/7cXrPMbgz5S7Y5H36Z7OhYdVWSdyTrq/2XVD0MPgV4na14A
HgVepZXK1wP/cGKTeRlkVfiZqwIPQPta0TqSSRrnC0GPxbv3u57vbfrfSeN9
RmN4EB2IxnCRrvNFs3VGi3PmBS5gPa6YP1ik59YBvViT9U6PRpahFvGOVvz+
Izd1K7nuPl13nuZzTuT5X1ixzuwr+IWM5Xbm7mVdY29d63yVM3XvB/JM2fc1
nglqN1ZtxqqfU/W7VOM7Vf08xH6u8kFdoxvykK55ltq+mXZ7+MwZsZ/fKI35
Rh1/T9/4k+r3BdU9gI5Cxx+P/P/cwPuha94tbT4SHnK2rnM7a5vo5epnX3QE
mrczYO50bFPmXf/7q75J5aca0y+q+0f3eJra/Ct6E/0+QC+q8m/4AtF5nZtn
3dLvR9X/hQ6p4r1yK9Fvi/5E9O/oMEUnap+gc252+3b6LdF4PlD5i9p8Xbbu
im+KNewadKHMNTpW1k/Vb6/3YaTG9Jzm4Bv9X1X1x5W9Zt7AXsiepDlvm/G+
8nvVfRxFn2XrHUer/KHZ97K2fj82+35Z58dnzZPDp/+h6/QJ89hNz7WrfuN0
fDM9h12RazSGO0RvxjNnb1Vd97R16c+F9Yp161udMydj/fjfacsFrDNL4QNV
/qrxnJtYjjhRfW5V9D5yvOhMxfvmlmrzZ9n77QSVf5S9F52p8sawbrJmvqnr
Ha9ymsqs3odBYW1hH1gtYzn8F9X11O9m0WtpbK0z5sn+CeO/nzlv9jrGfG2c
t37jPPV5q+7zWfRIGuMTvHv6PaE2u+pYb+Qb9IIV132iscUaQ/8whrt1zpk6
fqfKvhnzivsj45S9Jm+q8rKKdZOfip4PL9Hkb2NTvSePcY8qH1Ufu6vPx/V/
F2RHlVvznhdMn65xdNQ4j9O9ba6yC9+V6J1V3qPxdNE5M1lTKtZVvKtrLaz5
G1kLXbWu+4R+D+r//ZHnina8p62brCc9QNfYX7+l6veiinV776mfbzVnN+vX
hjnPmWe5WOVrVfMnp6L7jM1rjVO77/Wbrl9bHftO5S36rcm7UXXdaWr/as58
+uScdTjw7SerfDDye8i1E7U/Suf211gu1m8241WbmXnLmg9pbl7XWJt1zlS1
e7zg+7tV792ExDzedap7SdfonzI/8LDG+ZB+j7AmFv0tPIiOoeTv4zZ0SWnT
XIO16lb9mvX/xCADToZ3yVoXeXyT5cfzNYajRF+hNmdnrD9FZvxD9Rc1Wzdy
VNCxn5ixLPpZkMORNZEZbytaR7pZwXJru7DujVX7UzLWZ36ium31u4h3PrJd
4FDRmybWtW6uc9cpWnd9Wd56oY5p667RO22q34VNlm2fS9s28Fna+iJ03+iF
rs5YJ3tJ3rrw/1gjYuuH2WfH6Lncqfa/Vyx/s6chCw/We7ZC7T7We/e6+t9A
7bdmjVM/W8B/Ih8yb2nLkn9mLEvW9Ttf552n3+2ir1Cb8WnLpN/pnM3VRw/0
5ejZ+Bbg/9mD0pYf10DXpN8Z7AXYSET/qvb7aU5WEb1MdEZ9R7Fln910P1Xe
dfV3MHYg9bm72lyQthzaSf+X6/+avMvoPLmu6M6q31DnDdT/zfX/Dv22V91k
XXcr3e/ZQc5FJ3Nu2jJwb43zDXRq6HdK1mMvQBeXsW4QfuYM3jGVU/Qrqv8d
dU4rZBEd31G/W1R/lc65llLjuTlvnvAm6MTf/Y3Yg9T/X8j4jFn3tbHqdxS9
c9qy5586VtYzOwHdg9r+pPrO+t2gdtvremvo97eOLVOfsepW0bkPlfyt3I58
oeMPxP4O0TGha8ozFuZXdSvnvUdP07Ui/X+x6PXsDtWfwlqVNU/5GWNVuYPK
z1T3qX4FzcfvGesl0F/cqnfoe3hHvWsXFW0D/VjjWqNknXxe5TVF25iuUnmX
1oVR6m+BeIlZ8ECoFuFnEtutdkX2SqwLPzJv/SB6wtNFb1CwXWt9lWN1vSd0
Dxl4QP1mif5Tc7YmfA/7OHaGxHank0XP0TVOUnmDrnuy2j+i9s0qT0hsp22D
3Kkxzk3bZj0/bfkW2TabtX1trH4n6ZyHdew/9N7ID+ht6DvooCY1WweKLnRv
lRurz691rJ/qN9ZcTFP9KXp3vlfbbcJ+PUPHewT6x7Tt3NeLXkPf6QY65wWN
eXzFvNSh6BU1xzMztt3wPmCr3ShlnfDNsetvjbz+8C6eVfG78yJ7fcXv6eKy
dSc3hr17emJ6rMZ2e8b8LfaR+wreq6/X8e3DO9hO7Weq/x30/yb9n1hx+bL6
vFP1X4Rv4X508hmff2vGPCf2lwnYEdTvibqvmQWPf5rm6rzIunRsoi+nretj
rb6+YHvj2WpzUdDLscauVfN6PknP5FJkRtW30TjTutYFYb2t6NgY0XsiIwS9
93ms85q31fS7R23XrXmtX1vlfshlze5/SsY2LWzf76atw8f+O1xtpmVsF7u1
YLzDZF135ar3ggd1rX2zto2yf2BLpYTlvSixXfUc3cvViTEXR2rOF2tsL8e2
x6+LHVTnHgZPUfAecg12P9VvoOu+Jbqt2q6p37Zqt5P6n5I2DqCb6CtF7wB/
rHN76dxBvIc6rzv9aAzr8Y6oTRe1+VTt71TZU8fmqP+uomN0KWqzi+ge3Lvm
tofoHNgRPeOR6u9BPbt7WRPUrjdrtfq5CZ5V9Iei+1Knc/upz94qD9I51+vc
Q1Q+q3O7aI4a6u9j0U9p3odrfKuobFUyPiGLjUlt7kQ/JPrmyHYT9sctNV//
wjvq2i+pz9/Qc+tbuT6yrYQ9sVXVe+ij6uNatbshMnbkOs3dxfAI6uODtO07
7LMfqXy92f2zDoMbWRc9nfpfW2V77Fc177mbqtylaJ7sadYZtX+j2fvyl2nL
g5eLnh55XwArswCeGZ23yo2LtguM0f1fHxtjw7lrFd32Uuao5n0GvvTokr+p
LTX256uW00eCbcm7z/ZF27uxEfwIz1f1eNYpu1/o5UH/g20aG977Jet4XlM/
X4keJXqorjlK/8eK3lznvleyzmZn9fduybqf7arWC2IrZ3/6XPWHqvxE8/+Z
6JGiu2G/Uz+nit5M/Xyj+iNFD1f/K0SfKPo7tV8m+ijR80QfpfZnid5G7X8q
WY44TO2PVP040R2ZB/TjorcVPVr0RNGdy94jGcuRan8MOmjGiQ0FGyQ6LvXf
Xvf+eLOvt37WOkOOdS94Dxpb8v4ONok5PTXyfGIP7lHzXjlAfT9fNG+6SOVt
BbffQmX/xHqtu1Q+VvR70CmxbYg9fR/Gpf9vMQa1Xy9r/SFzcYfaXwU/ApYj
MpYCvdtbanNw2rLo+1nbp7CnvYecjO2Wbwc+OfL5bfROX91seWlibLwLctQC
0U9G7ueMgJlhrFfpOdX1f0uVTxfNmz8DriRrXSjPbLn+Z8CJqVytZtv1ZzXr
kNn3h8LPZ61Pxjb/l+6zrPs8T2M7KOir0UOvproRKr8uWo/N3n0IMnPNNvze
yG1Z28Jpt5P63z52m4Fqf2/a16qon0PhJTVX7XLGVr2kcR6q59eApym4fKnZ
WKzu6qNb7HFj7D1S5aMqp9V8bkbvydPgJtI+NiWxDmRjlf9WzBs8ovZ7R7YR
Yh98s2ac2I46PjW2bgue+x2NYZCOd4Kv0O9Ynr/mYYuAGXhSx8bUTf+rthcH
WQw+o8zzzZoHukT1/0TmOX4AFyF6nPqaLbo174Pu8RTVvZ22Pmey2l8UG1s2
WnOyqq7TrmibH7a/m3TubgWvZ1uLPilnfcz1Wj/6qH4VdJKqf1pr2xzed/1/
VeN8RPSLGucdievP0nnHgK/jGwz2FtogRx+nuTiMNZ/vNbLtg/fpptj8BHiL
adjO4BtVXq3fysgUKgdrrjbXOQerfDG2TMKxbzWGtXTuu6q/JmcbWS/sK4GH
rzTbTjaB+0KvorGOEf0l/av9+JTlkTF6Xl+qn4NUDlJfHXT+QJWXab6/y1gP
f27B+igM/58F+h7d42uR5Y2G/n+St+zygY5fVXFdrWK7HWPrpDEsCTIF9zla
12uHvl3XmgEeU3Vp9FXoB9Q+0vG9i76PL9X331XbAd4oWV7/vMk2hVl1Y5TW
aljGx7YwMsjkw1Qu0XheK1kHiGz+bN4Yp01V9qxaxj9I111StS3jNzCPYPlU
f13OaxHzjB3o47r1AIPYe9V+VdEriV6m+p+xVWjMUysec6ViHQJ2lsN0vX90
fEaz7ZK0ZZ9gXZ5Scf3givUM2F/YM/6r+l7e1NifKloHfaPmfEDVtpN9VC7X
sWPZX3TuC6pbN3JfR6l+CTye7v1tnfu+3pu3VL6XNcbgLh27uWocS18wMAXr
RnZAF1GybpZ5uL5q7FdXlY/XbJfpL/qGqnFgPVS+VXN/b9eMf0CeHFaxPubG
ZutkXqoZ+3Wd2i8sWB/YuWCMAfzVIdhQ9H+m6J0LloNva/b7dDa2oGbL1PfX
beurNszf0f5ytRmh/ttkjOs9S+2rwW4xQeXhaT9jcDns7feqj/0Tv2/vqq9X
Isvg/P8wb7l8J42hWWM6TfQWyDF161r/A09UtS1qT5WfFlx/t/obpjGsgY5Y
9TdWjWnrrbJa8/10QedW8T2hg125ZrzqUvb9irGsO7CHFvyO7ajye435GLVf
qusfLHoT3fMpeo7fiR6t+tdVf1/dtrtKw3qFTLPvIaq4RD/5Ws7fyiUqt9AY
X2z2eoSch+1zXsrv7R/Mc9Vr0Z+iZ1b9Lf8l+o6q1yWexcvgoBu230ytW3Zq
kb/BhZVtJ+paM7bzUl1v37qxyvDtc2vGSMN3wYvxHS3VXN2l8u2Sv5dD1P4K
3j+N7ye1rVat53kKeUXXPVT3O1tt3ir5ewF00KZq7NqaYT1ZrD5vY69R+7X1
fOpVf0t8U+C+WEdYT8BW3V62jIysjK4QvR32aOxqLfY15CNsEBrz2TWvG21Z
y6r+fn9W/S2i+yDjgBVQebCuO1/zc3ndtsKVsPtUbeNrxRqtco+GMco/YNMv
mT/pVbOdDvvXr2rzasnf0ZVV7zfsKZdVbV/EzggGD9skdknwZl0btl/+XPY+
yn56SbDxoWPco2Y7H/YacGJdGrZzfKv2t1aMTQKjdG3F+BZwLnuqzWe6lxt1
L9PL1puhP7tW9AzRl6vNMLV5Gx6rbixWJ9W3VZvdypbl56nuvYrxi++rHNIw
/ubKunEjyIbIiEMbxgCdXTHWCL3f4xVjVNDTza4YS4b8ghxzBLhb1i1sTLrW
papfLnpQ2fptsM2D+W7RG6r94Wq/oe53pq77ecW28y9U9g0yP7iJ88vGbIDd
+KZivMEQ1U/GvoLuUudeLHqq6OGqvwnskehfKsYCoRNrrTbDG8Z+3Yw+u+zv
Df3Kcao/TmN4Qm2OF32C6CdF7xHWFtaYXNV6lrzK2WXzhOh14qr1MJ9qbHeo
/n7Rf2O3FP2A6H9EX1I2Jh9s/t5hv2Df6Ff1Gs5avktY21njd9CvNTywym30
W1n01diO9dtI9P4qD9BvE9EHquwV1jfWuXEa/z76vnYV3T3sC+wPu4X9hX3m
+Ir5zd2ZG/22FH2BxrBuxTrJiugXssZnnw0PpPG/rM/6CM3JcZFx4efAb2Wt
o0D/DIYaZ47FKfsRHBV43TUS049jY9S55bSxqb9VXH6ia52pNfQA0Q/lrF+f
2GwcxZ0188YnVqwnQS/9oeqfBC/E+wymW2N4tdk67qrop9PGrN9UtO5kYz3v
57PGjk+Ah8ta98KYj1Ddf5HbL9O1jgA7pHJO0bbeyxJjaAcGfvjRrPEkg/T/
NLXZXMfGFc3Pbp6xT8LXuofH1faBnDEsB4f1nLYviN5Xv4/Vz0dZ8+h7q91e
4Mt1/Kyi1//VwPvUfe5/WhuqicfwMJgUjW8f9mXNyerwUdyT2v9R8bge1PPN
JsbBtFJ959j0XGTUjGUBZEgwvcz5E8ix6ndr/X5W26ElP6OpBWMgeYe5xq8V
Y4A/BGeka7wD5kDlKTrn5Nh2gpMj2zKwTaR0f0dnrJ9cmLUfyym8W+p/45Rx
SOh+3kUHpP8H6vhfkdt/WfN8fqP+V9e9nKq6dTWekWozQr8zmi1znN5sPefp
Ve+hJ2iM+zSsJz2x6rljDh8QPaHueb5YZT+1+Vj09aL7i/4EvIPoG/gO0RGJ
jst+n6+u2Xb/vMY6TuV+DeOu+tYtjyGXTa0Zz1DTmB4RfYL6OC62TWdq0far
9TT+BZqHfWNjrY9V22Mi30tT1dfimhF8rMZ/YcP7K/tsjXUytjzFO/xy1vpb
7CxPJR5be+5Z/S0Ket0bitYrbgqmKbZvw0n6f3hkLNNxotcpGMN1sdo20O+p
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
L9r+gr1upq61P/J2xvz5gaJ3z5iHxwf/N/acovUd6D2OULlf0diO/YvGG4OX
BQv/ftFrNj5xyJfLwj2+U3M+uhvrtumD1/pM5Wuq36LZ+Z2R7TLqZ3nR+dqx
zWer9q9Hj3Zg0f4U6OYOFn18zTzUrIYxCdj+Btetw0KXdVPdeSpfTBmPTJwT
8DhflSwjvoPeUOUzxFzLWDdCfiV0He1V90TFeQ6erDiXE5gtfOPI9fljs+1Z
5JnCPo6dvHPVeaBurzsvKjrZzdR+zbx99/DhQ87+Ldj1Wvwv0s6tRzBRYrKv
WXIuHnwAZybOdUsehQVhPyIm8diGY+oSX5e4xshzbYkpl1i+Jw8HOdjJj0OO
m1LVuVfAd16qfg7P2+8M/zPyFGDLm504NwE2yjmJY9turj4HV53Pnrz2+1Wd
L6Mu+qqq7b9g0sh3MbzqHMQ/VBy/nXjsxGUfot9E1S+rOB8r/lpDi85lQ/4a
YltPZi7S9rkkr+uF+n9Iw/lkydNGTPWWPMJp54IjPybxiIkRQQ5N4q0Tq5bc
nfibEaeXfMTnif6u4pzUYDjw4yQH2RGiXypYh3Fc2rZF8h3jg0SOOPQcJ6Rt
GyUH6FHgnCrOj3yS6I8rzuGL/yo2XHJG4+OKbw552YaK3rbq3LLkmSU25eUF
61XxqUKe/hkcS8E5Z8nfSixKcs6SS28Cts2C89+Q7/17eDHRh4r+RXR70Rsk
zuVELhDwENey12I3V/0POWPHZ8NLFOwPi1/szznHRCgXrUPCZwrfKWwfxAIl
Jig5F7C/n1R13pAvwaSq/YtFyyfEgFmcs7w2O295nZxrMwJ+4yHV7axnd07O
ucdYn7crBluLrrVIv5ebrC9aUvdz6Bb0QMTg3B9dTMEYQfJfnRvmhzy3L+ad
s5N1efeCMXbsU0vhJcDTqHwt55yFKxLnKx+ecp5DclkSjxJ9BXogdHrEoTkr
51xZ7PvP6xqVjPWr49X+LdVfKXqfgv06BqjPvQv29+Bbu1Tnft7ktZSc6Yek
nCNxas52Xp7jrLpz5ZHjcUDB/ns892V55zqclTg3IbZB/NfIOYKd/cHE+c7Y
Z7sUnB8NO8XionMKg0ckviv5bckJRGzYgwrOK8yajN8f3xr5igcVnGOYPQK9
15qil+eda/WHZtvcybcF77dq1TliiIl8dMk5uYglMSVx/hd45jWqtguT34m8
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
           "]], Polygon3DBox[CompressedData["
1:eJwtnQOUbMkSRauqWdbYxhvbtm3btm3btm175o1tW39s/b3fqbW6VmfexM2r
zMiIEycm3niHlbcvFQqFc8qFQj//z68VCpsNFgr7cfAs0pdw/Bryew8VCnPU
C4VHOXYT+Rv5PUJ6+UahcOtAoTAd6cu7hcKfrUJhCfKPUf5Mu1C4oFIo7Fos
FA7gWIM6T/O7i7I7PcdwofAXvy8578mUj0XZ0vRxDseqnP+0ZqGwEPkrqoXC
ctR5lvM/SHpv+juY+i3qz8/5xmHgY3FsV8byG20Pp6zC72HqPtrOWBek/WO0
f4g2N5Bfwf6o+wDlx5in/QWNjG92yu7m2LO19Pc5+SPor0O+ym9v0i8wvs24
ttHIH0zbozk2OumdOXYx+VvIT0N+PsY3NuO7n/s4PtfyRDvXPht9vsT5TqL8
Rsqv935SNgZtjqftORz7k3M/zj1Ysq9Q+Jff29S/u1MobEV5H/XOp7/H+X8r
bWehv1s497PUX4+6j3LsafobSfkdpGel/EnShzOOPWl/LP0fx/35mXPsRX4f
fjXKz2A891H2CG1G0v5ezrkfZXXKLuJ8f1P/W/rag2Nljj1A+ZGku6Qv7qYP
+5qEMfxE3R+45zXu1b7kv2RsQ9TfhvJ+6l1A/YU4x/uU78LYr7B9M/Wn4R4e
2sg1eC3PUf9ByufjtwB9HsL7uDb34jOuYTb6+44x/cv5DqXsc8qmJ30I6Xmp
fxv/lyA/QPpG/m9G/Wnp83PSW3I/VuZca3LN29PXKZxnLco24tgn5E+m/Af6
vpg2k1F2GG0eovwTxvgM6TW4XyNo+yb1GvS/EvkpyP9D+/8Y/xP0cSrpi7wn
tP+C/Jy+67Q9k3EtQJvnSD9DnW+p/yXlc1M+N9dQp3wM+p2T88/Hsa8pW8r7
Qfowyj+i/ufkB0h/S9+n09fr1JmS8sXob23avs94JiP/quOgfFXyUzG+/ygv
cK8vos5VXM+15C92DqDPmah/nO8C9U/n/wZ+/1zvuPQxsprxzEudr0gvyfkf
IX0oY/iQtivT/5T0vzd1ViS9Jr9pyO9LfnXSd3DOKfvyzvju/I/nfhRlL3KO
FzjXWYzhRsouoM1Z9H8mxzaibF/OfwbpbZwLKFuG/H+0bdYyF6zN+Sfkfv1H
+YyUvUqblylbm3NOR/1DOcdapK+nzTyk76DNDM5v3PuTyL9G/VfM89uF9G78
LiO9K/Vv5d48QP1ZyV/F9W7Smx9341qmrWX+u8L5w/vH7yf6u45jIyibnt9t
pBfmmuuUTUf7s8mf7/zE9a/g8/Fbp/0G9PcS17AR7d8l/7P3h9+zpFfx+6Vs
avq7hrZX8ZuSdJk+f6fsAvITkl+f/makv9EYX4f+1qB8Edq/wpiPo32FYxXK
RnDsEPqeuJZ381aO7cC9eJH8y9Q9m/u5DPXHo/4klB3J+L8hPcw78Qf1vuCc
T3Culcu5d0tSf8x6rslrm8B76XrA/VuI9m9T51WOrUOb6Rlfh2Nt+hufY+dS
/xXyW1H3P/q+kPzxjO9E303yb9J2ao59TPpojh1G+kz6OLWaNcT5dBfO/wTp
W+njjmLmROfG66jzLHX3Z/wfU3Y9+efIH0j+E/LnMIe8Sv4Gjh/BeJv0fxP5
eznHLN4bvyeu9XqOXVLN/RqTfKP3PVt+HWV3MP49Of9p9Nek7EmOH09/91qH
sZxG+Vwce4hrnoNzX0GbE7kXT/KrU/9w7t1x1L+bMc3v+0n55dS/h/YX0n4M
js1K/hLq/0Rfb7jOUf9h+pvbZ8Pvae79/Rz/l7Zjk/+e9H602ZH8TvwOIH2f
8zT9jeN6SH67Ssa2D+WHkz+Q/vcmfRjpg+j/HvI/e33kjyY/OfW3J/9QX+aD
2yj/lvytpI+kfFfPQd8/cux20ptTvgjpeTnHVYx1d9qfQXo/jh1B+QOM50rG
M7nvsPNJJd+WY97f50v7HUh/T70D6H8pyg+kfGeOHUT5nZT/QPo20kdRfgD5
Zym/m2s/kPx51D+c/K7UOZg6RX5Lk/+c/C3O9zyvMvf/IdLHUv8y/t9C2Wpc
3720fZ78OL57/JZgDCfT77ikJ+Z9e4X0PLS50PeUd+4P+jqEY4sXsoZeTduN
+M1CemLO+T39fdfK3Lkn7V/leW1Lfpn+jOlG7s/19LUG7ceizrPKL8pAjGVX
6r9M/Ud4T6ag/Mpi5IdtWlm/tqDdzozlWGUa+vuC/l4gfTblo5Nflr4Oo3xD
8rOTP5k+vnK+4ZrG5v7/N5T5YTPqzet46HND+nzL9Yz0XKRPov0jtJnftZ3f
c5x/Aq55B9ruyO958htTfz7qn8y1bkr9+8n/Sn930u8xPVnuzv6soa6lE/rc
GGuJ672f9KTWI9/v+kD6TdoXfd85/4ndzPc0Kwz35L9NKV+A/hbknCdw/vk4
9gJl81LpRq7nRco7lE1C+xNoP8y4SpR9wPnfpu5TnKNN/Tv5zUh+E+rPT39z
c84ruNbpmkn/RrsVaT8X5WO63tPnC5T9Ukn5exy7mb7G4vci49uc/F5+M/wO
9/uj/+FaZEply3tp/wzpQxjXR4XUOYa6c3HsOeouwO9/5J9kvbiH+nNQ55VG
+lNeP4L6x5JelvFMQvpb+ltfWZH8ROS/Jr8e+cXIT0D+S/Lrkp+La5iUc0xG
H4/T3yr0MWGv/ipcy0c8zy0oO5LjB1P3Eo613RdQ5wyfVTlz7wHUP4b0otSZ
tpz16WXu91NUvp/xlj2f4+X8zzHgB5THqLuac2hvvKvS93YcP5n8Sf6cM/2R
npH36zLKn3D9pL/bByO/7kD/f3BvViN9Cv1NxzlOoa/LfB6kp6H9iZzvVPo4
hfTUHBvB2M6mfE7aLsx4xqPsc/LrcD+maGTuOc09CvmH29nv/MuxlSj7cTiy
sjK/sr9yqPLo0s5x9P8U+TNLkbFH9uTn5+nrTu7JoYxve9cE2r/O9Yzw/eaa
tnA/QH7satbvK8lfRJuzST/SyNrnGjgDY7mdPk+k75tLmQ/vIH+S724h8/tt
5E8gfxPl5ymLuH9wf6ZM7fvkfEn/m3G+J0jvzLENyD9D+Ubkd3eOUl6g/Czy
O5Bfh/w95EcjfRO/d5TFyP9eiTzhXPEvv2N53ifxO5OxTMV4TyZ9I/XfcG3r
y3y3OL8tSzmn43mQazqX8R3NNe7D/R6b6x2d9nuS34v8+dS5mrpL0P4mx8f5
1qNsM47tSdn+5DcjvzH5PZQPq5EV7XM37scizlHUec/5kXd5b45d7vfKGB4j
vTu/SQq55+dVM3c7l7qGX+zcxP07lb74G/U+TuI8RtndjKfbO99ElF3mOavZ
D13UHxlGWcb1b0PyT3O+Wymbj/YHkd+S9iNJH9HK97Zy7/s6xzWd/FyUX035
trRh2KP6PJuyu3ynGMzJ9DcD+X0on7EQGeVS8ldSvtdg3vnpyD/NPVyTvu6h
/DTOdTPl9yhP8rz25vncxPUeS/oYfouQX4zf8aTfY/yLOB86T5Lfij6eqeQb
9Vs9kWNLUPcKyheivwPIz+f+it/+pJeifpuys+rZ27hncu80C/mrab87dWYl
PSkXtwfp2Uk/y/V/yvvwp7I/9e9lvB8whq/JX03+fdOt7O8qpIeovxntR6P/
Oygv+m2Tv4z691P+IuWf0d9f5F+i/CHazsV59uF8d9HHTO7HuT8rc68W5rpW
cb9E/a+ofw3156fsZvpe3v0jvy/cK3INyykL8xubvtbifP8biox5AvWvq2Ru
2Y5j01H+Cef4zv0U/X2kTqSSd3styiegfHx+q5Fe3D0Nfd/JOVYhPzO/b3z2
1L+zkHOOa/1ynpU6i4fpb2GOHU3+aa5njlrWi5WofxzHFqXsZtpfyvl2Ij8D
+ccon7mQNXr6etbrS4rR9zyjfMo7cyj34yB+97j3rEdXsh/153G/0cnz9Tm/
QP0tyY/DOAdpXyP/D/fgFp79H+6JuZd/ew/Jf6fM6NzPsWcoG53+z25mTXZt
bvA7gfQd/JYlvQTnWJ4+n3eOpf4pzq/ee9psVcqe9BL62oXzz0H9G2j3Pue/
jv8fqU/h2PWk36H9h+QXK2V9v4lj81PW4nci6UHuz/n0vbz7BvKb0l+H9FUc
+4v8xp2MbTXyr5L/k/Pf0BcZV1n3P/K3K/84J5D/hzorUf8u/n/IeH7knBWu
ZXWO3e09Y8wvMJ5JGc+5tD1YncFw9Bcj+b8i7/A6/L/P66D9Vpx/PPIV1+9G
9lofU/cTfgdS52P6+53+nmB8g+61qV+n7njeO9rvQ533qHs951uUaz2Z8axK
/Q2L0bncW8/51uV3P+nT+HV739NN/H+7mnuxoXJkPXty9+Yj6O+7StrY9jGe
x2zqZMhvRX4j8ms6tzCmo7g3u5K/m/EvW8/ec/pS9pPuyd2bH6e+hnPdzviX
ZbzjKDsw/puVKYYiA81N3RrlJe73iZz7Scrn5f+blG/BsadcH2j3BvlD6fN6
6s/Bsde9V84h5A9ibK+SX5P/T3nvuX/v0vfbrg88jz3q+Vbfps5e9eTfUp9C
+w/9dprJ78nx1zh/mevbgmt5ShlU3R7j29hvlfyd1N2Bei8NRWZRdtnVdkMZ
wy6muSfXFaNLfa6b+urmXqZ8J/fblI9NfifGeqmyGsc2pOwg2lzJta3G+N9g
/MtT5znKRqtkLA9QZzO/V58H6TOoPyXpmerZO6jTdH+8pvo22n9C+d+Mf9Fa
5v7NXO8oX4vyD1zLXJ8Zy1ydfI9+ly+rP6L8NcpHo3x7yv+qZO68gnOs6nyj
TpOyidRNUH+iTtZX11n3SiXqX0TdC/mtTP3DqPewcz/5TeqZs5y7SsWsJ+tw
vo/UJ5Dfl76XJ/+U+zXyy5FemvpnUL+PMS6srozzner3yXle4nxrU+dD6n+m
Po7rfdnrH8wcMBXP62xlUJ7no/SxJX2N28n6/jD3Yn3ar0++j/Tqfk/Uf6qR
++t9fpryNSn/kvzXtPlfK/oLdZGbc2wK6pS60b8oK71JegnO/7Brrc9D3Shj
/ov0ttSflvzClN83EB3AG43oR9VF3GIfnP9Y5aGh6Ljb6vzKeV/W59gk9byP
U3P9F3NdI73flP9YyDs0ae9825Demt8I8nsx3qkKOTaNa0snst0I+j+K9Jjq
PDn3JhybjPIt1dcpj5GfnPzi9cgGn1N/2Z7+7APfTY5t417V75b0hoPR363N
sRuUJdSfkX+fOWAz0vdzbFPKTqhFFnhMGYT8jox3Lc73EPnN6xmDY/mZOgPu
Reh/a9o/7JxA2Szu6cm/SH578ltUIju9QH478sfw+2coc9w1XPuS5E9VnmX8
a3HuedvRp+1Eu43UNzhHDhVGCYTrUD6NOnb3u+QvIj8P9W8aiEz2DM9rQfdr
5P8jvzL571vR3X6j7Eh/iymfMZ4b1GFwf38nf436G3Uo1P2E891fyh5lIfKf
kn+glD3couS3Jf885z/B/Wkt1+i1ugc6hfvxmTaSUvaAS1D/T/VVlI/HeH7V
PuF8PBQdjPabZxnjhcXokJYlPSu/A/yeKd/QtZzr2Vd9J3VmI70m1zA951nV
/aiyHceeLkTnco1zK8fus29lYs6/ljpxrn189UvON/R/KvWvcr9C/xdSdnop
OiB1QWtrY6D/86izMeU/0+e4Q9mjz0V61Wbq78h51uhGBlEW8X340XJtAtT/
yu+R/Jf8hsjvQ5uvOH+N84+kbJ9q9EmrU/+LobzjI9rZj7xYyj1e2m+BMY03
lD3kX6Qfovwb5+tS9i8HMY5PKT+qZ/8pkJ/Q9Z/kMbxfY1D/eequzrHR6e/x
dtYG14gXKVuPMaynjoD6O9LfZvz2dW2izd7qXhvRjX7gflHdQyO2pzVoPwb9
jUF/m/p+0eebpK/iXtyt7p/6D6jv5NgelO3BsW9ovw7n29F9Y6//RXyWA5lD
nUvvov5h1D9XmYv6O/JbpT86NnVtTcpnoOx32p1LX7e2s9Yuyfifp3xZjm1c
yzOeQF1RN3os9Vm3Ufcz7QGk3+LYadqvOOeTxcgwG3Ntn/B7oJg2tv2H/+tR
f/2ByAvXqu/nfGeVsr7v1Iht8HHafEn6Dq5tOmUT52TS25cjK03PsXfV9TCG
CWj7PmXn9ewl51C+LuV/k76X8iPofy9lRMa6LnWW5vi65N9irNdwz5em7q8c
O4uytzl2Tyk6tjlaeeY++6Wo8wt1Zm7HdrQF43mS8f3CPbmiL3uEdy3zGkgf
Wcp88gv9PUH6T9rsSPkP9LEY6cUHom94rpr+FyX/PelVmpnvruBZV7SnqYuh
rEif66mbYDwrkJ+c+/M66WsZ/3Lkf6ft2dQ/VNmb/hbWhuZen/PfW4rNcl6u
Z9JyzvUC7e/2O6P8cZ8/x7ZjfKt0Ip8qp2ob+EobgLpOyjdpZ4/lXutadXjk
b6F80Z4MrCx8O+f4X390hOoKXYNdi9cpRh/xN21GuHbR326kl+Ie3uL+SH06
174/51+GfjZQH075JPx2H4jNUttljfxqpF/ifrxIejnGsyn35TT6mKgZmUPZ
Y0P6O5zjq1E+PvfhcZ7RXo6NOseTbirDN7MmuTbtQP0TqT/gnta1hf5OdT1h
PPcNZU27gPOV6OOuvujQ1aWvTv+TqYehvNnKmufatwbX+566E/p8V1mG8oWU
dZXPBjMfvu7espH7dyvtPqCvS0kv4H6KOh/wfxPtD8px1H+TOrcy5ok5/0vq
BGhbUT9eiMxTJb1YI/diSvITU3fyRnSDvlO3tLOmurY+43xKv89y7EnOtUEh
83ufNmn3i9R7vZs12rVaGbmpfqIcW7f2V+2wLeofprzFeGqt2IS0DZ1LnT+4
3gHtz+qauF8Pkv6Q8/1M+S/8PiK9Pn3cRv+3F2K/XZf8Leof6HMd0ttyDY+U
YpPV3vgT/Tcov6UUe0GxHt39q8qPlcgoyirqnC+l7g+0P5Pzf6g+l/bbkX+U
sl94h7bi/D/5/Mk3/FG2fTP5aftjX/y6nvP/SP3Nqb815Q+VYhPWHvpLJ/L6
B9XYa6vK/5z/sULmq//VYs91vVqiEp2NupvrfB617C9rQ8Fo/KA9tJnvTZvu
KvS/IfXvpHwtr7eW/p0LV+d6K6Q3cM9NfpVS9As/qnPjeq9VP0O6wbG5SI9f
iP15QcZ7nftJfrO5XpC/ifSNlM9B+juOnUT7uTn/CNJ/KMNRNnMp8vXC1LmR
+kuSv558H+WTkN/Wd2w459PW/Qv5GukB6s8+lDX6C+7fRq5JQ5GZTud+1Clf
ivyl/GZUv03+dtIrOgc7t3MPvuqLjK6svrIyuvM2+fWo+xNtLqZ8ScY7O+kl
OLYu92YX3tNd1E/TfmrK9inkfpa4h3eRPlodq7YHbaCunfTxKek5eY5f9mU9
dV0tkb+U/Ar0sS3pmfh9Qn5mfgXOcTy/d0hPy+9SrufXVuZe5+CRyqbagwZi
A3qd/E2co0rdFcUnqG/wHVH+4NiU9P2D+gHyL5CfvBoboLbAuUnv7vvVzvru
Oj8a+SO53r+4F2MOZr68jv7LffmGFqXsmkr2b586ZvqYlfzpxVyj9surxXCQ
XlydprYHfm9pO6beHu7PqfMz5fPyq3DOcjvrketSV1uZe3b6e5Xyqaj7Yyu2
jpULsXcPU+83dWeUz+haVw2WYAxlHtK/MsatqX8P1/0w/Y3BeMaj7BvaLaN8
zf8DqT8+x74l/T9+B5OfUP0F6S+0B/YFE/CV+8tKvt/f6PML8pfT3wDlC6kz
Z2ybec+8d/Rxm99KPeefhPNfQPpnbZbkN/WZcGx6bVauHWIOSM9YCV7pjb7o
Z3+lzmfUfY381ORv0B7fF0zDdpxvpkrkP/tQ33sl5YOk51P/S/qvVmQLZYDX
6rG/z+t+m37PrUcuWbpXrqzwGf0dQvtfOfZ5OZgAsQF/9/Rxs1SCT/mCOnOo
Xy7HtruuNuta9O3O1c7ZU1N3J+7/zJzrGs71trYf9fu0f4o6E9P+SPp8170N
79OEndjMtZ1rH1W/fjzlH1J+oPtN9+qt2AO1C4r1eqcR/eMH1DlO25s6hlJk
IuXjvRjPg5xrHcZ3KuPbmHaz9eeZLqPsU479UZurttcNlcH6cw+WKmeP5l7N
d/YQ1zvO/ztl81Nvz27sd9pmttHmQ7pFmyL9/eIzIH+u72dfbKDX9uwT2gYE
0U2kfoxrupN8h7q70t995O8gv3E988s8jdz7Q+n/KM6tcW15dWfu96nT4djI
vtg+d+tGTluuNx/8Rnpj1yzG8zR1JiM/nvtrym7ty3o7RH8rU3866rxLX4eq
F6RsIn7nV4K5EHvhPT1LXaZ6vkJ0mi3a99F+xYHYfLX9io+6lrLVfD8pP5lj
t5Feyv2u+gL6eM/3iTpTiGWg/eoDwfQcpjzO9V9N2dbV2KcnquZd2d1n4r6H
9u+U8gx8Fu73vZbFeL5HuX5R58a+2KS0TW3gnKqt1D0z17N2Jevzz5zz03Jw
ceLjnLOdu7dnPBOR370QeXWFSuRbZbZ+dU0cm5jyPQqRt1fslY/LOR4ox6b5
Pvfi0Z6t0/szIfV3sP927NMTkN9eewTX8qX624GsbddSfzbKR1NXXMr+QX2A
c/3TlI+g/MVmdJFiGMUy/qOdm/JZqP8v6Qs6WUtNr0D988nP5PMjv7xYuFbG
6piV3deoRP74RXmW9PKV7E9cc0v1YChfUZfY+9726eY67WNB1076H38gsux1
lP3UCBZpbvpZuBt7+ugD2e9tTdl4teBXSBbG1X7UCj7hkeHgX56k3eZin8Rb
lIOLER/jnCM27gjqPUH69mLwmNPSfqg/GMZt6fQLflXyK2m/5F7tTZ83uK5w
bLpWcBviN5xjxYY+zvk26YuNS1vXe7Tv68+co73mm0awdnNSb0H62oX8mOS7
1JlVvBp13ijmmc1Ofm5+Y/XnHrrXcw97EO/mdeXsTz+m/QDlH1N+Mm0XrSZ/
BOe/i3McL9bA58vvRdLT0F9/f2x0m6rrpb8tByJD30B+LfXNxZxzHuo+0gre
6MHh4FPExP7muzQcrOyl5PvV93G+uXl2H3lvKJ+RPhYlvRHls6r77Olb/mJ8
a3O+Y10/qtHHWDZZKft1f6Y3qfX28s3sPYqc48Jm9kxTUL5ZLXup6xj/jvT3
PHWudb+qvq0vGJPvOf+01L+kkDFe5lpNne0GMmfdxbnHdw1ifP/27COLNJIW
cyb27FPtp33BEL5NfwtT/o9zLb9xXBv9uZ+n3lLOL9qIxIaof2llv7/BQL6p
sZqxcWjr0IZ4Os+zv5K1dVn1D/S/I31sVI6MuDXtT6C80BcbuLbwX8rZK03E
O7Aj96BL/xvT/xXqz8Xj1CJbiaETS7cD/Q1oB6f/U9UFNYMdGYP+5qT/makz
/0AwidonxSO8XgoGSyzWv7S9sC86c3XnxVpsLWcXFJgp62SvqC1rpW70M+oy
1GlMzrm+53cG7TevBr8i3vdT5Sn+n0GbaSi/yEukziWkL2jmWT/lGq6sxzkX
IX2Ve4h6ZGjxM+JolK13os5Zhdyj80mfQNlHXN+46rC0q1Vji164EH3Uea3o
Bt9RR0X9fxvBIu5D+y/IL1sO1tA13bX9Aer/1h9MTasVHJG6goe9BtKP0Of6
fbEBaQv6vJm+xDh+X4+NRFvJhuKVmsF8if3ynSxU8/1b5hz0VQ+Pehz516hz
PuP/lWOTULYtx16l/VWM4SXK2vR/Jvnn68GSO+eIB7paGwPl3d76+gLlKxYy
B2pvWqAc7KE6ZXXL23MPz+A8uxSCj/YnVvqjSsqWFu/YFxlmw56871q+A2M6
TJm6kXszSU9eeIo+FyO/jvZ77Rs8r18Zy5H0tzHlL3Ns677oaNXVbsOx1yjb
kWNveX8Y/xfufenjP3W59L8b55q8L/KveCD3LkdSZ5vh4P60jaqTqZPeVhlO
uYg67zuXahMj/SN9fEB/v9PfpMUce7MZXKG6kYcKwZt4Ds91USWyt/4B2jPE
xIuN34b26/ZljXCtUN4TazI71/NfOfK17R3zEWKr6G/PvuzZvuP829HnB/S9
F8c+cS/YzLu/aTV4tX/of+pi2nzczH5LLJKYnBO0pVRiX1qQ829Bmy0audd3
0v9W1N+cPi6nXj/111BXW877sx11XqbtVZ28C/Mop1B3qnKwOWLKllfe7+Rd
ch3bkvLneu239/2rZMy/kD99ONcyUzm2UG16i9HnLOVgTbR5LU7+lUra/uT6
47ka0Q0fpL2pk2fu9+p367vwUjnPx/fhddrexD1+m7FNzfXd2ArGTaybOqOf
Kf+Q+lMV87zfJf9eL79HX+bkj8u5n97vDyt5JxzLacN5V9ZvZG2/SXlTXXcz
39qL2nW8fuVd8j9Q/nw5+NenOf/ljOeUZubopchvVc3cfQX5F8j3UX65+hD6
XNW9N8emIn8lvxdJNyk/g/bramtwP0u+XAkOWDzwX5zva8quYJwXFlLnn0rs
nef2ZU50bnRON/93JXP9r5XMt64pri1PV4KlObg/mLrrOf/rvf5H4/zPco6J
i7nG59WTtjL3jEn7a1qRj5xfNqL8McrnLwfLrM1K29W85cwX+kx8Qnr1crBa
U7D+7Mrz34IxjVsOnnVmnvd6lez/xIivL36pkee1G+XvMZ7RlSudHzh2TTky
1srk76lE9lqMNoP9+QYfqqT+AHX/JL9ANX4Q6t6UQdek/MtydGPusd1rKwMq
C65F/fvVNTQjO6nTv72db8pv65K+zM/ah671eWt/ov6EtG+QbmjfouzOSvYi
ylzKXs8os1Peco/ifFLJ2qMMuDD5qVvZW+7mHNAN5l7s/U+99+k+8TfFyGiL
UH8v8g+THya/eE8fMXl/3sGzhoMxFGuoiVB8n8//UtLz9WfNPa0SW+cS6kuq
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
7rPUZtsOR6pYB6cu+Y9fa8W++i3lG1K+XyPclXJYvupcqo2a8R7DGI6uxb9Z
bp+2OgLqX9UNz6Vt1iV/gPqDYjADB7XjnyiXihwxcsVoWFXXJ0eLXC1iQrao
pU+xIstw7ImBYIzkA7y8nWf5uPhnns2S6sfIb06dsSi7sBGs+dXaPDrRKTTV
Sw1G16A/pHvhacifQr7UCF+WOv3TyJ/ejq5BTqrrG/EXXZCxXEZ/83TSp33r
g+/97fAM59MXrRD7ij6u+roOU35tM+PxWagj36HnH6lv4yTUP6kcncrO5Z6/
OudeoBNblvao98ifQH7L4XBEHaw+uZ1vTey9fGZy6NbIH1CP//xAI/qZ2Wl/
ptfbSFodjv2f3I7uRYz25Y3YOMR5ivfU9qH/8gJc72Tkj2vHP0Td9IQ+c/LH
KoMNxsf5xEb846ehvKO+pJ3952rF6ETOaYd/eFHGczDXNH0nmISza9H/+b3N
0AmXleXTkf6b67hyKBxr8qnpj3tmMTbR8VtZE10bpx6MbulIfuMMhrP6I8rn
pY/Lh8LJ9hplR7SD1Rmd32TKZ81wDVlnvk50VJuXo79Sd7U0v8cH8s757vn9
yKUlZ5DcQe904ivsO+W7pf15LsdGf7+1I+9r+9YGprytzkDdwXaD8W9xjz1q
rz0U29WV2tCGwzki3/iv7fTV4XzPtsKJoTw9Acf+oOz3dtL6UL1A2b/tcM1p
w9KW9af6tqH4zA77PrkHGYrOWC7viRqZ+9VZKE9+wLEZiqnzTzv8GldTPiP5
Uif9X0l+Bvcz5Kek/ZZD4Qsai3yxk7rT0v/ntJ2qEVuJNuDv2tmviDXwGxnu
ZH/k3mcW8v2dcPDpT7Mi+VYn/G8bl/IOKQ9e10iZnHrNTviV5A6SA3vadvRL
a1N3ZfUzlJ3dji+lPtk3u38iP/VQfJgr7dj4Ninnmrxf2gz1BX62kOchhuDv
Wp6pz1b+Etf+1fgt3Ix/g7ovdYZ+P9Pym64Qjhm5ZkY0MheIsdioE4zDb7Uc
E/sg393mtF+zmPll/kZ8qeSokKtCPg6xAOpA5E8QYy/WXs4n9+NibPQN3LYQ
7M17jGd6+ioNht9Ce/uJlL2n30E3/VvmPfBeyLEr164+k6PsUepHBvPO+O7c
0A1Pkcd2Jb9HO9zDQ+prSW/E77uBcBJ8UY+9a5Tv3UB0PRu0s3acTH+zMfYd
GllrHqHO5649rXDb28fG1F2pHWybGF7lx+0a4QYT47VKO/EI3Iu9Qn7lduJD
vFQMh5hcYp1OuPZX7ckbrjdyWUxB+YetYMqOq+QaxJpt2Y6vp3jHH7VBtoKf
lhNWbljx9WLn/ya/Szv8Y3KDyxFu7AU5D08thw9RLkQ5vKaqZ46SL2DbdnzB
xWPK9bBfO74PYir399yd6KfVrYnPeaMVLv0faLNZO5iRaavh61a+kA9BrrEP
h+Oveb02ZZ7PT9T/2v1gI9xT2tS1rYtx1PdSm5DYx03b6Vubmdwq+lTrWy3n
vLE3Hm2ED0AMpVhK+YKUneQUPZ6xPUybC0lP1xf7xo6V+D7PWAiXqDZEbYn6
lE7ZjE1S26Qy+Yed6LTVbevPtRd9v9qJvUhMovY3dZjqMuWvk5tJHay6WHVm
71H37UrsdWKi9Q15tBNbuTp5dfPawLWFGy9D7i052PXBEOMg1kF+cu3zYtDl
ItDmpe1LnenMXN9T7peLseXO1I2OWF2xMrmyufKgvob6SSvvKN/rs6SO9a9m
9s/6IGmT6mtFvyO2QJn22ka+f7FOrgnf0teHzfi2eD1ivR/j/IViuOKNX6G+
T2yMOrN3qD96I9gzfaXkP/b9EFskRm2MVvy55Uf+qBAuaDEIYhHkYxdL5Psp
15xz9nidcCTKleh8/UUr86HYh+UZw/mc64lO/DH03Ziassc70U1rk9Y2vSfn
+6gUjnK5ytUvifWQf2PpRvxzdu9dn74hzqdis1wDfujJy2KtlOd/6gTjINZB
f5L1WrFxa+t2jneu1794xWp0Lvr7GQ9AW7v+kO65X/X9KWcN0L4gns939ZtC
uLbk51DWnmsw64H2IDEG+t9f3Ik9SYyFPgkHN+NvoeymTUvb1tOd6Bb07Zml
G32G3Mwtjm1Jf+c1cu/kEJFLxJgYfs/6ToufFWMu1lx7r9xq+vAr9zsmx6bP
nb767vHc6+nzr01rA+9xM9+8vtonFDIX6DMrDls89r7t+NiKuxZ/vVc7Pub6
musvvEcj+s7NCuG8XKGT/ZHYSr95v33xafpZ+U5+0IwNW1u2OtXXmtFhqMvQ
R1QuS23g2sLFtDzZyZyxbSV7Lvv7thn/S/0wx+iGv1buEvkv5MHQB11fdHVK
UzfjU6qfizZjbcf6iGu3VaegP4c+ovqKquP5txO8klwd+icf3ghf87OV+CTq
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
yQ==
           "]], Polygon3DBox[CompressedData["
1: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
2X5rfg==
           "]], 
          Polygon3DBox[{{4764, 2269, 2209, 2208, 2374, 3718}, {3702, 2347, 
           2184, 2185, 2348, 3703}}]},
         Annotation[#, "Charting`Private`Tag$16711#1"]& ]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt1ElsTVEYAOC/dOKZWYgFESESYSeRIBIrYkhYCbEgNpq0Uq1qETU8VNVQ
osQUYtywEENIiLmmEkVrrHZTGkIQ8/hdsXjv/Pf7//+ce+857/WfPW9qQUZE
9PO1KjMiie+0j8gXbM6OuNg5ohtrYuvYXjWXWD/2nu1hmxQc5sPYL3acXe4e
cUz/aJaSe9Ul4go/I57IGrMiPrAGVqtuBptkngHyb9kNlseG93AfORE/2W25
NmuX8S2sd7uIOnVfWAUbIT+E3bN2Pd/G9qsbw46bu0X+EJtqHNU1YgpvU3eS
jTGOY3PYF/EVNt7a1/SXsO967rN84wLXv9Rk5UY8YNPEC9nrThF/xA9Zrb4y
9oZliBtYgd6BHSMW8fYsW38jvy4exJfwn2oesTzPdIMvZR2Mj1l5KqJQvpyl
WI7+cz5P5G66XsF/y59nT9ktlmaf3EN38TNWJL+anTNX2IPnhjq5Idav4Bms
ic33HENZJesp/4Kt1FOiv4plqWtmB829QO0GlsNaWKma9a6zXfeyx/VsLiti
F+zDV/FlNtM4m51m78Qn2GTjSPswmbea9yAbm5wtNoo1i2vYYnuckh/MHrM1
bK150uIj7JbcZ++wlFe7/2/Oz025l2wua3Vvb9g+PbV8OutqrE/Ombmv6p/A
KvS2eoaL/FRybtgPZ7yRHWNHk/fEPurpo3YnO8D6sj7OzxxWwXbr9QjxVO8a
1zvVFNunLslZdi+r2Q5WxNxizEr2jtV457v0es3xRO8KdtbFdrXJFs5UV9Uh
YlnSr86WxSrzVbKlbBsTRlpxmbjau6nRm5v85i00Xf9idVvlCqDLWK6/LPn9
s3ymPB5YuyT5rZtnU+a/oxPTFBezjWwjy0z2PnkWCxbyLRq1xV1faZb80VQq
cguR6xkK1eb9/9/5C/denqg=
       "]]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzjkvhHEUxeGrorGbGTtjX2qJz0A31kQjgkpoJJZWx0zlExC1fYtdrBF6
34FoNErPFCfnnvO79/++6amFzHxBRMzRfXHERllEc3lEll+URCyVRqyb1yoj
EnKV+UiX4Mf8UvdQEdGPJ80Jc9p9O7XQlW4LW7abc5OSk3ZasTYqxL70s7pq
7JpO7M7o33U38opcwwfkX7rAdt1+u9vjtdg+v8z/Q/4bNO3mkW/az+ofzB12
OmkGW6UJfZ3bQTsH+kPqoz95B6vHUuZTu2d0K2/rn73VYH7iGXyIivQvcpf7
RbkR7zaf5/9dfsM/+J2+Rz9qbjKP8ALsk4bNP9gkb8ZevZfTj8njeSb34mms
Vv4H+u44ow==
       "]], Line3DBox[CompressedData["
1:eJwVzrcyhHEUhvGjYeTUrDxyzka4BSW9VFgaOgpp3cBqcAPGFajknHbdyg6D
C/BTPPOe8z7f+c/XvLQ+s5YXEat4KI04L49IVERcyPuyiC15VxlxWBUxVx1R
J/vsA+jHg29O9Nu+S7trsdfIS/sVnuzz/I651fyIQXdDKNQ/23e5Azdt5lp5
bb9BET8rz3zbzr1gSjdsH8GbfY/vkCl3+///J+uxrM/II/+b1r+bR92MIcml
cMwtcPtcAxrx7q2srp7rNCfkBjaR5U+5cW98ooufkLfeauLuZDGf0U/qu2VO
n3S7ghLuW79o7uG+zI+6nCzQ9ery5atu2vzhdor7RZ/9R/4BSng3hA==
       "]], Line3DBox[CompressedData["
1:eJwVzscuBGAYheHfBehr7Q6UIFGiDKNHYsMwLCwRLoBEL7egiz3WSNyBjVFH
H+0KCFYeizfn+845fykanugZTwshjOEjPYSOrBB20YmhzBDa6QraMJUbwrtO
i3kHrRjUidJlzMlTOSG86TTZt9GMuM4zPyZfskfwqtNAt9CIAZ0T+XF2CN26
R/RF58BcyP/NcD9SvH1eAe/HPotnXoI3yku655t3Q6/xJIvyL81X+JJd0HOM
8B/lM7x88547HuzT9k+c2SP8hO49f8M/T/1rk/bzJmX15kXU4U6nhq6jFnny
mF61eQFVuNWppGv/5+RP3ujTqbDPoxxJnbis1LyKMvTqlNBD7xfTLvwB0B5D
eg==
       "]], Line3DBox[CompressedData["
1:eJwV0EcyRGEUhuEjltQ6WIEVyHkDGAgtZ9VGNNoGmFCUsWwqmzG2ACNroIQq
q+DpwVtfOOe/97+3MVfIbpZERB6/iYihVMRLOmKYLiUjjnDF7zdENNVHrMkj
chaj+NO9ZiL6za/lZjlvZ4yfwDhCPqiJuOFbzNflSX4aU6h3tkx3y9+h1U6p
/OS5SbMKvk1XTp91Kd0y366rpAPyO/1ANY5xaS+nr+K/8YNanGBQ3+FsDb9L
03InrZP3aIKu6E5pl7xBV/2TPNaQMUvqznDvvt12NvkZfhbb5p/Fe+rO8aDr
sVPgv/Q75vO6OaR1F3jke+1s8QvmC8X/j0Vkit+DN+/us3Oo+wds+DJm
       "]], Line3DBox[CompressedData["
1:eJwNzskug3EYRvH3MyzVdAW9CJcg9vaUGhcdcCWGuzBFYk3iHmhLi0Qlvo5m
G0P8Fk/e75zzT9psvjxbSiIiZ18jEWfjEec2Z1u2PxnRn4j41DbwpjXGIsru
ntbTPrQiLlld63K7WgG/a5nRiDXfHf6YX/f9xp/iLE7wsA3ZK9/yvsTX9L9M
RIqf7EWrckXtEf9qTffBnrWKVtDu8Y92587gK76vN/CtfWt1d1q71HragN8e
tBv/f4c/4bt84t01t81dcB1u1bsj3MY1bQUvW1tbcg+1llbV8njRUi3lDrR5
XNEW3JxN8f8Pukag
       "]], Line3DBox[CompressedData["
1:eJwVz0cyg3EYx/HHRpQJiTeJbsQFOIDeNtg4ATkAC6KzIxewS3ICJdzEBZS1
MpaMMuNj8Z1fe975z1ssba5uNEVECR/piKtMxFY24prmOiMu6CWqXRGVJCLR
nXZEpN2866q6cTmvb9alcO++od/my24m7F98C1qR2B7clPkfTNq/aRvakbM/
2X/5Kdsjf65LeSOjm9YV+CXdGV/zxijfravIdXlM/vQ/Pbqsb+ryjK1X3pH3
sIt++cZWpQ3vzLrp45+xJr/QvH2Q1nDnmzk3A/wr3lCwr9M65m1DdFm37/YA
RXlBP0xX9Ee6Exxj5P9979xi0c2h7g8/zTHs
       "]], Line3DBox[CompressedData["
1:eJwVzrsuhGEUheGtYM7n6ZwiwbUYjTEJF6ASEqqRSDBqF6A0NM56EjLhOoRC
BoOW2vMXb9b+1lp755ta2WxtDEXEKurFiMdyxHsl4om2ShE1uoMq2jVvnbK5
hwoWdUp0WfZa1ZPfe/fdeKBN+Qt/Sb7tXUz2dK7lN5jEs2xdZw1lWV6ngFn+
gv2cOYuS7Cf5G/9Pd9T8jS8UZX3evqyju2Xvin+JguyOf26+QFu2p7OLDj8v
/+QP2x8k9/gf9FD2y8vJ07wM5u0e5CNO5NnkLsbMx7oTdBwZ3ojumzlFZ2QN
e13vOfeOaFqnZ56WVWkdNaT4Xd4tHdg90z1FQ/YPKrk0fw==
       "]], Line3DBox[CompressedData["
1:eJwVzzkzg3EUxeGrMRSx1kgiqPgAieUD2I0ZNY2ODq19a3R6ZnwPWcSMJHZ6
jdIoMFSeFGfOPb9z7zv/N7W0OrfSEBHL9NoScdwacUT9bRGzcr49olTPHRG1
zogXbAzrk0d5zd4M9qZrpCZ8SG7mn/oi9sV/6Juq9hPYuX5E/pCf7WfkXqrq
rvEnrEtO0QD2x9M0jRe955H/yjldkpfdPGCFREQWO8WusHtswryAzbs7pAPq
waZ0F/i7+c48SCU3ZV7Bu/Fb8779jHfu8T6+oTurv9dcwGp2dvkOLeqGfWMS
y/EK38bTdtd1xfo/1t9ESSyvuzGv6bbMWTebPKUbxy/NJ+Z/Jnw9Bw==
       "]], Line3DBox[CompressedData["
1:eJwVz7kuRHEcxfG/iNb6BCqMCHoSe+yFfQaNQmhslREasRR2FU/gBUQlERFE
w+jIiDVREwVCwmeKb86555z7y735Q+MdY2khhCm8ZobQlhNCO1rxmR3CoGw0
N4RJJPNCSMe7fMnzMubQbNuCAdsL+is7siunL7LtrBDK+C16oO+XHer3+Su3
vukXEnxMt6N74yN013sffFTeZPNMN90p0p3rRvg+WaPuif7IKnUxWooSPMpX
6QpmkaGvwAK/iAf9BL2X/dFuN+vdq0MDevXDusvUht/QR/l1Wkx7ZNf6CH9s
H6fTmEnd0iV0RXwh7jyvpb7fP8XlZ7J5vkteQM90ydT30mq39mxObWr5TnkN
vaGF8h35Ld+BKvmW90/oP7CKRS0=
       "]], Line3DBox[CompressedData["
1:eJwVzjkvxFEUhvEj0ZDYK6WKmEXiA6BTEUFtGcYYy+jVegkRXwDfQLQKzCpo
JRIFicLSIKj8/sXNc87znnPv7cttTZeaIiLvvLRHlDsihjoj5tT3zryT0W/3
RNx0R+yrK2ayuCAbwEUsyIflVdlFW8QgP9UV8SCb4I9beP2l7Eh/Y74fc/Ir
rmYvxS3pU3aXsc4dqG/NpWWtmOfTuILj7ivbHZO96if5NxzVV/h3dZb7wEeu
2anyDfcWuCKu4g5/6J2a+76wyH1iL39s/zvJ7J2od7k7/VryP+7Uzgj3pD9T
P+OevCG7M5+RrSd/5jZw2sy1d+t4LvvlZ9Sbsh91CWf1f8kd+A/C20CV
       "]], Line3DBox[CompressedData["
1:eJwV0Dsvw3EYxfHHLO4bFm/AogOLhNiFRF0nEmFR9zuvQgSbSYsXYJF4A9pS
dXkFgoWSGFw/HU7Oc875/n9p2jKe6p+piIhJKlVH9NZFpPgjzdJObURXQ8Rl
VcSc/ETzlNYlsQOUtWVrIhLYBdszNdqP6iPadTlbDpPnHXJaP2V/wS1Sp+7K
lsdc80FvZjDTmD73Ema3zNi7de9ySf7g17pW3bJ7hXrcBd2qe42G5Bv5s8z6
pkm+8PY4FfWVfN1WsDXbjuU2+pJv7d98yG840e2X35I38MO6H/cd5o+PyKeY
A8yvvIkZ1QXdYzL6MXcCs2UrYrb5hPxgP7ef2V91Sf/BG9/DHNI/6sJEeA==

       "]], Line3DBox[CompressedData["
1:eJwVzrkuhGEYhuFXb1fQidj3aAQnQIUoqTBUjNBKGPvM2E5A7GtJOAc0YmkU
Cg4Arc41xZ37e5/3+b7/rxqbGUrmRUQSbUURV5gsjrjkduwWRiTMv86DZRGt
fIFx2TlP8I5OV2nEi/07t8jPsFkScco9skp+te92fpL3ufPGFbI7WbP9CY6R
kI15d1vnx9yEI+Tr3ds9cie27LPeaLQbkB/IXs0N5r+CiH7Zfu6/ZPWy4dy7
fIgDzOX+0RvTOh92v5xEnXyeM+5NcZq//E9Wd0+vyFyr02sudS6X3eotYgQp
FMrTvM4LvMY3ehtc4+4qz/I+OuQPOqO+kfHmst23vBrXdinzEhbxqZPWWXHO
xzP+AQfRPqA=
       "]], Line3DBox[CompressedData["
1:eJwV0ckuw3EUxfHb7iyMfQJvQFtTEIKNpe4kbNggVTyCJTG0ZlZszUM8ha1I
kIgEtW7t8enim3N/55x780/+rVMLuUIiIvLobYy4xXZzxA0tNEUcNUQspSJe
WyK6eaPePfSQlvTuZVVZF+8aeTtXdJ4e6CzK58w/vE5cYkj/go7QfZ1HneHa
DWTNJ/Td7T3ZoLlD9xwZ2YP3rHu7siovi19eTjZJB/BmN8PfMK9jGWPyY/oi
S8uevAPT5jOcYsbdHXcX+C+67bx+2ocne9uyXVlZL8lL4Ns8XhdRNG+hhC/e
Cl3FBJ7tJPHnxpYbvbx6tNW+kbeJO3mFlzKXdD7cKHun+Z/mNX6Rv04rtf/E
+wdsXkFG
       "]], Line3DBox[CompressedData["
1:eJwV0ckuA3AUxeHrAczDnndAIhTBC7AnEYkF0ShPwMaOiJ15HraqXQqJhQcQ
YyO18gClhhq+Lk5+955zz79t2jyaHJyqiIhJ6qyOKNBqVcR4TcQartRGZOoj
nuoibsyNNGBelzWYN/BK/lUZ8WsPWYu9iGP0za/CDF3zX727qXPutonu6Y6G
ZF0++9acwJLej04rP4lbOgncxjd5zt1F+Xtht/0RezDP+9Gdc7tIfbx57Mdh
fJAX8Nn9O2/He732XUzLlvi/+inegHymfMu/xBHKy1+oKJv2W7K8lHzCvOeN
FH7I0viJbbJ9/rLOAZ7y/7yf02uXzdgP+R1uj3DW/mU+wwX5d/n/0D2WJXkn
WOJlzf/PrUvE
       "]], Line3DBox[CompressedData["
1:eJwVz8kuA2AUxfHbSWKBloVhJ56ERSsxBPEEEokVktYQngBriiBiWJmnDopY
eQPxAl7D8Ovi5H+/c869ydc/szA1n4iIORruiOjJRRzSRXtEN17iR5cQU50R
aWpti5jFBC+LV9iBA3o1THpv262bq7wd8zXvx/1vcx8d07P8SN5rvmnepy/v
Cf6g7iQO4WLWXdqQLeEIr0ijdGK3zE/bPTWP8Uo0Tsu607I6/nrn3LvVy+Mn
v4FlOxneLt7hHtZkL7IVe3/2njHolVeUFfBed1+3BROyN15Jltd/4K3yktSg
TX4Kz/QfZQf4hOdYae7SVvMPuEYVWcGdKq57Z+id/gEbtjji
       "]]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVz0srxGEYhvHHwplSrJUcViMrCmUxjezlsFSKxeTwARy+gYUJUSa7mWwx
ko3Dwg4LCUUsbbAe598srq77uZ/3/74zLZPzw3NlEZHGbFXEam3EUV1Ehrtq
IvLyTH1Ejo8bI171m+YtZKoj2vS9+lZeN7dzB7JyTt8pJ7Bj3nffhXzAOfO0
/aGcdGeBd3UnJZtPOWG/p+vzTcp7vfxud6ZL2vU5cy6v+N3N5h75Etf6K1zL
g/p7+QGP5n406AbMz/Kt+9bML/KP/Isb7/xxUZf37pP9nK5CnuUJ3xZxK39y
Oead+eYRZ764EmPyOLrtRnkRC0jZLfGdfpmn0KR78eaG7s29H6X/iiF9lgvY
RtrZf2q9QdU=
       "]], Line3DBox[CompressedData["
1:eJwV0DsvRFEUhuGlc638Aq1bJMxQEjIu02kkKpQKgyHuRCGh9gMo1QyNQhTi
UggJ45aMGEqFWhSeU7x51/q+nXN2dsNEbniqIiImMVUZ0VgTsYsmtFVHtPBB
bcRpfUSzeUjWwaeyFLfbO3kLm86kOSvb4zNn9jlln66LGNHPcA6Xuivc4Bpp
Z0r6ed0c8ihURXTLunQn5m33a+JWWQtf4E43ab/nW/sjP+De3C9/Nb8l37a/
86CsxGV7H76RlWV43/d/k3/qR2V/5qK7PeEFz+jRFXWL7reEBXzIy/jCue6T
e5074mX9IY8lb+AtjrGTvANnZHku6Gd53L7CG/of2ap5QLbOJ/a1pMM/wEZA
wA==
       "]], Line3DBox[CompressedData["
1:eJwVz7srhQEYx/HnbM457pfhGHDqjIyYFRFnOmJwWRik5JJiM2CQhfI3EGWT
UBxhEqVYzBbFhFwy+Ri+fd/n93ue9+3Njs0UphMRMYX5kohMaUQ9ntMRu2UR
K1jFMh5rIn50X/jFlfmbK3RVqEYlnuRnfIoiWu1scxvv8H4y4txOh+eTVESn
bx1zF1/wJVr0ec7ZvZN3u92T9fC17FZ3gzXdsrzA/f/I+uz04sG8pRvwPIgR
3bBsCEvyEX6RveLNO8ft5OVj/Gme5Tkk9PfyD37HhLvAARJIyw71i3ZH/dMC
l8uSuhTadRlz6f8uZlCLI6zr6jir33Q36X6Dc+ZBXYOuiEY0y7LchBX8Abky
OFM=
       "]], Line3DBox[CompressedData["
1:eJwV0EkrxnEUxfFrKONjowyxwd60wcbSUJREbB7KtCEiFNk+huRNGDaIkoWS
KCIlb8ArUCzMW5//4tu5/3POvf371YzN9c9mRcQCFvMjqoojqnFfFLGeitgp
jcjQV98pWoJiPPDzCiIe+Y36u7x97CXwW+izTittkJ8URrSZm8zNeLf3Ij/i
HWMTG/jgf+JZ50b+Zb50785+O++WLuudmK/kp/RJ3q3XhS0MYE02mMz6nfod
6NE95A/RYaRlIzppXpqO4o33jm83J3V6ZRN0Ct/8M50fmoM/9MmneL/mXIzZ
S9F5fg4/GzPJ2+Ecm/wSWqWz7ua4/8rQDZTxL7CtU07rdCrpCiqwilosya+T
HPU6+3ank3enB/gHFjI8xg==
       "]], Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/H3ldP5lcFfoCiz0WYxEIPCIsMt1NWZ0N2kLhRSbuFKDC4/
MhwLhVKKDAaDgZKUQVFsRnl8h2evz72e78/7vt9ve3Z6OJ+KiDzSmYi/+ojP
5ogy6rDTFjHXEHHGfaGpJaIRt/qc/lj3gQldwXxrY8Qpl26KeE12yEP+Hc/O
3dyTLJtfR1X/himzJ9yk/LX3x54H52+5zb9gia+5+8WPyVFU9IvJTlkyO4Ih
9wZxpC/rH5HyX4PcgDvj+n65qn9AUX9p54Gul9uXC/p79DkX+Bpf5C6c93Tn
cp6/Q5e+mnyLZA5F3Q16zM1yeV2Fr/i9hU3M8NfJd+M7PduUmTUzVbnB78pc
8k78lezQZXUlMyvJs2MZGe/5D6BVQmE=
       "]], Line3DBox[CompressedData["
1:eJwVzz9LglEYhvGnJdSKAj9A2By0S+BSjUFBX8A5cmwJoi1B3SQyEBqChrYI
sgiMoj9LWNEQ5PCGi4OErS39HC7u576e9xzekyuW1rfGImIDN6mIH1xNRfxO
RgzRxCGO0MpGNEbpmwG+JyISVLkDu4o85/touSPhspmIM72HNf2SH+dO9ASr
3F864tjcxYI+0JfR0D9R5PadSbiu/MImV7f7wK7esXuXK/ybrPGvuOeXuHlZ
1l9Q0C/0PfMzrv3T4sjJU36He0Cea+rb5jvU9CfvfcSct+ZQ4tuo2N3ybczw
05h13z/tYDme
       "]], Line3DBox[CompressedData["
1:eJwV0L0rxXEUx/Fj8zjJaPAP4JaBbmITi5LhyiLLHbgYKAN1SYrFJmXxUAZl
ciOSUkp5SN3hqkvyEMogZSavO7z7nHPe5/v9ffs1DI/3jZVFxChOyyO+cVgd
sV4Z0Y25qogffVZmayOO+S+kayLW+HpMcf3cgZxEjv/ErHMzqLNT5N/VH3jD
Hv+GAfek0MeX27vnHlDEDv+CXu6vIuIXW/pHNJt16dfVPeqiXHL+1exZPiFj
vmpeQFaf5+5kASPcinkeSX1K38gv629L/0D9ZJbztn3Mm12iU92Bdm7XzrV3
3uAKs/wFEnwzknY2Sm/2T7axiWn+HEPcoj7j2y1oU5+4o1VO8IP8mcy4J80n
0MQd2WmUC/gHibZEyg==
       "]], Line3DBox[CompressedData["
1:eJwNzDsvAwAUxfGLpfWIweiRSNRMSDSRIKYOHomhCYNBJVIRFW1CUmNrZPAY
SBgQUgyNxcDoK/gCZWKxGQx+w8n/3nPOvf0rhYXNpojIUyUZcdEakWqL+ElE
VO05+6B9FdNdERv8M3uyPeLP3It5WR9eydfN5/IaDmHCj3HckRV4W1R2d83r
lI24u5UV+aPmEt7IXnAKu3XW5NMdEWPyNO27n8SU7E42ZS7r79G9mypvBl/l
c7xmty105O5BNq//LsvKKlSlDP/RTcM8IcvoL+ot0bns0u0sf1k+bD/AnP4h
1vEX87pZnRI+6WxjkWpuc/w3XsLfYzqhOv8Uk9RD3/ZnGtDb1W/4+0FHfnzi
F/4DBS02lA==
       "]], Line3DBox[CompressedData["
1:eJwVz78rxHEcx/GPIs65UhZdSQiDv0EyCp0sN1AiDO4iytUNjHfCodykKIPJ
r+4GxaCE0cAiJRYDZbKYlMcNr57vz+v1en8+32/b1MLofFUIIU25SAiFaAg/
dSFEG0KYqQ8hhodNIcyat2RH2I1/Otv6KecJeRozvH1Zq52IbI8W+ZPyHt6S
+UBewl5slPdjVr7My5szeKd7W+nHvKdzY35wd57u5XH9Lv6w/orzKp2YE9Qi
u5YleNX2a6ho75Q/4p5nWVKWq7xHZ3Y+sI8/oDumc647jiXnHfqVXeAcr1z5
V0zRIw3yh+jJXMCk7ia+6K3jBh17fxfbebXYTJ+8MnVU7rPz6jveaFr2jl/u
i2OnfM2c1SniJe+Kvs3/GSI8fQ==
       "]], Line3DBox[CompressedData["
1:eJwV0D8oxGEcx/GvzfkzSDIonOUcJpTlZDJabpRBBsngMgjLcVgwoA7LYaAU
JQNRZzJIGTEZlMwsjMrrhnef53l/P8/z/PolJ3LZmaqImMZGIqJYG7EuN9Fe
H5HESWPEbHXEHtdhn0IaT3ynXDTrlj2o0+mqdMx6ZT/6kNe5qYkYcn+TzjnS
OvPcAlbNz8za+TX+VmbqIgZx6fwWWvgH/kfvWX8bbdwA94yCe1awz8/wH9YZ
/hNvXANXkl/233i3PuCO5Yt3St7I8s3ykd92fsR6R57q/Mmc3phOwrpPpyin
fM+uvNCZMx91ZlLnynyYz3PLWMK1TkGO67xW/qteq86B/REOUda5N/vRS5l1
ouyNO/xy/8qnOl8=
       "]], Line3DBox[CompressedData["
1:eJwV0DsoxXEYxvGXybVcSqkzOCm3xYIsJpRJLpNBroNS1BnYKJncCuWWMzil
znbOJIoSNtmU0SZlYJFMfM7w9Pye5/v+3v+vf3J6cWShKCLmaas0oroiooZ+
SiLuyiPuqVbO1EY8OKf02bKIxsqIYvOtWDOd4y38l27pDMtQp7knrIuvulun
+7CnTfcor9OnXC8nsSv6cz/Mb2LfWAJr1/frerE+2sUa9N36Z3qRjyip65HH
vHGDZuRNnsYm3BvAJvmWborn8W3nvO98FTo+WngD7cmz+Kxu3zlrx5A3DNM4
Psg78Dd9jt7ty+ledXXmd5wPCjv5Ib8wU2XXmrlLMyk7luRjbM7MCb82k9A1
4ct8pfCP9ae0Jqf5Df8HUuY6gg==
       "]], Line3DBox[CompressedData["
1:eJwVzr0vg3EUxfFr8NIXTbQJ8ZYweNkkNjRC7DSmGkQiJF3UKvoXmDBgkbCz
sBjbGIhJBwNpjPwDLBZ8nuHke+459/6eZ3Rzd7XaFhEVGktHDGYiTrMRtVTE
Ce7jZSGig2+nqvndzg7eyWvJDuWT2+6IDdrW9eMWPtkZ4Ftu6rgma2AZ29wF
HZj77K0kb/LL2Isvbn6ooFuUrdtdwA/famFZl9O9JV72ikfmprzBl2R1rMlK
shnzI03Kls0TWNE9yG74Jd8cxnvfGcJn3axsjm4pL2vKinwPP5Xkbs/5a5z3
5p4+Yy7yaZzGK90xP+LdlH7c3V+Xf5X94meyq+vUnem+ZVnzF+bwwv2hnX+R
hDO1
       "]], Line3DBox[CompressedData["
1:eJwVzr0rxWEYxvEbCwehY+TIIodS3gZEOWdQJi8bZVCUlOMPYPa2EKJILHRM
ZHYWKQODhVLinyBh8DFcfa/ne9/P8/s1TufGFooiYl6aEhF7FRH7slwWUV8Z
sYQbzutSZ15VHjHLL/JrXA6PkhElerFcSo29jIzz1fjOvcmk3V3uxRsT+jP+
yqh+yH/hiPxwT/IttXyWG/bNDE555xWr+F58kR7Zcn60362P+mYXPmCWv9EH
3WvBDKZxju/T7+xcORdwyP0G/UJazVOY5a7NzvR+/zAgtfqjecH9pH7O5eXW
uQ13uHvzA9yWBa7TOx3/70jCLG+3yKydD0zZOTVb1WfMT/S02WdpxAr3gc3O
x/wm/gEB7Db4
       "]], Line3DBox[CompressedData["
1:eJwV0b8vQ2EYxfFHiFarEqrRTbARwm41sIhiQZAuhCBRe/kHGLFhM2jMTdjE
j4iJjRGJGFiEzafDyfc85zzve+/N7SpuFNbrImKV+lIRx80RJ7TdFNFrLuNx
JuI5G3GECd0ubck79SUs6Yq61nREXpbAdVrWreESbtpZ4RspZWfW/hwt6B51
4/w8X8EzevGMvHxaFvan8Bu/8B1zujF+0X2j+CZ7x0nn2nRv/IzsFQuyimwC
b8xPdE2XsnPZsL1bGpKNmAfxUPfj7gf6oh5ZlbppT3df+1b+gP/kO/is977j
Pygjb5ENuC+D/bXv8owD/hTT+l5dg3mf6unCfOVs2W5S/5f0H/hf3MGcvp2q
9A8VIje4
       "]], Line3DBox[CompressedData["
1:eJwVzz0vg2EYxfGbhBS1KEoTCWK1kDBhkwiLB0NjoYmBJhiQLgYvq4GEoQZi
RH0Co6mNSPgSrZGBeCm/DifnXP9zXXeepy+zEa3XhRCyNNgcwkU8hP2mEC75
Hj/mPS0hLCRC6Ncn5Bzt6HrN23xL14alzAf2D2kNT5pHdKtyDovZiWN/lJWX
8c1aLy/JK7yqq6eoNYQ5esdf7Dy5f5MndBXqxGbMGTfTvIy98l08jVXkRazM
592e4M/4lFzCIl2Rz2Jp3VhtpmFs0s4Qz+Of+g+6Mz/ycawgF+zc0Kiba35L
KfxeX7LXLXf4/nb60T3gVf5Nv5TH41ijvXO5gQ/wpO5ILuquvN1Vu4n5X/7F
T719Rv93sTqj
       "]]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
/2TSH6VY/xeGtN+OtF9cyfv9wfbZQ/aBq2wfMXuCyJ5ehja7lxu/0lWOGdbz
2spGuDut+XQ/vQz4Psj0YGVbqG5P9LX5mdYAY8pyfptpZ8Me4b0N1xXdYyW+
v4tTjRL91KN1rwj2+fS704479LP0niuXwOoAqZvhnrG6+is7H1ozswYOqe2o
3HS3DOIs3TBudZJu0eatZvPSy2HaoUmXM4yqYb9VbUKXdWm6Nj2V5H5MyIVV
nfYKbm9pgA7CfzJ06W90KP1thr0834nm43KeH8PyS0k+TmL5K1mf2aQPHmB9
zP7WH6VZ/91/7xcH8X6/sn16kX1wFNtHzJ4osudesj/4sT+fY/ufofMCNfbn
LD6vXBPh+eLon+TPZny+vfcL/QHd2J8/7id/KCD/wQT25yXsPwnkbyjP/izN
/hZN/onu7M+72D8XkD/jO/ZnPfbnKJ7vw/4smv+O5Q8S8+esv/XBpayPBOt/
gP35C+tvxvuNbSV/Fu33EttnNPtzCttHzJ4gsqcLxROYwPG57D3Fk00UfyCI
4/NTjj9fKV7BZ47PoRyv1lN8g/84Pq/g+FYhIYyHsI3jczXHw28UP3Esx+c3
HD853uJajs+/ON5+pfiMPTg+Z3F8TuH5uzg+t/H8QpY/jOOzKP53oPgM7hyf
C1kfkf7BHJ+XsP5feL9fOT6/4f1u/Ns+8ILtI2ZPENnTkfIjBjHecOL8mEv5
FDMZb2zjfOp5j/LuOfqLHf7GGzCT8YYb52tbyu9wkvHGZc7vXxKFeABasglv
aP2NN/CIGN7I4Htrx3hDhe+vIs/3YLyxneePIbwBoxlvKLH8PazPOcYbZ1kf
E9Z/NuONE6y/Eu93KP+V4f3ms30Yj6EF20fMniiyZz3hPdjO+Fmf8d4Bwof4
kfHzTcaHXwlPIuNJSGI8OY7wJ9YqEH6WzfsLP4MN4+e5jFd9Cd9CJONnbca3
/Qk/Yx/Gz81/42csYvxsxPi5lfAzStB87Mn4+TrLj2f8PITl27M+Oxk/m7M+
Lqy/EuPn74yfv/B+Wxk/f+D92rF96hk/h7F9xOwJInveIv4CY5gPNiUQf1lJ
fAeY76Aj850S4keov4H4IDA/siM+hdrMB92ZT7UQHwS5FcQHQ5h/PSW+BjeZ
D/ZmvraB+CAqSxMf3Mn8zoD4ID5mPjic+aAt8UE07kl88PDffBAeMR/sxfKN
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
lv1cnb9vb+DvDMP4+3ax7+FR9D08v+sFN/hdrxl8v/bxd9Qn6TtqHMDfUZ/i
77EVgb47HcXfnWrz99ua/Ls5U/5+O4vfHX3Ev6P34Ptewt+HK/N3p0/5u9MF
/D25I//Orp6/Jz/F8ecUv1umx/FndHcZqyqtcJxjd3vV94IKyPu28fCGzlUw
ksfn0zhm87jod3z2/L16d/4dX9v/o+u6o3r+v78ZZY/sshqSPbLiyt6bJIqs
EDLK3jN7JCGhQpkhouKm0N577/V+tyQiqV+/no/355ze53z903HP6zzf93lf
z9edj3ufpqLvryPw5+bg3w59go9EnyC1hhzk+uxI1mf3FnPG5mH+qmzOWB/g
Sz+jL6AE+NJoof9psdD/PAT6fw9wqpvQ3zoL790FeNcj6Au4BLzrLR2Bjz2t
J/peZfhYQl9hd/QdPMR5MxLnmYtxnrvhPHtPrRpd2iKNv0pNTDtUBtPSsLXP
lzaTkj6e/w671hPPfxZ2kIqFHeSmsIOGYYscj47IpwNLxuRlfk5nvdZ/1l5S
TpDNi2ZnzIseBzsbCHxjf/T1jAa+cRjwlvboX36P73dJ/XlBvBb2XQ7XxzJc
n1z/Hcn67zD3gwIw9+M75n44Asf4B/1Q+sAxQl9RvNBXZAR9JZt/Ij//H31z
LN83B7+Io+X0552AjF0W5wvZ8eGCUKOL0dQzKURrjmG0bN4+y8/bl60TL+df
WSzOCl42R0q9p6+5doxS6FN7r2X9VMNJT31qTV83Cd1qHTLvXFIqqS8p7XOq
fQRNrX7Zr1hBQg5Blob7r2ZQxrCtrn8d/WkiLShxdZHQ0xUdRo5zTKfO2oe3
VHX2p5t7vttMVpNQ5YB+N4NmppPLmDuGXWr15D8RF3CqiAv4L+IC3XZbrC6o
SFnnUkW2a880Nij4vShmThB1Rn7ypMhP8jbkJ28LOdADyEEbchjdK6DCWrmQ
fw04faC1Yiy3dQsoiNOPoa3NBz7o/kpCfcu2/rHbH0l9hm22Ve6YSh80G6bd
S5FycRe9/d/3JnKJdbMTDxpGkMYCp2Vb+xbypmCFSJ/58exiEj/97ppI+nsr
4K5us2JKuJruecIggp7p5XT8sT2IBk+f4JdTVEht7ZsMU2kQSaOmbjR2vhVN
F7JHD1u9rYg99U9U+DgG8c7gxSWr/kaTL/K9rUS+l18g3/v1/WEPa9XaOK/B
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
830z1F/eZzv/9jVrCyJohV+Zo31qEX06d+vuIcdaOznRxi4vIpAKkgZ/m15T
RD9PFFherYngVQpOgZozA+nAkCfKzb8UUev296/MGBbJfvPOvrr4IYTa4Z5o
2T0X83HPBeausBLmrixCXOaB/lBZPjkTesAX91DL7rnwxD0XZaeuhG0dL6VB
uzzuT96WxiddNl/q+dSPtvyZOnj5MCndXrfymtXGNN6n9j5+rI0/VZV9HttF
JZ+TXfxObA/Oonktnv0zNA+mYF+1SN+8PN4RZNNY52sW9Xj15dHqTWHU5cl+
j3xXCdsWlBZ3vRnNE651rdn0PJncrfrtHHVJStKR6xp80ffijXnBR5v4pNHP
490Hmd7LJaVxW/p3Cc/mUeUNXFL9IujiZk//Pb3zyOP0hFnZK7LZ0vGl17bp
EZTiljKvR3oumSYUTZcaZLP1M7dHje9E0nbtCd8j+tfaMaUR97tOzeNO5sv0
Nm6KoAPpLwwkJ7MpUVttyF2PXP62Oqh98Y1I8mk/PCY7OYu0Jj5x8NmYy8kv
QrpbW8dScmj7P91vp9NH38K8BobZbOOdF/plWia9FHVDGiXqhsSoGz5dZz7/
oNNbmniq9Tu154V03/iR18eMJDoq6DxL0Hk/6JubdlcIUMqjd907mUxPzORH
XQZM/GgZR2MPaJvO2Z5LS7lszlLrLJ7iVfayYnschbrvnNJtdS79ntR0mMbk
LN5/e8HFV7V+znTcQ7Qe9yG6Iw+j8kTMPd6Guf1OmHu8yGiQm/6eWn3cVu3C
rdAo9lyQ79zAUUqPUZ86JupTXDZY1KdM121t2npNLtW06rBg04cMnv1q0noD
yX/vkcvk3uOnwo67YkjK8X33+DwJfst9tCo7FF5Mp+RW5kc8dQrp3bX3D566
RpNW7pSzXWtiKPLZ4pEKXlJu3SbopELPFBo17ub7Sf0D6ZzHPuPHtfHsSJ2G
TxKGh9NXT3/bHVsCyeLATsOUJSX8s7HV0aYHT9HqYfGvf/8LIOfjqq0WVRXS
9sD1yiNr7ebMuwrv1d1D6KKxuL+190txL4wV8h636t9PSh1xP+lt3Dfqgvt6
egwReZiBuJczAvfzquJezkGlj687++aS4c4VNSscsrjbhCnt9UtiKN9r45Dz
hRk04+DB+xOPx/Bdi7s3vo3Np+dZYZWJo5I45NsJqwXRErrwzfuzd3gMJbwP
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
zOvkw0qQz6d5dXKmN83E+dGFnG2E/Gmm3LlqcKXu/HAqzs8/TXF+LMX75ec4
b/3wfruLc8JNlopz4o9zsrief+ikOxb+YSr8t9s4h69wfvphnd/wez9jnUpx
nvmT4Idl53kH9jVC7Itk+2q9UNB9xb5Iti89yOcezs9gyGegOG/UDufNCOdt
hviuSUV81zwC37Wa0AP0AHrJCHpAC3R70BeB3l7oJVoHvRQKvTRZ6B86BT02
FvrnBfpzX6A/VzZfdCLWsRTr0Ces0wu/exd6aRd+dwDoMn01D/QMhaELGm3J
4vZb37ZuHZlJAxtaHK7qnkFNgR8YD/xAHPADxUL/00XYo9bQ/7BfdBx0LdBP
iTiLmmXVxVn8E3GWJvxe2B2+AbuzfXfxJo0pcWTZZbTbwHafaLLyaf2714qo
wa86u0Yawq7ROtg1GT8XYI/a4ndL6/NDHUFfuLbOHpFeoLBHGbBHtsIuc0fY
r7uwXxki3uR0EW/yK8Sbv09P+xe3LZeHliambnJJp0FXiu++HpxGp4Q/wN3h
V1jCH/ACfTboW2R+CHCbt4FLnwbc5kk83wV+hWydQtD3gr4a9OJnurPvKkt4
mZ2yZt+5aXyh6ETbKylRZCb8Ip4t/CKW+UVvhH9FV4V/xZ3gX+2uKI74+TuP
RyVmWdqviaPNhZ4GF19k0Cvh17EL/Mnh8OtcQX8I+jTQzYU/SR/hT0rhT04X
/idZwP/sAv9TDpdFFsBl7cQ6b8Q6JME6L/C7TvAzLfG7b0CHP8zaoC8Qfibv
g585E37mMeGXsjn80mD4pTvN0z+NORrDxacndmkfEkDHP1Tb96j17zUfd7y9
2yubFKT7Xl0OieZn92rcbyjl0iXhz5Oj8Of57wLhzyMuYPl4BPELy8cvsSIe
YRvEI00RjyB+Yfn4JQXPXxPP8x9l8bzsd+XjEcQvLItftEE/Af7vIB7RRjyC
+IXk45cvxfEfKgdJabtz1FNLz1TacWCG4aG/QeSDusxg9B0fRF3mwd2Lq8wz
stnMY2GXq8+ieNWwp30KtXLpwvBmsVs2FXGDxR7TbrWO5fu9d+zYsd2f2Lxp
UIWuhLJdX41/4hhAPf+FmTTRyqAzqAd1FPUgNkZ+LBr30h7GfWcemLv1EHUr
a/TVzkDdqpna58dLzxbzo6l5z4te+JL97Bm7mpiH05Id0WGjtYrJusuJRR21
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
hL/NNxAXmMDfrl9ntNGdDz8Q/jzVCH+e8+DPn/Yt75nwIJd7udwf6bDRjSe3
2bbecn8uHQI/CoIfsgY/Y4XfzvDb+QL89k/g5yL8/wvgp6tl/KFNTfJ5f89X
O7LC0nniDMOmix8n/IffAL6OTwO/IScfMoF85gD/cP6HiO9k+Icbbt47mjV3
pwE1139+CL5NKqFk8iuphNREfETbRXxEIxEfvZTLA8jqUJUiLmM9EZexHuIy
RczrLse87l6Y171GxH3UHHHfesR9d0TcRxdF3EfNEPcBP0kJAh9Cx4APSVpR
dPNalIS7hpdrnu8STlKbVjODylNl8SbfEvEmqSDexHwMWo35GO6Yj4G4leTj
1nARL3OhiJe5EeJlWR6gGPH+YMT7OeCnj+CHfcHPbRGn02oRp9P6+nE61Syq
i9PJEXE68gC8TeQBeAvyALL4+pngk++Bz3d2n6b8GZHLBvp600bHu/GoOeaj
LLNzaSvoWwWdDoPeR+BzeILA53Ax8Dnb39adB/aorjsP3APnYRnop3BOZPS1
iPtyRNxHKYj7QhAflQt9QrehT6oM6/QeZ0LvBULvQd/SMKFvSaZvmwt7Td3g
z6yGvT4v7CApCztIZrCDlcLOkoWws7wEdrYF1ukOu2+MdWI619lxugQ7bgM7
3kXgCVlH4AlJHXhCHYGfpNYCP0lVwE82gL0YDf6DwP/PtolRm1wKOG/Qx8EP
hn+icYa3Lz/9mCmL02k14vRCxL9mQp5cBnnGQJ7IM1As8gypyDNsFvE7zRHx
OyUjfo/Bd70X71EV70t2zv/H+aH/cX5I/vzoNxN44xSBv+Ig4K+qgOP1ETgx
ugOcWIXC5uWq0zN4wvTgTV9f5lB+VNiul2VpFJg2Kuiyykdq9q6Td/U7CU3a
Oll1lW4G7Q68m7LzrzcNsNvt7+4qoZ1WBSNO9cmgKyPLvseV+tLLnucfVqtI
aHOQwX4KzaDu8MM95fzkofDbb8BPjoaffA3rvBDrsGwd2e/2F7/Lst+V8akg
+GQ98PlE0Lkr+NcEfZVYh0eB/9VYZ5f4XXYH/8b43d/wY33Afzn4bw4/3xZx
RxT4r8Tz3vBvf+J5y/rr82qsL8cPy/h5Wp9/1gD/f8X7otniffFHvK8/Ap9M
+siHfEA+pLuSwAc2chfv3RrvfZw4JxSFcxKFc5L69VPfp9USWllxIuNunzRq
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
mKHyd1HVI+Lv+s9K5td9Vjbf7bjYxdQ0QOzieMyfvMrpfpclb9jK3/3Ch+6v
+cOhg38vTSmiuhIvo7USL6NliJd1QZ7RA+CEJwHfO+f8mCnRy1LpsP7p57OO
xNJzs0m+DknZdKpu57iJDRLYe73O+Gf+QezbI7vprZ4FZAT7JRP2ixvkSDL0
eRPYF40gT5teMVuk2+w6N9mZEzXqvgtb90p2afG+mK7APvKD/Oql2EeTrw2e
3CaLx/sUNwqzjOMxQw3qNR6Z/s//Vh9ypDnkSLFTzFGn4cE0rdPKA3Z3QniZ
WTfN+ROKqMqk4ROnWyRwYKJ946gZWdxp0MvUpTPSqNYjbZfW66L4qtmReW83
vOEhXZ/Q/Y6FtBT5swbQT9KQP3sWfrYa0E9WQj+JtFXlq7K5vuSrFiFfNaaB
yn9FW+C/Ku8s/isT4KzeAWcVAD+V498ZR1pMjuJbOw5VPX8njeM0P3ta3c6m
Z5JfwDWqS95EL+QXJIn/iibCf7UG/ivoe9QKeuB06HvlD8v4bTKep2D8WKwn
VNbD4VjPYtAriD+Nr4D+eLfs16iHar+UhP3+wX7vy345Cv66RdD3uiIfORPn
uQ36nhb8ludxnohPcR+sfxTW31TWz25Yf3+sfz78fr+w/htY5xbQu2D9u0Av
l2v4gzafomcdhry6En+f7u1bZVYprZja20necZH8RyrAvnrBD/kB+3LDvnJR
j+KQ1KOgk6hHMW+85INEV5Z8kH74X94PVfeNDOW+0Qzct7ny3+mg/Hf6hf/e
EPqnG95RMfRPQ3kXNFTeBZnhXTwrt+8/x22l8mX+3Yf7mibS2YXPzzu8zaLa
Z+fnZr5N5mtuWi07nctgg2pHP/popNP+E6r3wrkd5L2cwHvRh36YhHd9F++6
yx3V+6Wu9qr3S6vwfrW0VfyBumxQ8Qe6AP7QUfgJGws/4W/gJ7qoIzFC6kiw
BupIHEPeQRfkHawFX8pFneTz6AuwBPz5gtbVrxUsU2jOlTM/anhEklHjSdRo
daldLPyWO4HfaoLfJgm/5aqmwm+1wG/HnJD84vFq/NxI+DmHgJ/ngd9aY34j
1B/4gPoDmg9kfg/EL1IQvyCRO2QjcofqQ+40EHnK3w1U8pRbQJ7+ylLJZd6p
oZLLvAly+ahrYbh7rURavmjH2MsOYfR5X8qNuwvyaYDUWWJrqbPEcaizpCdy
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
n38+qPewEDguF8PuVWY6JfnHkOdZiwbV7TLo1ONit357M/mdjU+8pVMMtUOd
ZBf4vU3g914h87AyT1/Mk1Q/JaDrASVueMqw/+HzTnoaEbR9XPOmg2Yqfq2j
hl9fnt95aF+g2nouGfbAPNll6+NxOdTNywV9GOiaoFfvE1yhuE8OtbA81cdQ
O52z17abWdwyjI5Cv9JG3aT50K9gX9Ae2BcNoJceCjfNPHEzl5Lv9J/rfjaV
oiu3mv7TOoS6zxy34N7AdHo4p354fkgyuQz031FjUQaFrNBYvXlNEV2/PsHf
8NwVL6/iy72CPCLIfFHsEauYFK44/E7aieB0fph0c5XmtTRKPL7u4MLQTF48
6GbFrhUzeG29ZM3Xw2OpTeP0jrrrsjjoyH+9wkOT+aV1cuLoNyn0/mDjxo0z
cujtm/oDT2W8oFu7QoxWjkinyD8OzSNrFNAHkxq1qhvd8zJuk5ZxIzCZ8jA+
QcbzA4xvh/kjZH7ywfwJWM8yWQ+tw3pmY/3lZP3ki/V/q7PnYMLXOK5Q8DnV
NSyPO9tqbV0yLYYi2iZOsYpI5Ny629w3X8vhTUfH5jlHJVJLzVMGmx/Es6Zn
dj/HW6lssbrvmRENsumob+6c2YPu8fuPT82PWrjySz2DhlvSi+nr0/fdG5Ta
N7H1Mpef/xtJncvZDTwzPY8+p+r8se6RRS1HF7YzC3lLdtuvttnlkknzasaO
P5OUQ2ctGu1Z3vmJV8akei4mrTKoV4ztt0aHs4galZR7PvMtl+h0TZs6OpMy
MX+kzM8GmL/ic1lP4ifVeigA62mH9VeV9dNcrF/Zb77sl1Zhv19xPhpyPtQR
51OpzrVHj0d48TvNjO9jU0M59MmdQ8VXi2jM64jl5ercpt3xK4zjYsPpdmZw
q/e2RbT3YL0BLdYHUt5oj7Fa+9JoWKRf3tgxpe98xvCjk7NK9fLZLS7//ZFO
PRpe9fuil019HfwP38mIpZvORX2OL0yl1fPdd24Jyabz7V0/fnmcTA3c8i0q
L4uirD2fbxSV6oujttzzC3ieQo07rAvcUcXX62vikysWg0vtE4zXk/GcifE9
MP9tmZ9XYv7/sB4DWQ93x3pssf5cWT+PwPrbYr+bZL98D/vVxfl8kfOhYJxP
vaJVD3+1ZW60vOEBikmhkKxJzWoW5VEv3VkJn2e6GFbl05Y/wwupZ3rs74kG
MVRFxpOWjOc4jDcI6e33+88FQ/SfJz3UV7/SdVi3ezcuGjqnbjqufTGf6g6K
HvCwWQpVXtk3+qvrFcOBMzW2mQ3Ope16K7IWXUqn8pc6P+ra+JZh8uKlE0dG
ZJDhtt7OkWNyKO7VBw/dVncNLav/p/O9ZxzNqrAx1XVJISVV86+zw/Me6jf5
eyl1nKIwfrOM5+kYr8yfJvNzH8yvrGeIrIe3Yj1Xsf5Tsn6ug/V3x36VuvJK
PfkeOLdqcm7cHef2JcX2aSuf44bNAlpXPzuziK/1f++oPSCSNqVVazWzekyp
0rhuzvIr+fx4iP5a203R9EHeI/eW98j2eI/gS6zwpQngS1tXDclJ7JXLGS+X
TXArlXuWvavOmfwynKybzq14dHIOa8169XLZmnha3PeGZXrVFFrh1aRBR91C
yrQ5aPT311uu0+xrrWH9omjSnRlbD24q4sVO5d7WXHnFq3BYSGy1/RG0EuM/
yvhSm17Gb8Z3M+W7vBrf/WifU6nV4Vxad67xBK1DqbzncLU/9hvfkuGxm1Pz
9YMpodmN2nMnPub5tmvsk2oXU9fPaRVOdyrgz0ljPbPfxNGiEg/v3QVvaVnQ
B8cl7Yoo+5vu2HYXXvMZd8c+c6eHUkW32zkj8op4ZNq44fPcL3pF7Fy9LNsu
9N/4DzKezmJ8F8xfIvPzEswf8/KtW+c9Udyow71H9xe8oj+J2vvSS+2ivY6D
n3fRLqC8VVPnXLJP4BG3Jtw/1vc1dXZNvuYxLYeHv+ndbW3LCNL2yimqt7rU
vtO/PWr/9tL/3X/8vMQZYTQ68lKvAs8w+vnFZGXQiCJKnPLJ59Szl/yzZ41z
tp9DyaRuTIBl6b13Xec6U//VPT778sS+aVvTKezjzOYnuhWzQ9HBVctiL3hd
29ro/ibHYNqJ8REynswx/jvmT5f5qVovmd8Q6+kj6+G+WE9drL+7rJ/7Y/1T
nIbYGjUvoJ6nJ3e0OZhAif5JGdYDgujEs5wRLXxSuGmyQU7Rggj+Walhm/jN
uYocZ8hxToIc94T9NVzsL3KH/dV75iyfo8n53HXBhTp/fyRwgM3030ueBNNW
k/x2duee0oW4scM1m7tRpb/fPq0IKqbejqF3Jp0spGNDfx+73DScQr/FxU4e
HEq7G6T7O9Qt5P7r9+RWavWKh3ld/9g0KYaatzjccJR/Pk/8eDLn1b3HbHGv
b2ztnu8o77zUmfE6LXno1ZCHHtP/tvXuQ0Vs28/24H+bX9B+6z9rLezeUFyD
U73nfiqg6S8bvGxrEsp/coIHekZEUSWXUWs+v8uncb9da+u0i+LRHwI8vxrF
UK6ugTb3LeBGtSebNv8eT6NP7F6Y+SWIhvh1W9kx6A7NcYyb5RnlxiEtzVt1
zymm5PtVWptXyqP0LY5V5+5J5bZjkge90A4kd+QX/IB9ZA376K73vGVGD/Np
95gEHcf8eFpn8txpVame7Ojmbrz8QR71m+U9qH9MBG08fKN1dsskurKt4ueB
foXsNaKe6cczb3hgk7NtBsaG0TW3LzbbMvP4SbvP71o+8+aL46nO1+yUf/58
N/ipLGHXLx8ccGpFVhY/2u3eIi8wmE6mDrA1aJ9JNn/y1pTsKqD1loGfB66K
5d+8yeHWqrfkPGH4so8dSvmlS3L8vreR3FR/8ZfjS7OpvtPLxy618rjL/m3j
77VNpUvOO7rfXRFMK5o9+bWiKJEPNzsRtmdiNEXPOaR9blgerSjokNEstIBN
dp2tPvdZOKcdrRgY5BRJtiOn1XtaK49evVkT4nEwhfXuWze+/zqUmkndFYru
InVXSlCvY7WR/9Wupx7x76+r6nd3LdWzdxvUWulUSHUcxmf8tgniiVtTvRb0
S6dTB/q83XI/h2ot3nimY1o4W2sONIowz6BqfZ2qprzIIq9aA94/c4hl3xZa
HwdVS6Nbkdn7rlhkk+G8qgEbFiezcdtU3eNPYiilmt6yuXtz6bvUOeRBqHPo
jTqBK9/v7z7dOI7PFRa8+uqQwntMu/V/ObpU7vDjrOL3EbytdZcrcYnp7BhU
7JxVapcP+Zzc67R5MK+KamtjPD6daz5aGmy3K4fO22xe9vz7U05Y9fX71+A4
1tZaVVVfu5DuNJlxtFIPZ/q7bYHNjv3HKXFC03b3fxbTtVfNPDvX96KxWZc6
tfyZSCcLH/+0mlBAxWVxxf/w0m9nWthWupdE9UreJE53y+SgpwOm7x2fRllH
s5rUjg2k2UaVe3YNDmaaWUfn6Y4i6jjB0nxYViw3mNncekzPCDp9LedEXHI+
vVo2wHrvzkyeGxKZV9k9nP40Nrhp/yqT6pTti8St0BfJdVObuv7szf6/Ds/7
9NuL6+/4WOh8sJgaLWkfM+R2HLXJ6eT7eVcKzdF61XFt7xwatOBsfJvUJNr0
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
f95G/8QfpRrgj/JkH9HPxR79vD3nfy72wg38qy2xF4xfZS3xLE/k29+swwdw
TR1Yh6bwrazWfCsqFL6VaSu6T66yN0M8Zq8qWG5rpAqqeGtGUNcrskrXnSlT
d3aRujMj/5tYeGT6E5dcgl7ahPVMhy9mJnVn46k7M7goHtSdTafu7LOdU48/
2pemVqc+ybRbdVN9v8zuw8g9d+SvuY7uzoseS2bjoflCe55UIx6G+RQ8Gy+9
utfw/dAyRXw+X1m9+qEklTC3sW/+kGh5RL76D9QxHSZfnXFUFuMMZ5xRJd7M
iXN7rLwKe3UfPPeIsgnZ3f9C7wQJDXDosdI1Xcpvvnb6TZcoyfZoPCy5TZQE
gA8QQJ1dd97HTdTdHyCvuwJ53SnweP4Ej+cGeDyDwF2/Bu76InDXT1IH+iM4
JyOoA92BX8jwyHjgF5rOPo7X+yhmHy14L8qbesw/aZ9L+zTa44dfGhCS/kD8
Z5xr0G90ipp2sppHu+8jxEWfH7WO83Mq7/lREzg/2/jdN+3KF52aESNpsTPU
lQ6X1MzIQvZDLqXLZPQid/So39CLSuxY9CLl91Nq9aFf5qZV3SkT7o/e9fR4
lrTOVH2+GpwuJxsWWXmg9RVVrksF18s55yuE8xCr91F+YR8TLN/vzfdPfl/l
ZlazDJnY7/NF2WXDpf/1kmeL7s7RG88nOXZ5mC7uJ3ZXnRgVKS6Jbp0PfoiQ
203vbRgemp6z3+/Kba4RpZpsLRi2bViEXCMuUIG4wAXiAvgz1Tn8mT/gR9pO
+yXaO9H+xMLPXg75ZvwnRk/uiTzMor/Rqw2O+vP+2l89Cn91U/zV4+GFnH7F
6V35I3tOOsELWX34iRHHHybL321G1Fi/KlkFbU5qX3xHeM57udahfLtkmb+w
7sOR+x+owTGbdk7NipYFW3yvd3JPkWd3Xw5s822S+k+q/fui42KkB/duBvcu
nnsHH6Xy4XcNP2ZIUJe7L4dkqmWX9mX9UmapWhL4ymFsgZuSz25U75lLMlRG
hKN3oeb71NUeXYterhkjQ3n3/bH3l/Lu4AeQLbQvp93kfXWx5H2Z+YYy3y3M
dwPxgtPECzyIF9Qjvy4BvagZepHtTi1PRiBPgpAnhn9z1IL5Q759EXKyIfNt
f2vN38/mZEjr8za1glptVYeajlk3zicmd31WOMcl/vXNyZPf5O2vrP3X1szs
ZNchU/k/9ygftXGjKjy0RvGa824aPc28p6oa72kbvv8132/P90fS35n+Den/
L3kjE/ADl8Sv2/9/4EqZfIlxFj92NHW4g6l/uUL9y3Nwp4PACZwITuDlvHlx
YvLiDI/MC/wqQegtBvegBfgSH8CL+NWSZ27iXIb3IeaZ5t0w/Bq94ImYa+HX
SAYPcxO4xFXAwwwHP/Ocxs9UZcDP5Hyq1ZzDZZxDo3c95/sND86v+Ad+0v4B
ycA/cEbzC6juGrdKaoJbtRK+FQ/Nt6LqwrfSCr4YeChEwBEqCb9MI80vIx++
0PwyUcTN7ZBXBm+hDHH2z8lzG43/0IV4/XfE6w2eUix6cpZFT55AHD+f6Dh+
A/wM0fyuA/H6Y/zuFM2TJf6aJ0sWwpM1kfYA+LMW0F69eHybEy6RUsNz0Luz
M5LUab9KlwOnPJTUUuWdiv22IZdfcgbxa0fdX9XW/eUE/RlfBfK78xg/gXHA
K1bTGcc2u7Gft3+KfOgQ6FXyaKI6G9Xk9xo558zwScHjI8Xg8bnppvkaQk7p
/S13Tu/vz/BH/PNW728z9rf1duerD9alKt+Wx0dViY6RrX0KVPR1uWvyndRY
S3xtF/Gmt8SbfsIPZvTAddi5hrd9Gf3v4zf7jf7UsyuD21ONeqLd4Db4oQ8E
og9ER/ww69yPqVL1ScNnQT1i1Win+9/0vX9X0tBnOlh4ybuAYxxg4QMFh1+K
Y+caHP7V6JmPtJ6pDqJnJsFvFap5K6QkvBWG1yk/+ULJ5NuMJf5yFz9VT/xU
e3frvCDvyrqesQx5Qd9TN9pG142KqRcuulHzsDSHv6kfPCzF4Xl55a/5kibB
81JNjy8PLTiKe6lHKKZxHiSUeoRn4P45ajwK6QMexU7yju5il63CngogH3gt
cfaOxNm7aZwxidZ1VWJwxjaBX9RS4xeJM/hF4zU+m/TX+GxyGXy2T8D5aWTh
s5sCDswd8nVbkn9bd039rSXm73QdCq5OP/BkMmscWnWj/wHXgb/8929WLr5N
BfpPBH/G4PDcBrcnG/yZXeDPbACHrRXf35Tv34O9mcD6LGd9WlhwdON4923B
RakF3mD1nnnwBlUbjTeoUsEbTAQnxJZ9mcq+NNG8lvKN5rWUKHgtvak3/4Pz
k4/z84L6+vG6vl71p77+a3AAbmgcANUQHAD6q0n070P/wfAbPqf/V/RPXa/r
N4vCd1mB+s2WljoCsw7V8UeV0v4o1Qh/1O9+F5r/9WGNyZ8Rkz/jnzffRkzd
hOP5js7Jb1bn1mt0MvUai49+mDFonWstS35Rdfo3tNRlZObNd1IVyf+ZyPeU
JJ+nHt+TkTcfJjevzDFY2wv/OazthTHYC4Y/CN43uY18MDjMtfELBeIXIk6h
vHWcQk0hTjGE+NEObb+rEu20/R5LXGMS/cfS38RZ4nWcReKJsxi+nh7gWPqA
Y2ni3TH0T6S/B36DnfzuG/wGg+AHfApPkCc8QUfIY/yVPMYA8hhNHJO8EWXy
RmqQN2LPeajDeTieF4dWmbzKUMY3+H5+tF+g/3DafWnnvign7ksY96UScYQh
yOeRyGfOrXTj/oZzbpfd/K22/Z1U2dbw/J1px0LVmZYzZVDlxFx9u2C7EXsX
DfZxNfp2m7w4oiqbe03+tjygPsWF/G3yw+U2dWFdyQ83PC99yGPJTx5LmxtP
O5+tmKaUj9/3f9a5rsrXjJ214HyCZOTlo1Gf0z/lqEv1d3PSpPPCl91/W3Zb
+TrH2S/KjpY1ybr+60q2rv8aTN3NdHD+x4NvPA8c45VZ/5z++s1NVek/7udO
tE2S+80albrQ4aH0fPu+5vaGt1WrQE/H1TfjxfOCz6WKU3POwa7yZ281vq2C
R9dpuz0wXuVzb+CRf8Ejmcn4Y8FJNuNXo+5pOnVPntQ93Zz/V9nwJ+dUj/b/
jq5a9JwMmNbz+F8VssSO/hOoC5tC/74tpE3C0LtSce6hUa/TkuXaAZm1yC5R
ZhBH7ov/OQ7/s6lHwC8td2hvgX47Ff32W/RbNz2+qqTHV2GMn27RQ9agh5zQ
3y8d9fergXz/A+TzCPBPhiJvh+h1k9163eTDBL1uffQ6S1O9zmoy6xyg90W+
0PuiktiXH0vEVW/2Ici1eI0h7SMTHqrJ1Tte3/pjcq4c6IkcmIYciJyRNiki
x64Pfx2e4jYgVn4853msSY7+cWvOscIen6RK6Ir4Rl+qWLV+Qbc2/868J3d4
pwxusC/v1Dytb6gw6h+voG+c6Dpy8txP0tX4Nl/cqf7JFclfZv+IoJg4WTfX
179+7WSx9dh5+VGjFHlXKMG5ZPMICT996arnnHvKoXfXOglDQiVrzoXz/Xc8
lkU/1vyyXOXHanOA27xJv8ZIsNuyn+tsztkf9msWvHjN2a/WxMvs8PNMws8T
8uxJ0S2T41VEt3KtY94kyl7/A5/9tz7b91RV5XQ+RTb1+v77x+uuyB370ZHb
hybLAPgjyjwPq/RX8f2uhj/CT/dXi3R/Zfpf0+PLPT2+Wsv4zFfZMd9/mO8F
PV+xZb7ZzHe+nq+Y+f5p5os/6jz+qKL4o8z+glesjJzPfzsvvsRn4EskXE/6
1WPHYzWsS7n2s93vqI3br1atWOVabtxqI35dE7cKG1tggrd7pvTZ0yDn6q52
PZO1vcnl/ZEyjfcimPcim/fCyMmP6tgvW1yNnyHi+sXp50ukScbbDsFpb06p
5Q47yneulyiz4Ru6Ac/FO/IqIzUfvaRuuJAauHybq+GjT9o7JrnXvFQpdrn5
BIcWofLi58QlXoGJsn/CoiI7L8SqZlfbfTPN4bEqf8nDZkmVW2IHz46Vh2Xc
/9BLB+l9l6LsexL7/lXIzNHRc3e5rvYdXuCLHH3uYsXlM+J2pubc/498LvL+
060eHR8ddn0Jn0vjn2od2jlqj2td1+xz4T1uyfLe304/+zZD1lJf70J9fTr1
9W/AdXQG19How+9pb4CebPAed79/XrPs8xQ1YkXdT/P/ekWmuP80qmDTZKve
IkPQW/7U6yMuen3EjvVhndVT1rkr65yo11m9v/RxnZVZZ3fybydTJ9gNu8D4
lwp+1L83ujZl32/qfVdP2fel7DvxRzH8aBuxy6ZuO9uk1qEYNdmvl2uE/wYl
74o4p/hkyHnkT3705GDkz319nmWoPs+ynvM8hfN5hDjIC87nHr1u0kOvmzLr
9gb57IE+7IZ8vs86FLect0rgzrmjD3+KPhwIjtNF8L6egvNzGvyfaPB/TPvw
7pferp6Uo1/a2pVuFX5fFRtj7xu66Jok5n3HJZB33Fevj/ixPi1YH4Nb3gs5
b/gZ28M3VLCcPp+vOJ9jwM0eYMHNNnyj3pZ3sIDGD5QJ2JUHkfOvkNui5ZhK
RI6VJ+5JnFGlEWesRX33LN79ibzjCw/HzBn/+qKUKn/EZ/yn58Un8njhPsmZ
kg87sanlXhSgvYHFfjT24O/FMnL+O+Jq7MFW3Meq+j4qf+5jF+61v77X6jL3
+gXy2cwriXnZ7h0wrGLlXfLXrEdRPxzaKO5N7m2s+iRL1ueV8+o5cn7MZxqn
6I+7GqfoFDhF6G+qB/qbPfrbQ73vqiv6mw/7fg0cxb7Es5YRz6oJvn0j7M1i
2JvgC4kjuH8NkP/D9fcoD/09ynxPzeCP81KvZ3ycl5rCvO7iB7iOH6AV9x1+
KBmF3rgYvW7FLH3+azvpc/6Yc15sqbY3/+B+/cz9OoE87AJOziPk4eiN2t6s
s1bjBRXmfvlihyZrHCGxoz1jq74X12Z/vBfSj3uxEfwW8EzUY8aPIj44Qq+n
zGM9t70u0KFe6g3pkfVV+1sex1RM2FCfMwcyZRbj1EVuZzJOU+51ae77C+a7
D3nbnPeoDPK2NP6BKuCmOrFfSfr71Um+fwDfv5242xsdd5OpxN1GaLkhA7Xc
kNe/ablhcC1eb5t5obrPCtcDBteC+fbh/CxnvgZ3os3Nxqs88q12jQJ3wpK/
IdHoyW9f67qemuAkzMPudkX/tNH6p0xC//yndIs1kT7rXP/suT+olEu62lav
YKHCte9JgFJ9W/27xvVGl4fxq5tnqB1hT9IPFb1t3muVyXvtwHtt9KJtWi9S
+9CL3r+0nR60I1MON2mY/EOhc+rKovh3QTbXzLzUD8zrFvPKyBv/ksrEs+yR
S1Ms9sUg9H8H7IuL6P//yz+An1xmope2QH46MK8sPS9lz7zmrYkNXpiVKl2C
drxdU+S6qlvgu1kuZe5LIDytdhaeVnBFVBz1xcOxH1Pw71VEP3fnfWyHP3A+
+nk0ctvwdJDnr37iXLGeap9eT4lkPflO1U5/p9TjO0+i53tpPV+9Lq31fJe8
fgCZih/Ayodu8luy8tb3ya+0X+r6aWSd4oGu/4R8W6tTSoZyj3n46JNrt+Ri
3naZQLvlXIk5Vwl5z6Fs5hyWwY/EeVbmPPfArrTD7otk36/qd0q10++U8uad
UuhFB5GT7ZCThsctgrohw6dpqZeRaazPUb2eMg67qSR2kzP9nfCr+NG/IvKk
DvK/EvLE5J+44U8ozPvSXfsTJEz7E+RVDe1PQG6otxa5Yc6DuV/hnIfBWj6r
uhb5XGrq9gJ1z2yWzpOW+RbevF15efR0npadlaufN0X/rIg89MrLr6TMO8J8
xcx3NvPtyHs0FP2zJ+uMvqes+p6RD+Y8G/kQTD7wUPKBvcgHbkIebwnyeMPJ
47V50vJZrdUpKurIy7CRLXPWK8F52ZaV8TKzT4eVmxxyvnf/6VoOjglq5Ddj
w2Y3uyf/0e3qG90unrT3Jg+hBfmZ47FP7bR/Rl17qnFRhuKfCeFe/+Ov9d6j
3Gv4zlQA8Zep2Gve5PUVQ68ORK82fMTwr0kA7dXI33tWSefvNSR/Dz+J6mPx
nxj56Us+gD3ycwF2upHPQcjnz8k3a0q+WSp64Oy89yKX35B8A2F8+ZTxDb/b
auY7mfm+KnM7cmRwqnpUP6TBpkanpFnfwMW7QhJz41MbLHlKxv4dgr2wFXvh
u11ar1s1U+s/nug/czhXh7FzH3KuDtTaYf+6YbKkB/brcbNVigpeX6frm/Bw
g0ujwKVRjvj92rPvjvglJrLvV7GLX2n7SAKxjwxfXhH2awX7tQr/5FL8kyfx
T3bb13vaYq9M5WJT4PzJnPfuWdurMTYLIuVYiUjbjdceyrioaeemONxXtW5s
qvPvhlj5PwacZKE=
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{359.175309187291, 314.2324448657194},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-3, 3}, {-5, 5}, {-0.9999837659893945, 0.9999837659893945}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-0.17072014878332673`, -2.4768902335502325`, 
   2.2991018685005713`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{3.771522006959584*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot sin(xy)", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "3DPlot", "3D plot", 1, 1, "Input", 
        "Plot3D[Sin[x y], {x, -3.14579, 3.14579}, {y, -3.14579, 3.14579}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}, 
      "ExtrusionOpen" -> True}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{"sin", "(", 
                    RowBox[{"x", " ", "y"}], ")"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "3DPlot", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "3D plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[Sin[x y], {x, -3.14579, 3.14579}, {y, -3.14579, 3.14579}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[
             GraphicsComplex3DBox[CompressedData["
1:eJyU3XW412XyP367VsVa7G6MdS0M3HPsLta1A7sVc+1YCxV7bddE1+4WPYgB
FhISKiiIIH0MsOP3uc49j3l/ub9frs/1459znecZ5nXfM3PPPXfNLH/IiZ0P
n2WmmWYa126mmWb9n58/zXTy1Td2mLuXn4svsOltK84/ouWpFw6et+P1syf+
500OvOWs0eObjj5h9yuG/TRz4kc/0u/I2+8e27TFDv9aYGrvX1vgH/+xfu+V
P/yi5ek2PtMSP2a3L6ctc9Gklq3a6CclvvvZK3X99u1BTdu24cMTv//KLU9e
6fbWppna/r3YE/7KBYM7fP35wE6bFvom+L2FvuVvhX/i/yz8W54o7Un80NKe
pqbS/sTHlPY3HVX62ww/rPS35ckin8SXKfLR7uZKnsmXXMnT736Oaj3juv7P
Tkg5w98duPWf7jr7/RZyhm/13soPD3+uNeUM73noV4d+/PfPUs7w2bu/c/uQ
+caknOHXzHn5DfdOm5xyhr+1/fbbP7RW/5Qz/PJCn3KGL1j4p5zhd5f2pJzh
25T2p5zhE0p/m8gZPqLIJ+VcyTPthvzYJzo4eSZd/Hx27Kr9d1x/SsoZvuOA
F799fbbxKWf4oP9sfU/vh3o2kTN8yuT113n1o0kpZ/jfHusxxwGLTUw5w+9c
+awP3/z+3ZQzvGOhTznDvyv8U87w9e5sa08LOcM3L+1POcOfL/1NOcPJn5wr
eaacycl4J2c4+/T/4eTpdz/7PT3kziu+fT7lDGe35Jz+5v7B+/T6oTXlDH9o
vcX3X2H5r1LO8ML3rZQz/J5Cn3Ku+Kec4fOHnZMz/JrS/pQzfJuQPznDtw77
J+dKnuk3yIP/JGe48U7OcPY5ff+npTz97meXjtvf+PScrSln+NXhH8gZ/uuT
A//WceMvUs7wt9v8Rq+UM/z7Qp9yhl8Z/oSc4YeU9qSc4X8K+ZMz/LvS3/TP
8MfD/5BzJc+Us36bj9LPBk5u5Aw33tPuzW9hn74HJ0+/+/lg2C05w5v/OHa2
zqt+nHKGP9PG97mUM3zDQp9yht8fdk7O8O4hf3Ku2p9yhn8d/oec4XOFXsi5
kmf6Df0zv5Mz3HxEznD+k5zhxjs5w9mndsDJ0+9+XnXztAvGP/pOyhn+XBvf
+1PO8IsLfcoZvmnIn5zhP4f9kzP8v6EXcoZvFv6fnCv5pJwreaac9UO8RM5w
8zs5w81H5Dz9+H6rEznDjXdyhrNP7YOTp9+n//mvjckZ/mih70nO8McL/57k
DH+jtKcnOcML3Vs9yRl+R+lvT3KGv1nkI+5MPOSZ8aj2ij/JGS5eIme4+Z2c
4eYjcobzn+QMN97T/gJnn9oNJ0+/+3lm2D85w/8a44Wc4VNjfJEz/K4Yj+Sc
7YzxS87wbjHeybmSZ/pn7RLPkzNc/JnxVuDiJXLO9UH4N3KGm4/IGc5/pj8i
p5A/OcPZp/7AydPvft4dciNn+BUhH3Ku2p9yhk+L+Yic4YvE/EXOlTxTzr5v
fUTOcPE8OcPFn+QMFy+RM9z8Ts5w8xE5w/nP6cfztCbjnZzh7FM/4eTpdz8P
i/iHnOHkRs7wzqW/KWf49RGPkXMlz/TPvmO9Sc5w6yNyhovnyRku/iRnuHiJ
nHO9G/ZPznDzETlPL4+3Us5w452cK/4pRzh5+t3Pv0T8T87wTrFeIOecP2N9
Qc6VPFPO+Fm/kzPceoec4dZH5AwXz5MzXPxJznDxEjnDze/kDDcfkTOc/yRn
uPFOznD2SS5w8vS7ny/F+pec4XMPKutlcq7kmX7D/7MfQs5w63dyhpM/OcOt
j8gZLp4nZ7j4k5zh4iVyhpvfyRluPiJnOLslZ7jxTs4Zr4V9khecPP3u58ex
/0POlTxTzv5uf6nar2u2H1Lt1zVbv1f7dc3Wm9V+XbP1UbVf1yyer/brmsWf
1X5ds3ip2q9rNr9X+3XN5qNqv66Z/6z265qN92q/Lu2z2q+r5dlcybPlH8OP
3vmIA+fs5Wf3az7tPvu4cU3z3bDPe3O+PWvix/z25qJ79R3fVOLomRKfeO9i
B2133tCWn9v4/pT8pt7497U69mltebatPWMS37vfhd1eOG9yxAtjmuAHFbzl
h8In8W8Ln6Z5S3ua4YeX9rTsUX5P/ObS/vyefmi/3/184YZha/9plbdb9Av+
zmGDR/z29JTsF/y2PY++5+UXx7Qc0yb/bxLfZ/kRm4wdOKRJf+HdNvpjybc/
ac3+wi8vePYXfk3h31TG60zN8PdKe5r0F04O+qsf9IIOrl9+9/P9H5bveeDv
47Nf8ONXv+PQP04el/2Cf7VO8wer7tboF3xMwVuOLHwSP63wadEveJ/y3dQv
XH/1ix7YlX7B6cXvfm5w5Hrb3vXh6Cb9gh+z3sez3XJIa5N2wo8reOoFvmnh
06Kd8BtDX/QC/y7sNu0vvs9O9BNOztm+wLUzf4+fKyyw9RwrnDulaec2//B+
4k+93q3Loz9+2LRBwfP/3VTw1At8ucIn+ws/NuRAX/CuoUd6YRfGtf7C2b/+
wtmP3/18/LD/fHLyosOzX/C1LnjmT0fs9kb2C75MwbOdFf/UV9We9BvwfcL/
6Kfvkyc6uPb43c/1u+y9zB9DHsp2wpcteIvxAl892k8v8EdCX9qDHz1qD5wc
/H+47/rdz7mjndoDXzz6pT3w60MO9O7/8dv0Duff6B3OP2gnnBx8D649fvfz
7rATeq/4pz+BXxF2SO/wLmG32qnf/JXxCOcf6AVuHOkXnB71C06efvdzmRjX
xiP8+PAD+gv/Z/gN/U08/Ax94fdt5Zfg5h39hfN7+gvnH3wPrp1+93Pr8MPa
Cb88/Da9wL+p/Lx+mxfoC24e0U44f2W8wPkHdgBnP/oFJ2e/+/lGzJv6Be8X
86x+wee+r8zL9OL/mcf1C66/9AI37+gXnH/TLzj71y84OyF3OL1oN1y//O7n
9xFH6S+8S8Rd+uvv4jT6hZOD/sLNp/oL57f1F25c6xecXekXnF60O/lE+/3u
5z0RJ+uX9cqnV05rd9eoD3Kd4u/73vDW0l//1pr0/g73//0dH/Lx96lbXd//
tbGNfRL0l70wX88eLwxIevzP6bj+gfcMGprjBZ/OD9723tt/fjbXofgsdMTQ
jseeMTHtEJ81Z3qo9bE7v0q94HPj3it3fHDphj/EZ60TTrr+zi9fT3p8nOuh
x6frkVN7fnbusNxPwOeAn17f5IEbP0+9ox+94m1PfrTdxJwvc/1y3dw/Ln3Z
6KT3Xed96PG5acurv9um75c5z+FzXuGT+8vw1a99ZlzPr6ekveEzubQncd89
NPb9jDt8Pju+TT657oO/e8d62242amzaLf63Fjmn/8m4uMT5iaNfqOg37Rn+
XbGfXI9X9pnjqrLnXPdW9pn0lT2n3NkjO/T/2S+79T30tZ3nuuz8za54sXNj
feXvcPbs77+eP3RKn2GN9Q76T4YuOKm5e2vap7/3W/b9vV9bvEfaIT4H/37r
sb1Pa8wv+Gw9YK+xZ138RdoV+g0X+O99x30+Mu0QffsuL7y61HetaW/oOxT6
tDf4nE/vc9Bhj05K+4GfWPx22hv+fy78kx6+a2ln7ifg82ORT+4PVPJvmf5+
zEzpB+iRvPkNekTPz2gHnPx9Dx/68jt65/5+pzf6sp/j7w8/esRr0z78OOdN
/PaO/Rb6Rc8/0C965930i/6ZiD/p13f+ctG1J54zcWLqF/0dhT71C+++6mKd
H95sfJ6vwGu/oT3Od4xr+M+hR+Mx5RT+AY6+fdFX+qlcd4Z/zn2fkAd/Tr+5
/g3/T79w/jzbFzj5ax+90Zff0Y8JP+93f4fTo787Z9du9MYdPWY7bzutd59V
hqS+4AcWPMcXfI2i39QX/L7pz6ObK/mk/LVr6SLP9If6Yb7Le4TW3SFPcobz
P8YRPvwV+aNnz+SPnv3nfZGgJzf9Ye/s3O/oV5yt3/0jfxmT8vd3OPn77rVx
DkvO/t8yhT7XTejPjnNefgz9NzEuzJu5bxD6Ml7Qdwn/ad5MucW4Qw8/rMiz
sV88vV5yHPkuedKvfotP6Be9eCbv5wVO/vSLj/mFftG7T0K/6PkreoSzf/vY
+PRp+/9PdkJn/3vW+T9c7Lp+L6W+0P83/Bt9oZ88Xxt9jiP4reecfuk7iw5K
/4bPcqF3OPrtL7uhW9O0z1K/2nV8jFP74fiYB+k393OineKfSl+p90rOqfdK
Xxn/oL8y4kb6hYsz2ROc/esnnJx9j37oxe/oX26juzH15e9w846//xh6oS/0
Dxb6PNfPfsW4o0f0vUt78vyj6m/OI74jroZrl7ia3NB3Cz7sHy5eguMjXmL/
6M2/cPTm39wvDnr+H67f/D89oueX+AX0/Bj9ojcuct8z6I0j8kVPL+Sr/fTo
d/RfFDx/93c4/fr76WGHxhd8//AP8NyvC/9vfKG/vdqXq+Sc+wvoVw8/Bkc/
R9Fjzpvozw3/Ca/sJ/2wdoqj2BXceo2/hfMb7IofEm+zH/LDn53AxQP0jj+/
N/29rjFNxhH95v2csCv9h9OX9uGzZMyzcPRx/yrPx3OfNuYL+kXvvJJfreST
+q3kkOeP6N0zoV/0x0Z8wm9Uekn96ke/sl5OvwG3joZbT1tH0zv6HWO+pne4
9ZH5FC7eNk5zv7ca13DzlP7A6UX/4fSi3XBy9ru/w+kx918jrqNH9K0hT3pE
3zniRnr0/z5cpqyn6KWSW853+L9Z5Jx6wc+6g/zxt49hfOmHdSg5oxe/8avo
xXvGS+4/h982XuD8GL3A+TF6gbN/9L57eXWfCj05kxd6esnfg/68WAf5ndzI
n778nfzR4XdrrIuNO/QHxTrOuEP/fayv6bfSS+oX/TLVut737S+ZB+HiZ/rK
feDwn/SFXjxG7/rND9MjevMLvw83v9AjnF+ix4p/6jHPEWIdSo95vyjGC7mg
J39yRE9ffkc/LPY9/O7v8Onv68zU3DH2W8gR/eDY76LHSi/pP/PeU+yzGae+
Y7+Ofn3HPiF/mOfeMU7pHW59RL9w8TP9+q54m37RiwfoFy4eoF+4eYR+8a/v
N+Y5Rdg/faE3XsgLPTmTL3p68Tv6g2Kf0+/JP3D6quSc+qr0kvGMv9NXde7Q
XO3TJj28Okdotr8nnsn7C+G36R1uv6g6R2iO/b0c7+jtb1TnBc32Q6r9/2br
aPaDj/VUtf/fbP1V7ec3W3ewK3zEjewKLm5Ej0+sO9IPoBeHVPv/zeIW/iTP
/WJ+xAc9/8A+0fO31f5/M//MPnN8x7iu9v/TD7Cnyn6aqnOBtEO/V/bTVJ0L
JG6/iD0Ojv6Ki+Br/7/l3Mv6rpJPL3Ea+eCzRNghuxLH2R/z3bznVfkNePiN
tH/2bp8ZH3//d8wv7DDfwVX3+at97+w/OdXy0Y8bwt7YJ7x7yIf88RkY8S26
fPcUcYvfjbO4f5vjzt/hvpv739V+C/oesa5hh+i3j/hZf/WP3sk99RN6IS84
OesXvJYPPdwc6yntRH9dyM24SD6x3mf/8Hlj34Ccq/annnI9G/z1P99Zhty0
D163E35F9Iv9VPseKbdq3ZTthF8W+8b6yw+JZ+jFeDKO6FW7elTrVjh5ajdc
+/2Ov/iWfNgLO8Ffe+kl9eF+QeiF3es3+0cPpy9ygZNP7gPGvPpHvJsgd/g3
8f5Cv/I8N+4J8//8QLyzyHgg7w1V7+7ZxVVBj692aQ8+FZ702qud6Cs825f3
oKrv6p9+aZ/2aqf++I5+aR9cO7UDrj2zvjvm0V3OmKOXnyv9OGr9H35ubRp7
whW7r3jN7y3wrnOstPL7J4xv2bNNfz8k/pd993xw5U0mtBzXZk+jEj9xydNO
ev+P1qbb294T/JzfGfLaLDOv83tr0wNTJk8+d6u5muEtgy4/5sTVxreU+9qz
9PJz1/u+f+Yvs49p0R74nRs8e/lFnVvjve/Xib941W+7XvbdmCbtgQ87eM13
z5unten7NrmNb4LvtcxpXTd+fkq223f0Fx28/i78rE1/G3TzN5OTP/zXUz96
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
RV8pz4pPxkvou8c4yn3woB8RcsYHvfs85CCO2yLkz97wuSbk79xdvO/dvfjB
PZd3wq78nuuCwPl5fx8YdovOd7xzJ2d/l+eBnZgfzAv66Tv1fWO47zrHzXVE
zIPmEfz7hN9wfk8P/Bt54hPzV8Z5VTuTv/PonjHv82P4nBx+2LgSF38ZdmJ8
0rNxyu7h7JB88Al7y3m5os97nxmPx/yFLvNCRL/87u9w9unvC8S8Q4/08N8S
d+V8RE7mZf3Cz7jW/jz3CfsnX/hyMU/RH33SIz35Lr1rNz7aT+/wiENyHOHf
OeIEfPX33ohX6R2fMyKehFdyyLjXdyJezbgt7/tU8Qw+a0f8w7/pR8Q56Q/x
MZ/C0ce8mfeatMc8xT+il0eFvtDzM+zed9m/8Y9P+IHUFz7sjXzhYVdpB/iT
M7lUcsvx4LtvRzxPr/jX+kUfcs5+sevoV/or88PEmDfJOcd9+DH/v/IP6Q/9
3Or+Y64Yskvj3g/cuoad5N/DDtlJFSc3VXaS8bA4DP8RW81z4dKLfpb3COHe
11f200vcJY7KfhxySacHtvgicfTyoYkb4OIH+674rLH0hNcG7jIxcfR/jfcR
9lXRr1Do8z4Y/MvIq1PZcy/zvnkR/a2l/TmfwSOvTlNlz5kPkF9CP7HIM+ep
lE+M98reehnXafdB/69iD4lX69yUCzu0bqVH+hfn07v4Zbvx+x/R7fXxue+N
fqff797giLPGpZzhWxY85Zzn0t++8+NN+07O9SD8qXKeleO/Wpel38t3wzGf
Wndpp/VX3n8Ke/z97sHdRjz3VY439OJn8SJ8pb13WeSp/pPTv8GXK3jOs3Bx
Hf/ju89Gv+iFXGMcJa5ffy3jKMc1Ptbv9FitI3IdYp1i/aK/+PAz4grjb/+d
jt5vqQOm5L4f+sGxf6i/cO9c6KtaZ2W/8L8vxgu9aJf1L7lU6468p42P9Rf7
4SeGRDvFMfiIo7QTn/Az6SfZ9TxlXZDjtlpHZDvhz03t8FrXpRvxFnzFsBP2
gH+Mlxyn8A7hl7QTHn4s7d84mynWL3DjbOnI58YvoOf3tJ9dP1Han3LLc5aw
/4x7gs/mMd7hvhvjOvWOfvnwz3D04W/THtiX+VE78z1prEPpHS7+1/5qnZX+
pFrHpd756ZXLPmr6Zf6en/e79d3eMV6mz2/+dfYLfeYzD7slB3+/KeZBOPrX
Ij8bO6zWHclX+62n6EVcLB4mh2qdld81L/0U83uOn8DtA7Bv+LNhP+QLfzzG
BX3ArWdznWO9G/OL9Qh82oWLrnfxBo17X/5unUI+VXye7Rff2a/QHrj1MvnC
v475ghzh3luhN28Pmd4/5/pIPEnO1Tqo3vdutm/JDv0/8zs/Ly7oEHZb7Q83
21/iR9CHf6v3e5vtkxi36MPP5L1/ePiZnPe103g3j+Bv/4Hdo2f/5Iy/9XK1
b9xs3U2O6K2zqn3jXK/5vVofZTv8fD3iau/cxePNh7d7+f1LB3Ry3k1vq63W
r0Pf4YPy/YJ45ONiD7nOgf+zvHtKO7fvil6/4OIB/eIXR5ZzsVxnmSevifcI
WY8h1m38qn0S9OZx6yz4+KC3DoLf8N+nV95xq77pf+w31vm7jL9NIn8+OZIr
eWb9J/tR0X72zI62X2B4y4B1Jmd8U703z3MN7dJf7UCvPdpdvU9P/uQxvsq3
QM/0RU/0WeP0SY/4kyt56i89f33M+QN/nPBFvvdnR+zHvMluTyrncWlX5I1e
P+3fnxrfzffMEW9qJ/8rDmdvcN//TznPTf/IPuHGu/hwr3K/K/0wPWwcejE/
idP6lPsG6Qfg+ODrO3B8fQd//998vW+Zx/Ncg5zIR/+1a2zoJe+rBa6dcO3V
HvIlb3ImR3IlN/qjT3o0L5A3vZM7HJ9cz8f/W2fYNqN6tX8t1zn82LtN7Q/6
beWBue6GvzTnewuOemZ83kOCz138Xs4XcHFpxoWBi0vJK+/fxvyl//A4j067
0n79NX7ge5T9mYxn9PupoW39Tfsjb+tBOP2vv/p623+wRyOPKDnt3nu1drdc
Njn3J+EvDbvjjvEvNvww/IWCZ5xUnRvmvKM9+gVHv1f0i1zwpy94njd2fGeT
zqt8kXZSrTcTt960b4Mveut9OP7koH3kR27sH59DJuz9w7rdxub5Jv/nvaS4
Eb31CH+Nf/+yn596r84fM26Anxb2A9df9WLYOb+7c5lf0h/px0yvTNim4xmN
+zDozUf8CHyLcm8q5Zz7XhHnaB+cfOCZZ++FP7pd88mE9DPW69bpcPTaSb7k
Tc7ap9/6y0/h0y/kzA/ic13My+wNH/4h7zcE/XvVeaV4074KHL1xRA7wYz8d
Mf9JL01JO8Bn7ohLc58l6BfaoNsrn87euC9X8c/97qybVOKQnvQlXravqF/8
H7+HvlrP5r4Yv2gfDF6tl3N8GQf2l8ifX5EnhP9kj9uFHvkZfKy/2H/eI414
FV7tJyRe7SekvrSHfyN/7bFfBK/W6TkvaufM8d18vxT8/xR6zPVk4EeGPZAD
/vIh0HvVzuyXdr4ZdgtH79yQfnN9H/u6+sU/8UviD/jvL5fxyD/4u30DOP5f
Vvnb0eNDDvDjw2/A/b9Vwm9Y76DvHvvq7Lm6Z5hxDj3Yj4WjFwfy/9U5afoL
/eI38n586G3H8J/8ju/yP/SR9eaq+QI9+0Gf8gg70X84ueV9xOBjvQ+3Hq3z
EaFfM+Y7/ojd2ffLPJiB8z/aD7fPpv1wdut3ceOOMf/qT+57xXwNz7pjsX/i
/6PHh/3neXHEFfDM7xRxhbiq2t9If5h56CNu4c+ta9iPcZT3OMLe0FfntrnP
gN4+JD8Ftw9pnGc/YrzTH/70mO8bg54c9Mt4ivg57V+8tlfVX3zEIXD09v/F
JXDrAvM73P65eSvzXcX8ZV/Cd1eNecp8ho99ZvMBevMCeea+YPgl4xBuf5K9
ZdwdcSZ55XlUicOzPfyQ/Xb6ZV+rxb638QsPP5bn/rlOibjOeCRv+/PGI1xc
gZ49iivoXTylzhR5iafsv/Fr4jRxIJz/4/fynWTkgRgXcs73ftOfF6T/0l77
rtpTnV+k/Mk15Nk47wx+zh+1L+/JxDyOr/Hl/IJc6FcdE/2Bq1dSjaNch+Lj
7+ScdZcDJ5+sfxl45LOqz/F78Ut572H69W+OR/srv4SfzHpUsV5/Juqz0yv9
rD18yw4nrjQy97kyvjt6m5u369KoD57vIsMvmafxV49VPIC+U+Gf8RN8m8I/
90vzvWfZ58/9hMyfHfOXfBf6u3vJ95L7w+K7Dtc+88FZ7Rv5juHP73vll9es
NyHzjWSd5Mgbw87ynLTwyX0A+BOFT9qTdmp/1tsIPZC/cc4vbtn/kgWeef6j
9CO5nzl1sct+2Wx0rpfg6naxSzi7NZ7pc62IJ40HuDjWvp52qiuqX77/19Aj
POsVhx7zXnLIe8WIt8mX3uiLfult8UXn/nD9j8cmjs86Md7JF58to64x+8dn
9r6bPPvB+qMTx+f8eW9q2anjuIwn8Nkt9J7xSvBZLfQOz/rsld7hMS5yXZZ5
y0vem/Qj+Y457r/l+/zgw8/kffHp/V7afeYVjvaTG/p2RZ6JZ57e4EOe+KwT
daXJDZ9f+rTJM3F8zijyzH1afDYO/ZIbPsvEeITj83iMR/uE/MQFITf+Thzk
Pio752/MU3B81oh8RJk3J/zWyVGvlh7xaQp/CMcn/FWOa3z4PfZvnl+5jOsc
7+KOucq4zjigWtckPb8oHjAOzcP6y87ga0Z/yQtufa0/cOtNdph1kGM/zTjJ
etBhJ8ZJ7neWcZfjDX5e2An7wGetGL/sA/3Pxd4yfoOfHuNXe9id8as95s/F
wv61Bx51E7I9+LBb7UE/f/gl7YGLQ+ixig/r9zXNcU8px514xz4e/8tO+WHz
RO5nhF3x+/B2YVf6C486lS1VXJrtZ8e+a1xkXhjnpDFPseN8LxXzVBXfNlun
V/vYGT9bt1h/DCn1y3I9Y5wdX/J2pr7Rf1jygqY/yXwO5f1dtqO6J5brR+ds
V5f6NXl+lPm6ou6z8cKv8Cf6C3duwr7xPyrqF5t/0X922jM3H7vclzmPwJ2X
4W/cO9/hHzLfUax3/H//T3v8fzg+2qff5ADPOt7RfnKnH/qC0w+9kGPWhwx5
mkfobcuy3k+/ij+962+uu8s7vhxHmYcn4i782fNpT1+x5Gq/Nvxd5ucIOaPT
D99l33luGN91nuocoV3Ijbzgd0d/+S9xo/7qp/mc3PgX9OzZd/X7xNCLfln3
sSvzGf9B79qHn/bjC8c/83HEd/DHR7/1V7v1W3/1U7/1F32+243+0gf90At9
0A+9aA97cX7ET+L3TDkPzTgBv++KPeS4gC/1ry1WuP+i8bkPhr9zAf5B/CJu
Mf/mfdqIW6r7JL3iPkmj/kTQX1XumSe97/Yu+z9JDx9Q7d/muWTMF/w2XByS
+02Bkye5w3uUeyk53vT3rHIvPceLcYxePEye5wY9e+Ofre/MU3BxrPkXLo5l
r+yrc+St5W8zT1vZF81xCpd3ET07WafspzX1/+Evr13+wlzNX16+6C+/dJ61
13V9Fmg/9sbJGYfzN/W6G+78S9zPvnp+8ND9H2/ayMdLHuJwckj+EYeTA1wc
Tr/GQa+SdzTtAf2RZd849/3hK5V25jyrnQeHPI1P/uCXkKfxXJ2fphyNP+OO
HRh/xh3cd4078S1661njp7oHm3zMe/Y34PjZ39A+9NbX5i1/fyrkya/57mEh
Tzj9LxvyZJ+Z56DoPcdLrgdjXMP5m3gvmXEU/NLwD+jFA/ZLyae6f5v+ln3Z
34CzL/sbxgs7FbfrLz7idjg+4nb2g15cDUcvLuV3+D9+D87/8Xv8Jpz/NB6M
D+OC3ed5V+iRPOHiXnjGvxH3sityEoewm7yXFN9lN+TEftgNnP3oPzt6IfyG
fmZ+xzhnNK7xcY5mnGa90xiP/Ln5fXSMR7jvLhTjkf7Eb9b19JfnltW6Hj/z
xb/3n+OpPz30W8sGd9x++8Ibz9b81Z4Pf9Lht8Z9fvT2nYzbXJfHvhPcPGO/
xbiiN+PL+IEbX+KlvHccfsP8DrcPQP74OG8lX/ImZ/LFh5zJF07O7AZ/51bs
LfPqhzyr90fN3gWQQ97TiTikepfUHO+SUj7o+ZnqXVKz+/zsHr19A+0xXu1z
Ghdw+5xZ3y5w+4e+a762T4gebp/Q/oD51D4hPsa9fUL9NX+5d0Hu+mHdDdcP
6276ZY/2Yeir2ids3K+KdtmvhqO3X03O+mcfxjjP86jYh+FX4fZD4PjbD8l3
m4HbN9B+48N+PrzaH0s/rL3ONcileu+cdsVv2HfVDrh9V3jmEYp9V35D3HHl
xvse9Z81Ruf8lHVdL331zL1Wb+TzNw7uW/tv5988sVFXl999LHDxnvEqzmR/
md834iLfNY4PKd9t7AtEnCW+Yn/080vFJ+tnvnLDvKs8/lXuD+jHnx8cu9I6
YxpyoZ8Ff+11xCI3DMvxnHkNB4zof/BJfVO+xoX1GjzzrX777/UXXnN4nkcb
F3ufNft5h57QyGtNDtaJcHbaNPuUaZssOCTHre9Y98HJ4R8lP1LGCfzDeodf
/Mv11zT2++jttpcPGbnQTg0/mfmpSt7OjAPpZd7yPjrPI7V39YsfPXKZo75K
/wBf+tUdllrxwQkpB/p8KeI64wTuPfsXbf2f0vRgmx5+bGl9+caOr/VunKv6
/irlu4n7/pLlu+nX6P+oqEfgPkbmJYv2m6fg7aP99MquxO1fd/z9xOHDf8l5
ecMzL//y9TMa9wzZm/Fi/Bpfx4Wdk6+/Hxvjjt3ku8jBO+/3z6sfzvgHfttf
/nnZuE365f0i/mnwaktvOWLmQRnnwN+d+btLjnqxe9q58Tq86wnPrbjFyIyj
+G11JNmrcXF32Llxl+/Lt7rhpK83bOQjYw+3vHH5Hs+sNSjtk94PveapFf/T
3Mgzi/7uQp9+Ct4c4/e2tu9NSDt5f/Ch2x19XyOvOD1uE+OIPNn55JKnNHF6
uKb4w2w/PmdFe9gBnD9xT4N+S7v6dnLvIt+fXn3jiZcd2S/31eF921085fVu
I5KP9hQ99e2JT8arj61+7Y2bv5frDXiP1ft1v/qeT/LeiPZe3xZHfpB8sn9L
3Pva5m/2Tz55/3rDeRffe+2RGTezE/sh9G6cTYt6CnmvN+K7c75p323ztRp5
5/19j2i/eTrrGET79V8/yEE/8ft74ZN+E7+XCp+894L/akEPp6/Be30/x8qD
30+cnYwq+sr78No1qNAnbj5Z/L3dL52188DEyf/1Scdtet6VA5Kv9i98TbEH
fPO90d6lPSf373hkt9X+yPsJn2957rCFdp/Q0vmR7w+cv8/Xie90b89//aX/
wKbuf330uXvXfCPxWSct9tD2Ow1rOr3guR8wx75HtT7z3KctnWI9Ao96gi2f
bbbooe/90DjH+/bBZbY4+tmJLbuW7zbqfncctt9lZ7zR1O7N91866ICfk/6J
fj2Gz/XvyU0nlvYn/bg+rx699SG9m26ZOseo4w6aLffBFpvvmp9XHjay5Z2z
enac+a05Mr9W9zm/n/zD5j2b9Bc+6JPvf7926pjsL3yTfQ958vz7PmrSfvg8
m4wa/eu4KS2+C++7ypvb9r1pZBM5s+fDBgz58KTlh6Sc4d8Obhl31MjJ+V34
JX9su/eo/xlHvgt/4rp7B898z5QW8oGvOnzesy+88u3UL3/77srLder2t8+T
P3y2Nj32TT3CJ0xsw5M/fIdvHnqowwbjs7/wYx/vNuz5dQc2kbN4c/mhF237
0ZWjUs7wP32y3IpT3xrf9GXpV+K7rXDGDT3uGJ3thB/68n0zfbP0603sCt4x
4nDyge9U+KScxa3nnfbRmnNMHJ7fhS82pestB8w7OL8Ln/3Z9V/psv5TKX/4
h537zv7DUoNTPvAt/3Zk+2uvHZP2xs8Ufzyg061FbokX/9GvE33By7zUp9NC
hX/iZV55o5N+wUt88FIn7Yd3bmtX907aDy/xylM9jTt4madf6qlf8BLvvNGT
3uHFP/brqT32Icbvc+n+X88+okV74L8/0ybP9A/ws6Ker3bC5wm9aCf8hNCj
dsI7FfmnHVofrVPsMO0BPlexwxb2kHW/w360H96l2GG2H75urHO1H75d2LPv
mr++urnzvttv35r8c1+rjMcW4zHpy3hM/vANTx53ZOf+E1IO8N3LOE1/CN+5
jNP0D9aJOxW/lO2ETy1+KdsJv7j4pRx3WVe5+KVsD3zH4pdSL9ZfOxU/nO2B
/9Zh6i3tD5qc7YEPKf4525P3B4p/zvbAwz9ne7Le6ELXbDLygpHpx/L8tPjt
HL/OYS6d89Fbx2wyJe0Hvk+ZH7M9eW5T5sdsD3xqme9SL/CFyjyV84V9nidj
XvNd+PMxP/oufIWYf9Hrx2YntT/h2ZV6pfwvbPt/s/bq/fjK3619z4jkA9+p
12cXb3r+kGwnfMSD//3gui36Zjv9fGDSs1Nm2/6L9IfwRUa9vuunTz+av3/R
Jo8fWg57bkKvQS/2ze/CWz+4Y+95Lv8g26kf2u/3lMeSo1ZYYe5JyQd+5pDZ
J56821s5XuDfL/xVx3sOGJt0F7f9v9Et986yzYkrfvxF0sOHbfHFZq8u9Wn2
86r4zipbvnbdTi8PTL7ws6rvwv82023tuvV6KeUDn1L6m3YI36XIP9t5Vhs+
qKl1wgPLPzzPoLQr+KV/LNJl5fs/SDuHd7782aO/+ctn2U7/jxzIDb5ZtNPv
fvZa9/ojhy80KuV8ftvP75pOL/1Nenjz7C/cdXqPcWk/8HM+emPRrY5/Nu1B
e9kJ/vDJIR+/+zns5zlXvfOCYWknu7X1b6bmM17e5vV3j/oo+cBXKvpKPvCX
Nup+3gP7Nsav9ob95+9+nrPuETu/NPTNlOfItn7P2bzOF6d9NWixi5MP/LXj
Xtjh3Lk/yXE4quC9Zn111/e+X2h8k3gA/tGh73z93qTJift/i0ye7dUHmiak
3NB/MX+799b48tMWcQJ8hVcmd73hb1MSx2fkfn3bjZjYmvMd+lt+PG++Lf45
LuMi9LdOnfPLc3+YkHaA/t5Cn/KEr1y+m3qHDyz9aulb+CY+Z5FD4r57d4cN
Ou9+1+T/ox1FHuTgdz+fDb34nb96rfirHL/+/q9llzjsrblbUz7wx3YZ/8k+
G09MHJ91uz216arzfpXjEf1+n+5yz5XLj0i5wZ9+9+cFT3lxcuL4tFv1vode
XbQ15Yn+hUKf8oQ/UNqT653bAr+4tD/xC4L/Y7ct8sueS7c2kSc+8xa5pZy1
57ni/1POu5dx0euCPy16UPspg7I/8LNa9jz+wHnGJ06u5Ol39Kduuf2wDweP
T7nB99qkw50Xf9WI/+HzP7L33Nff35o4fjse+ONR573YkFtFn+tH+IGFf+L4
nL3Buvu8vNSkFnLrHPQnlnamPE8K+tvLvJb2jH/XlvPO/37I2PQ/7MX4Ih84
u4Kb79Y47IPjNv5kdNqbn8+Hf/M7+v59X37xqY2/TP/j73/f8ud3l7u9NeNk
+D8KnnLA5/7v//vzic+0pr2hf6N8N/0e/OGwQ/ZT9Tdx/HsvNlOHIQtPSjv+
V/H/LV8PKv4frh/GUdpT0C/w8Jtd31/jq2wffPZOl9x+UrvJieNDDn5Hf+dV
T4/ve+SUnBfg5mvxNrxLzGtw/A4JnDzR31H4J47+hxKfpJzRz1Xan3Z4UeAL
lf4mvnvwYbfsreFvin8mTzj/AxfP3DrntNM/er815Yze+PK7n31j3vc7Pp+X
uCjl6e9blPgh5QlfMeIKOD7L9psy66f3vZD9HTt9exL/V9Cf8Mzw4/dee3La
J/7PhP9kh/DbinwS992F9jqz3xIdWtNuLi3xUssvJb7Kdl8W+J0RX8H1e8vo
r9/RL7DQ408udfn9KQf8py7Yhqccro7/d97HZ80xcuitua7cJvYTLi7r4oyv
8LmltCftzXd/jPgQrl2nhd3q72nxfXauX6cGvlzoC352xJNXx3fxRX9mtF+/
/Dy44Pm7uHRskUP6c+1ZIuRJDpvEzzNjf0C/fPeAGL9w7ZwUejRezit6b1ok
9G5cwG8p4yJx7TIvGy/ojws7JAf4umHP+gtfrOApB/yXqvrr59nVfgg+/WPc
1fsPf439B+PlnKA/urQz8ZHBb4cY78ZRJYf05/A/F7klrl33hf8hn9RD+Cv+
GW4+glsXzB3+kH2i5z/JGX5a5Z/hB1X+HP8DKzvxc2qsH/2O/raYL/htf98z
5hfy3CXwC0p/q3jsu6YlYv4iZ3zOifmOfX5e5s2mlmrehC9T4oTEtUt8SJ7o
f+u63sBzZv8y5Yy+d8zv5IxePKB9FZ79x4cc/I7+84hP9Be+RMQ57Afes/Q3
8eRXxVFdQ67iXrh13HklLk07RH93xG/6Cz8j7JN/g5t34PiLM9k9euOIfODn
hj3A8ekScS878fPG2D/xO/pjIn4mT/wvjXib3OCDTv3m3PGffZk4PndGPM/e
Yr3QLP4nN/ijsY5gP/C1yzooce0SH5Ib+gXKeiflid58TZ7oF471EbnBj994
xaY1un6ReK7HYxyxG/QrxnqtWh/pV+L4kKff0f8a60fyhD8Y+2Zw/2+uWJ+S
s79bz7JbuHUZ3L6B9TI5oxdvZ/wd9CvFujvjtqAX/8DR3xbrd/JHz5+TZ47X
GI/kBv8k7G36+WXO5lnalX0JckFPPn73s0eRT+L4LBj7JOTpvG+VHZZ5fKsn
hqcfcN637P97H7VX7KOmnbuvssfe91829teR6Q/tS1wwqm0/J+WM/3MPz3Lb
Bpc39oHxj/3YxPGfMH/7Kw/a/OnUC3y59d4/7NjJ4zI+891eZb8o6X13Uuwb
V/u9vWK/N+c7fO6LfSc4+c0x4Jrjbt3ik4wztSfeIaY94H/2Lw+37Lfz2KTX
nsvnvPyGe6dNzvnCd7uMLftgcN+9uOzf5jyE/61X3TH7av/HvPlF8Jla9rWa
KnvrNazYW45bfBZbpduJV3Ro+EPt3HDftR8csXpr+j33PobvP2rqR6uNSfuB
jxy4yk+bj70wcee5veNcgD3YB/g49g/h7Ou1sp+Z4w7/VVbutuESLzXOeX3H
fjt63507zi/oEf36sT8Jt5+zYeD05btzPr3PQYc9Oin1gs9pxX8mjs8xxd8m
H+3pGPkP0cM/jXMZfJ1H//nrS3/e6LrGvpB7EQM3ePXFjQ4Zm3KDL/efBX+9
5Lo+Se/vr4Y8/Y7/b5+WcyXjDp+F117j1Gt7TEh5wg/vdsvLM23UmvKnR/v5
6H1n6nE/PrLaTA2/an9jypXH/3zQm5NSL/isufsRbzx4/qDUS57/77dFv1lO
GZjy1J7IR5TjDn5YaWfKGb5E6VfieU8mzunYv/bYD4drzwcxjuD4DHnlhW9n
2nFyjlv7FZ/3ad/vunf7p17cs7p0q5tX2OeRZ9JPwuecbdCkry4Ymbh7AlvH
uSR9oR+023/PO+m0hl78v2/iPIg84f3iXACe+2OBkyf6b4seU/6ZnzXuF5GD
/g4t/U35aO9u4cfYufsG230972dLLjQuv8de2A/c/kOvayZ+t/WdDfv03W3j
3ASecirnNSk3f4fX/fo++kUO+Ld23u7KL74d1zKjexTkmfcx4ryb3/bd70Ke
/DD+i5XznYwH8Bl4Qof7Nzul4YftV1zx79dOX2VgYx8c3vr4zvse9U3DP7OL
ncNPskP07/e66Y6TzhmVcoYfEedfcHy+Dbvyu3uezdX+FXzl2A+p5bZhdf+E
fN4s+2ZJv13s51wa+zn4uzfyTXUvAn5J0Bvv+P8Q53dwdnVXOcdMHJ/WuI9B
j/aRDinySX1dGfgHRZ6JX2L9HX6M3it95Tiq9Js4eS8fcQh7dr/ugWf2OvbY
zxv7bPBdRizTrdOJbyXu/smx5R5L3ntBv0rztUf/sfE9qUf4QgVPOcN/mu/D
xa7r19ifxH/dcn+mJ/2i36G0J+UMv7u0P/nj81ibHd3fk/3b75o95MDO7Wut
G/M43L7WmJAzPN+LDf9piUuXa+xT4d8uzj3ZP/7vhZ+E4/+PsAe4/Z9Xir9K
nDz4VXp03/OqkAN9wTcLuaHH/z9ht+jhQ+P8He67xhe9479Y6Jce4bOFPdAL
fHTRe9oJeU54Zvp7X+g3Cjukd3i3sFvji/zfCT8D16+Xwv/nPkDQzx1xCPz8
0Msb4d/g2jnwmNe3fv3qxjn7adPbT85f9D5rsbfE6f388MPwfD845uhfH75v
Svrh3H+LuBFu32y38P/sxP7kVouP/emdwY37Tu7Fb1qdC8CXqfwwPjvFPUDt
IM/b4v4GPO0z5kc4PrPH/UPyhH9U5qmUg/93bdw/gevv8xEXGdd5LhRxgvHo
vvwOvc7sPH5c475Z7nOGP4fjv1WJB/7X+2b4fFvFA+59TS3xQNJrz0pfHbPk
PE82/n/m/2w9bI4r95ucOD53Nb968pmXNvY/P4t9vGfjPg98gbD3x0eWuJ3c
8Jk8ZPk+R5z6ZcrN/lX/iEvZlftjC5d1RPp/+4eTShyecjPOxCfsDf3EKm6E
f1DFmfiEn0y5oR8X8X/qL94lfRRxLPlr/13rLb7/Css35Az/Me79+h4+i0X8
TJ7wZbYu8TZ6cnso5Iwe/03ivjH5w0eUOD/9cOb1jPVFxjGBx7op6e2DHRLr
RHLWHvdt8HG/LtazKX/0sT5K+du37FDWUylP7ZHHNeeDwGPdlHKGLxnrQXy0
Z8Oynk16+GdxD5yc8fnsjrI+JWf4m7GehePTtH2vrov91liXweev7p+7z3/T
POd23GixkSk3eOwbpJzJ3z0l9O4TTo579eSJ/o+315m0zPFDUs7mjYu+uv/t
HU4fmvLx3TnKvkHKGd4h9jHIDX5PaX/y0Z5uZb8o7Rk+Lt4daAc+M31Y9mFy
nzTw/rFvA8dng7LPk37Dfcj2sS/ED/t/1r9w76r2LfuBqRf0O4Y/N6/hf33s
X9EL+uUirqOXrGsZ+2nkjz7iwNSL/c97Yz+QPLVT3rDq/UVzvL9IveS6tucj
q33bpXFOhv9yX5V9zur9RXO8v0h79t0jYr+0en/RHO8vsv/wjWKfFr39xoNC
zuRpH2l83Mtlb/avwt5yvsy6AdV4sY/xdNxDJjf7DN23vPq7bfo2zkesl38p
81G2x/pumxK3pD14J7dGzI++C18z5lPfhW8ZedLYZ+YzLHF7fhe+ddxjx8c6
9JZzTr/0nUUHpfxzfXfBYjOde/m47Bf87BK/pd2K6/4W7xS0H/5+vGvQTvFG
57K/kfzh68f7Du0xv0+I9yZ5Dybmr9jnye/CH17n/bfmXmVyxjnwK4q+0v+w
wzVj/5w9wHu0K/vtxoV94PETy31s/NnJPWVeTv/DTtb5o9NRf/21EQ9nvq7z
1u568ZONc2F62fmJjVa5/NbGvTL4KWfs3e6B4VMyzrFOPOCbe9oNWLRxngtf
6fbn1nyy86j0yxWe8ofvX/gkf+uRXQPHP98FBh/84e3ju/jDd4l28pPi85Oi
X+wKvmPIQXvosXfITXvga4Sc2YP45Kl434Q/P/9UvP+iX3joN/ct/bwjzpXy
Hvzi7Va4Y405em144bChU39p3IPy9z5xngVHP9sT9x+16EeN+655bh/ncXD0
T251X+cOg6ckf/vqzh/h0z78/a7Nbpil1wHtz3u49+GN+Ar9QXHuCUf/1S5v
r3lRv8a4QL9QnLfC0U/6bIMrPlm2sf/m+/oL33e+EZu+Nu23lgfOnmfII0s1
3gOiPz3OteHod3y/3XY9rp+c7UEf5+PZHvRD7l/gkV+3arTH/u3bcR8A/m7b
z+9ber61w4h/LdW4R1rdY8z2oP983203umN0Q7/+rv3wU9t+trYstcnrR++4
S2Nco98j7qvA0ffs0nernx9rtL+6V5b2sUcbn5Ets02+fMpJ9zf2t9FvFPeC
4OiXXK3nPn0OaMT56F+LfRg4+pEfTlh2/c3G5biu7vsljv7ES4666sBXG+sj
P2+M+1p+v63t5zMtP647eOPXN70wcfsGM5d7bvn/P23Ty9Cmb+5f4oVzl3s8
7Yb+2QN8/rZ+TGh657nd9tzr7oac0X8d++dw9Ccssf4sz2/SuL+E/qW49whH
v88LF63Z56aJycf6et64Rwq/ue3/TW3q2P2tjy55amLqsbqXkviql606ZvVr
f2mavOPUV7c8Z0raTeon7AeO/oIL31h7rdcb563o9ReOfoFb7z5kg8cb9+rR
3xv3iuHo337qxalzbdXYl7Oe2ifuRcOHz9vj1FO6zNx8b5+jTt17cmN/rbr3
ku1B3/flwY+P/rQhf/QXxf1wOPp1Tjlz920njEn+/k5f8JX2fPb7AT/O1rzX
u0dtsujJDb2g1184+r/90POe/uc03guIb70vgB9315tnrHPdXM3nzLpft0W3
HJ3tQd8j3kHA0Z93zPAl7nm5oSf0q8Y7Czj6Zx9Y79T552icj6DvH+874Ogf
PfvFi6Z837Cr4wveK9qZ8yb8saCHm3cu3Wn521a6e0zGk0kf7YGjf7rMUxmP
oT8p+jujd9wzuj8wo3sCM6InN999urQz5QMP+WT8U8kncf3qWOb31PvKxU56
vfTOE0dfvHvD/8PvfbBLy8OPNe4rwrcLuyIf+K5hn3Dz7Pgyzzb9b3Koz+XZ
G/7/KPz/r/P3jeL8fUZ82MOIMu56rRTjDm7+vWG1rosc2L7hl9DfVfxA9gtu
vMPxGVbm8RwvFX2u1+APhJ+B47NbiR9SXx2KH2uZUPxqth/er/Jv8POLX811
Afxf4W/ZCXxi+G16L+9rprasHf4/z02mn/dzvXN64EuX+CHbuUiZd1p2i3kH
bv7tWubfxjvJoI95MOPbjB9KPJDri4WC/t2YN40XfDqX72Z/qzgk5+uvynzd
8keZr/O74wIfGfM4/KaIB4aVeKA65+rZs8f+cz47vt3DPeE7xjrlhzhf891j
Cp+mluCD/xGB3xnxBnx4xBX9o53Tf/fZns8v1POwixe5J7+7XqxfRsX5Drsq
93VHNs0ScqAX+HERF8HFD3uHPLUf/SKhF+2E/7pqid/oa97gE/pK/1Z9N9df
VTvTTk4o9ta0XNgb+4SLS/lV+KuV3Xadnk+Olz4lfm4aEfEzXFxxcYwv7UT/
WMTncPRTYvwap3uX8d60S4x3/gQe/iTxKt5IP4k+1hHZTnjnWI/A8Xko/Bv5
o+cPtR/+VKyD8j5H8fPNE2I9BReH7F75bfu9cW/qf91fxX9SNY/U+6gz4pP3
2oPPtFgn0jt831hvwrX/sZgHyQH+VMybxlGnMs82m2eNF/FMxCdpn+ifinUx
HP0TMe//b/2t9z+r+KQ54pMZ0hsX2vN4xD/kAG8X6312Aj8j4ivyqeSQuH5d
FPEbuYl/Zu9/YLsj92zc84eveP2qP67+dUPO8q19/O7pC/9rz0Z8KE9X144b
rnXtoMb8Iv/fh6v1P2rc3xv3hPHf+pwPuz98amP9hc+NrQfv/8liDX+CT68z
nnnszZ0auPYMOvOpSze4vGH/6H/9+JRTxi3buL+E/4rHrfnSL3c04nz4agVP
f4XPm+W7KU/tn7fILe1Tez4t8sl+ZR7CO9//4INrG7h8YLO+tk/n2y9rtB9+
+cPjut+1YsOfiOu+LeMo/Q/67oU+7d89va9nO7zfqgMa+xjymM2166UtN/Vu
0MsfdWjPP+//2BmNeAz9qR13uOv1LRpxl7hlkVgPkkPWHSv8007sW346YOUl
x83c4C/v2VvvHjX+r6Ma46XeF633z6+K/XP2YH/70SXPfOzjpxrjWhxyUqzT
85127IseffYhxwy9rzEPVnjyNw9+Gvsb+NhvPDbo8YEfF/zpUV61N6O/7C3r
b0T70ctP9s+QPznbtxwc8sx3iJEn7PDQI3p85gm9k3/OI2FX9CtP2hVhV+wN
HvaW/hw+c9iz9mSdjcoO5eszXnxXnrGVYjz6LrxDjN+MZ2LeuSrGF3niPyD8
A3p87gw/Qz7ww8OPwat2NvbTwp/zA+wEHv4t7VA+wt7hT2Y0X+gv+rk/KX4s
93GC/7bhP/P9VdC/HX4y99mCfsnw5xmHB75A+H/0+Lwffht/fi++m3Ko7Cpx
682N/t/nob3iPDTjSevo7ju0e2vyIQPr881ecb5Zn2P2inPMlGfWA4z6WfQe
82Cvxwv/pup8sFecD6Z/tk48c/SW4956orHONV+od0w+1stblHV6yoEfGxT3
HGZ0j72+j31V3MemF/72vbLezP0968TWzhcNOOnLxn4d+gWLf85+OU8cEPeL
Mu9J+MmuxU/mOLUua//vnZaa4+6JqS/7ul3jXWeeX8f67h9PrnTb2qs18gvh
0/2az245fGRjH6y695W4/dv5y3cTr+6DZb/4513Kd1Nu+H8Z93jh+F9U2pN4
dY8x++WccVDcHya36l5Z6t165KmyHkn+zpUWivcI9f2cu+N+zozumfguvz10
wMErXz16dLZHvPp4vA+q3is1x3ul/G7WdYo82+wHfby7ye/C471Myhke719y
f57f8J7I+hTeI94HodfeFeIeAtx+2pvX9rr9j0Mb74uNo58jT5dxDZfXSzuN
r8mTl9x49J4Nfwg/edEL1+9x1Oepr7T3eO8Jr/avZnjv3TyedRsj3xrceJT/
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
Y58En/nCbtkVP7ZQ2Akc/03CTtit9XjUKU65Wf8eHeNR+/ET58PNO8fG+ijf
XcQ6dK7wV8YX/7lt+Bm485Tjws/oL/7dYr1GPuhPCf/JfrJObvhbdoL+6/DP
eZ8z2rlc+CXtsc49Jfwq3Lr4j3JPJnHjujn01cjfV8bXgREPa6f1y7OxXtDO
0bF++STWBdopnr8n1lPkzL9tPvPBu15z48j8rnH6zCJ3XNl3yca5oTp+rwRu
nhL/fFHeb2ac41zgi/Cr7EA8sM7hXx265d8bdVL095i5Dz6x/1yNvIjinw7l
PnP6PXHU9+WeQ/ph91vGbb/n5Tfv3bhfx++tX8ZL2gl86RvOveSsd//vfbZp
1T7bjN4numfyRXyXHMRjD8c8op3s54r5Hx66U5/Gvq66jWfNueD3u13a0Jf5
bugst/708jWf5Lg2Lv6yygGn9lmmX+LsduEBTw3p8VqjfhB/fu9hRy0wao7G
/Oic4tMTDnph5m8/STmT5yzzr7LZRcc31qH8xuKbtb+6325Dc5yTw9fzFXr7
SOI3+dbMj777/P4vdt7i1I9yn8R+yLWfH7DsGz8PSj70Ls8AevuxJ2982V93
PmNAIw95+L3btv3twIO/H5D7WvSyU5VPj91+f8O3M29+/uDkY333+wanbrLg
D4NzPNrPGffM1Wf+MK4R/7OfMf2bd3jows+z/f6+V+Q9gDtnuSzaD8/6h9F+
duIcoci7T0/4gzE/9jjl7XleWqN32hW/0WWzhX/9yzKfZn9999Ty3cTp65zx
n0677KeGnI3H54q+Uj70cnahT5wfPvC33sMG7N+oG0j+2/19vgnffDMk+6Ve
4VWbvvHCEn3fyzyY7FGeT3KHy9PIvjN/UsRF5DX9/bt+negJ7jyUX8u8rbG+
E9/DxfnuteT6Kd7Fayd/4J27uBAun6H2w+XNs9+UeLwT1688z4k6cfaDMh9P
vPvWX7jz7rwnEbh1MTlkPYrw81m/KnDvc8mB35IfVfsz/1PUcct6dYGrZ5fn
6OEv5UElT7g8meSZ56WRB4A881w6zk/t02W+56jXpp1w9QGz7l3g8o+RM9w7
evtlmc8s6sqRP9x5EPln/td4B03+VX9zfQ6X98O9EPhZa/Ye0eWcMWmf/Ir8
seQDVxdSO+Hq09GLcex9Pb3A7W/TC9w6yHfh6k7SS+aDiTyE9AKXN49e4PK2
5b0l/COvF73A5ZXSX7i6e/QCt09IL3D7gbnfN7188h4PXL4O8hRfeC9GX+bt
y0KP5IzefTZyhrvHS85w92TIOflEPkO476qnSf7o5Sckf7h8d1mXMX6q8wjH
X51HekEvzxUcvbqK9IXeeSh9wZ2H0hfceSV9wb07oC+4+6L0lXlw49yHXuDy
4tJL3iuPfK30AndPifzh7imRP1xeR/KHq+NJznB1M8kTLh8aucHlpyK3zK8W
+ZHIDW5/m9zyvlL4f+0UN6krSp7mf/emyDP3reO+GXnmPYjY9yZPuP0K34WL
l9gPXN4ScoDLo6W/cPmL9DfxmPf1y7pKHcmsExy4+3L0nu9v4vxI++HujdAj
XD6W3I92/yLyTdn/sp5T/9G+M1zeYPv74hl1G91DNV+rn5h1BwNXr9D5NFy9
PO0xv+xU5XeFrxzrBe2BqxeJL7yu/5j3GSPfoH0ZuDqG7BI+qarPWOWhzX7B
naeTj++rI0k+cHUbtQeufiL6zEsR+WzpC66OIXlqr/ML/LNuQtRhlLc93xtF
vn378lkvIupHyLeY96eino79dLg6Js5R4EdMWueQb675PPPdi5/VPdR+uPp9
2pPnZZFngD3A1VOTjxj+700OuaTLv59Lu836gVHvRr/ynCfyZugXXB2Wk6bb
/5yt10Vxn4Resm5J1IljJ3D1Hcgh66NGPUf9zTwlUQdEv+Dqo2l/3vuI+kTO
w+D3Rj0UeoGr96E94nl1JDO/TODqIZI/XH067YSr18YO4er+kHOug+L8UTvh
6o+QZ97TifoX5MYfqDOoPfm+Kur7yIMMV/9Le+Dq45AnXB0Zcss6J5FHgtwy
P2XUN9FOuDwb7DPzXMZ+tXzKuV8YfiPv2QeuPpd2VvXd8nyx+m7KGa5uCzln
PbWoG0Ke/J46etoJVweNfcLVycJHPNylqlOWdcSqOmUZb4c/Jze4unL0m/s6
UX9N3bWs0xX1y/hbuDpl2g9Xz4u/hi8ZeWszHgpcXaqsmxu4ulTsBz/1VdkJ
nL62qeJwdeL0F706cZtUcbh6avqFXn0x9gNX54idwBeu7Fm/1d/kH+DGEb3D
ne+zn4w/I35g53D13cgzz3tjXBu/1XezX3B1mowLuDpN+gtXh4i+8h1S+B/9
gs9V+bfMIxR+En+4ukXquYon1XXNeqWBuyegfmTmh4jzJnUT4eonqg+X7zni
PZG6ZXD1y/JegvO9mI+0Hy6/Gb+R5ydRDyjrDUccYh5kP1nnKubNrEsXuPp0
5AlXX0x74Oo3+a54WF4g/hmuHha7hatnys9kHdSIf7QTrl6edsLVOyPPfL8b
8ZX2w9WZIk+4ukjWF+Ir7/6sL+DdI/533gNXBweedaiiDo51Fnrv6dh55sGL
PNjWL/DlYz1iXMPVfbA+hXtfZl0Gd+9L3JV5/iKPq3UZXN0f6zK4d1hZfyj6
612kdsLVoeB/4PLw8z9Zjy7yn9NL3jeJdaJ7DPluL/Kp0hfcvVPyz/VXrEON
F/GPOkTWv+jfjfWs8y24ui1wfNRtoUf03i2SD1zdjcx/F3zUN6Ff9O4lWrfC
ve9zHgaXj9f4zfzTUZ+LHn3Xe1XthKsDQo/wMaObh62152c5fuHqHdCX76rn
BRePqOdFj+gHxT6J8QW/IfIkw/FRH4re0X8b+zDOY+DqHMHxUeeIPaB3j5d/
Q6+ekXENV4/GuRE+6nTA0avTQZ7o1XdwDwOuTgQ89+ejToR9mHw3H/tm/Gqe
C8R7Iv4z6zVHfnLnUnB5zuGV3PJcEL283PBKX+lnqvOOtFtxr/eY7DbzrsV7
T+MavXNS8kSvLgb/A1cvgHzwkfde/APfM+q5kFu1D5P+HH5o7JPbh4TP/mzZ
V3dfB66eDjzPBSJut6+FvnPZt+/ErlIOUb8DnvWgot4HP4P+9zgXYFdw9UHg
+KgPwi+h7xLnDu73wNWtgOOjbgV7qM5ZMg5Br05fzn/OBSJ/OD8jbpc3j/1U
5wg5b8HViRPnwNWJ43/wl0eOHaJfIM7ZMw9shfM/+HhvyJ+iV7eL/4Gr21Wf
U6jPNaPzC/7KemSLsP/tqvWRukvsJ/NARF4y9gBXF8Y40s4PqnoucHUi6vMI
90bw0U71I4zHSp4Zb2c9isD5q0rOuY7IujexjyoOhq8XOD+Gj/xR4svKDjP+
hMtLb76u7DPjUv39Ns4lzY957hPnmOwzzwvCb7Mr9OriwdGriyeeQf9g5BWH
o486HXmegv7DOLfll+BHlHPenuwn18UxT8Hxv7ua19CrH5R5uoNe/aAZnWd5
R4GPui1wfNRtMW+ifzzOwd1bynu+RT6JV/Jp1MOYXl+NehjT6yVxfNTdEJ+j
nxrn+OwQrq4EHB91JfhV9PIksE/06hrwt7muj/qk/Gd1PpVxLFw9NfNv7jPE
eYfxm/lgog6LOqaZdy3e5fG36J9+aaNXjn5jXO5DwtVl893c54+42jyV77Ei
Dwb7yfv1cW+EPcB3LPc6sn5P5q2P8x16Rz8s7qvQb+Zpjnoo8KyLEvVQ6D3f
DUd+DHqEy2vBn+Cj3gR9VedrGa/yc+oPqmOHXj079bTg6mqJtzOPZryzE//A
vTuzvoCrfycOgctnQl/57i3eT9ELXH4S8od/GPeayDPp4x6U8QJXPwXOr6uf
Qv4pt1j/kjN6+XnEA3Dng+QPVzeTfODqAFp/ZR2t2AcQx8LV1TLvi4+8T+S3
4d79kSfcu7DMMxLxi/qzcHGK+rP4o/+61NdIuVX3u3Idneu+8J9w8fmj4W/Z
Ffo/xfm7e/NwdUbg+Kgzwt7Qj4/7APx51Z60K/iQuJ+gnRlXRJ4334WrYyKe
h6tL4rtw92P5vcrPZ/yZeSlincUPoFfvA45evQ9xsnGtvgw58zPeq9IvfMu4
F0eemScy7tfl+5/A1eeC+676XPgbX96HihPYpzogcPG7OiDihKwvF3U94OjV
9dCePN+PuhvwPCeNuhvWL+xZXQ+4caGuh7jOumbWSeVeE79U4bl/RY9PxH02
fMjzibg3yK7ynnt8F07O6qqwW3JWtwWe+QBCDuSMXl0VOPr9Kzmjb1/pJfP1
hh69X8p9yMgL6n4tXH0N6yC4+hfe7cDVvxCfwNWbkH8Ert5E5q0IXJ0C8RLc
frh3C+lXI7+6frET9VDE7dU5cubfgatv4n0RXN0N72qyHkvktcY/77/H+Qv+
cPVQyBmuLgk5V+e5+a4Vrm4IueV+Y+QPty6Dq6fgPnTeh4k85/RlXKj3QV9w
9T7U24Cru2HehKu74R04XN0NcjPu1IUhN7i6MOQGV5+FHODqUJBDdS6Z98Lh
8sa7/w1X34EdwtVfYIdw9RfYYeZdi3zC7AouDzb5w9VPIf+s5xD5Rdlh5s+O
/KXik8zbEfcZvNeCqxuiv5mvLuoI6C9c/Qj9zbpSUa9B+/O9eNxL0X64ei7a
D1f3hB7h6oPQY9YBjHs19Jh+NeoIaD9cPQvth6tn4X1p5U8yLwZcXQb5E+Hy
/8tDlHlMI3+7dy9w+ah913ynXgb7gauX4f1Jzr/RX+MCLk+4dsLVI/COMc+D
Qv70lfeCIt+7fmX+7EqPmWco8s+Tc9WvzEuS93wij7f2VH4188LD5ZMnN/O+
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
8VEP5Y2i98TXOmWnPy30YWuLewJZL7HUF8jzZXJWF+b5cR/9fPXqjfeMn3Tr
f/yvU6fkfJdxRdRxUG+APM8NPRoX9LLvvNd1fGLOl9KPwXfvetLErZ4YkPff
8nx88T2al1tvaPqrrOuy0I0ff9nj0Zwf897vlLF3HHLkFylP+DK3v7Ng36vH
5H4veS677z4n73n0mHyvrf3lXkufTmfEvgf600s+/Jzf4TuWfPh5jpb7OSU/
fE/naHmPKPjwD/BDgw//8/9VdsasUQZBGG4MCIIJqVJcp42lBCFNCJZBUCLY
WFpImohKCDEHmkJjo2AbQWsr8QcIhqRJEJtE0UoMiIV/wFbwnucNjgzB8t77
2N1vd3bnbnf2mXp/3/MC14ENePv6KfXXI87/O88vLH8Rnv+5P/W+jX4DTr56
7sGN9JyD+F7bp5dOXl/anfP58LLWx6Y+jx/xB8LxWLi58+rBQfaj1N+Tr8H3
VX9GvoBl3j9cVjh7lfN8Hs7zc+zJ9pun9Y7zH30TjuUCvz/Uh/AYfzBPMr7w
D7+xDqrLtbvM+qu+Dhcu9yvQN0btyfzJ//cRh+pYnnbO69E73jXlpx++wLma
YJ1Sf8N984f0r/oALsct+j8cY/JNdHHRXTzzpcLN+AU3Y7pwMw7hZnTxxl08
cL1/+pT7px1XpONg1Pun5js2n6L9cJv/+x1nuOMJrxR7XsOe/5cbbPm28yf3
dnMOgX4KLnryvLjfA8d7r9jJR+zkbpkvL5gvT4qdnMFOxotdrWJX4XEzn5gv
/3A4z8LD6biXttv3k/euXvlv6r7HJ/bHco5F/R/gdcQOCv8n8Xno8p8rJwde
ylGePvcViV/qODYdpzT5kR1f8g7YHr8fwAuKfyr+Qt1yDtjfq5yWMfaL1H3e
OBM/Oz7aT+K8Gf9lxj33urFfOQbqif/Ebu2f5CHnPnXydqHX8ar3rDteje20
3nus8+F38/yQ+Zj3R7f/k8+a77UTy3d85vEL3xs/cqX4i/v4i+oXWLdTX83D
Uv3LY/yLz9c4OudJGd+UU+w241XjjqzP8vZZN/7O63di6xH+t+NTZfyoZ5Zx
TJwW/WT/bBb/bvlfG7/c8aaSD5166/pgOc6XcFHp/wus/92+62TxFzMlD6/1
v2Rd7XhQV8vvE+12pfjli/jlnL/Snmvw2X4D0Qat2A==
              "], {{{
                 EdgeForm[], 
                 Directive[
                  GrayLevel[1], Lighting -> "Neutral"], 
                 GraphicsGroup3DBox[
                  TagBox[{
                    Polygon3DBox[CompressedData["
1:eJxFnQW4FdXXxs89Z2bOmTwoiooNJmFiJ6Jgd2OhYje22IliY2KgoihiJxiY
GGBgoWJid3d97++++/98z3PP3Wv27Nmzp/Ze8a61Ft794C0PqtdqtX2rWq2h
8nr9+08VgztqtSNbtdq8Ksc1a7VjRc8v+lbRo9Na7UPRR6nupqJW20/HTch1
rH5biL5cbW4QvaXoJbX/Q/U5UL/XdcweOmYOlVepzezq5znRu6huabU7SO1v
03GXZrXaWI2hpf1lXKsV+j2vdsPUbh6VY3Xs2mp/ntrPUnmzfgeIflPXME3H
TlObIWr7vOpHqn5X1U/S9qqqf0vH/iv6JdF7qVw5qdUGaWwztP2gzn242r+o
47rr3N+q7jS1yXX8YLV5qKzVrhW9k+iHRY/Uvh5qc4/6PEf0wqLvEn2+6J6i
7xN9k/rchvvL+du12u26lg/VR3+dd7zov9Wui841p8pruG+qv16/RPvmVv2/
qr9Mx95aeGy3q7/bRB8p+m31s6K2/1Sbi9XmePX/go4drrKbjv1C9Seo/h+1
n6D2K2nMTdUvoXt7H+NVuYLa3KB9i+t8L0Q6p+p+0PXtp9/8omfqfjZUXqn2
z+pcp6jtRer/Bp17V7WZrD6nqP5k1T+i8bdVv7vqn1R9X/XZR78FdfxtOn45
nesFtXlX9GaifxedaX+q37PafkDnX1rlaPXVUN1DoncV3V3HLyP6atGv61zn
q3xex26msc2jfTervwf1u03172j/XKrrq/ZXaPsmjWcR9XWjyifVpr/qP9Kx
f+qe3KntJ3Qtp+iejdMxq+u3BfU6rqbx59p3s8jtVF6ttkvo2Id1bKVzrCz6
DdHHaczddNwc+nXTOY7UtU/XsX9rbJ/pvL+qnKFfV+0fy7uvNgerzUtq85DO
O0m/jfSbT89lJfX5mvq8Stuj9XtNfT+s31rcG41jFfWxKM9O9EGq/1z1n+o3
h459W+WhXI/GdoL2X6gxt3Qts4s+W3W/6Hxz6LznqVxY7b5S/S4615Pq5/CO
zsutLSG6UJsTdI45dcxnqttBbbZSX8N5PzT2uvbvyj3UvnXU/hjRX4r+Rx30
0r4reMfUbg3RN4q+QPTaosdxfl1TKfooHbNE4fmBeYJvnm//Z5XramyjtH95
lVu3PJ8wr3RX++VEXyy6UP3HorfW2LqIHsr4VY7XeP5WfW/9DlW7K1S/kupb
on/W+JsqL9QYTtf1jdG+zdX+VNF/qP0Kavc7x6nPgXpe/4g+RnSs8R6rNp9o
e1Ed+xdzmn5niD5LfV6lflpqc5zafKr61dXnYTwL/dZQn3+q7nD1s4rqD1Ld
gfotrvq5VD9S4/lJ9A+i92ZO03n30/7ZVfe06MdF7yh6Fx37FHOLfufpfjZ1
3nNVvqnzrqjfg6r/Q+1Sleeon5r2/6dj7meeDfPwdyrP1Rhz1a2n7au1vRXX
rfaTda4bVD9AfWwl+hHR24q+V2Wi31q8QzrP9jp+U22vrmsfq3N8Jfru8OyW
0/PZTfUbq26ytl9RP9+IPkX9nKHfgqJv17leUZvp+j2u35bq8wfVL6RfTdez
nLav1XsySO07VHei2q8vegXtvkTnGa9zbCt6nOip6n8q84P2z6b3f4ronURf
pnFdGntd6aX2W6v9jWq/u/Z1Vd2V6nNoy3Myc/PyerevU/t3dP5Uv/U0hls1
hotEDxB9i+i91Waw7ucqqit1rkj9nKp+vmJu5BpF3823I3oQt1/9TdP2ZG3/
qOPb6udsSh37mOp20PnP172sRG/AtdGHfj1FP6S2s+t3vLaH6rxX6D7tqfIe
nWuEjvmNY2O/E2zfpnZn1f1Mz1P/Z4v+XW0WL/3t9NPYLlD7KPa+Ubrmfqo/
R/fmavV9puoGaHt44jX6Mm0vqb6nqDxZv+t13H7avrzuueomlRPV/tLUdTWV
p6p+jdhz6Ik6780qV1P5aeW6z1T+nfrYBTSeUbqeyczXKvfScb113jP4ftTP
sjV/+/AIo1S3R83r4SWih9a8tl9c97rwp+r3UnmA2l+jfq7m2TM/Zi7/U/2x
mdv/I/p7XccprCU6plfpd+N73Y8OHTdS9Ztr+6nKc0JP7T9D9afH3v4h8f1k
TjpN13Ka6n4RvWLl+WQRtR8au577+3jma3pC5Qv6XST6RZVT1Obp2PfoWx17
i8rvVJ6hfdeKjtT3OaLHiI5Fv1L5Obyqskfd9azXRzD/675do+0jdO7rVa6o
8qTE68t12j43c/m+yqV0/EmiX1K5uc6/g+iX1c8Qtd+OsbFm8E7p2G21vaCO
uV3le9p/aulvvys8T5gHHlf7ObQ9XeWmeqZPpO7zHd2Tw9T/n3Vf2yTR/WKP
r0Nthtc8JxyiZ3+r6r7U/d9V+yewfmrf33XXvyP6rcTzJPPl+hrbbaqfW9s7
ZaZz9TdMx/4lejz3JfX9aKjcrHLd9yp7sa9u/mEB5gDRx4u+QGM4U32PU7my
ruV21f2r8dRTr6HMV78zh6r9qdo+qnQ/8FEH6bzDNKartX10Yh6GZ3x57Dno
QtGLa5znqXxK5U46x6uq/1Hj+VLHN3Qfz1S5hLZHi/5U9Df6JaLPUjlBx+zD
uqPxza7znKv6nbSdamzbaEx11S+qYy9Q/ftqv7joy0V/LPpdlWvq9zRzbuQ5
innpV+1bSPWXqHxLY5kRe62s1GesNqfrekdoXthYdaP5LtTnSrxLav9Y5rXg
TLX5WvQ7OvYLlbur/RS1/0zt19dvqMb4kcY2J3yE2n+jfT20/bXK3XTsJxrP
x/qdpH3dcq+T88KXZV4bu4mOWa/5rtX+0NTr5lyqn6Xf7ur/Q5VPqY8fw1qc
6P5/V/P8OVvL6/D2OnYxvnnRe4n+Qu2f0W+k+joo8bdwOmuM+j9LZW+1/Vm/
EaL7trw28+4tKfo+tb9XvyX0O7vyfDFC5Z/aN0ntt1I5KDNP0R/ZouE5bay2
59Mx8yY+b1+VfeDvWYPVrgZ/rrEtrLo/Nbbx2r6xw/wPa+7S6uPmDq+F+1fu
4zWVS+hcF2j8z6s8QsfuE/s96515/n5J5QKqn6n6L9Xv0NLrTZ/SPAU0686F
qd/TvzWW/dR2tYb7ZU2Y0OF1oZue79Ea48d6f9dsmf85UttbZ17vLhC9tPat
omOvV/+j1X47no/qzmuax4DXmJKZf9kUmSnwfvAm7zd83me07zqNeYx+/2jM
v6rd7arbuOW1Hx5gA9EnV57HT4JfaHndXJR5uGU+bpjOeaDOfaj62UxlwrfN
HKLycJ13AbWbIfpE/V5SmxNU7p+Zj1td+6alng9XVV0XtZ+PdVXnPxaZUPS5
oic0zBfuiQys9nuonKG+9hO9m+hM/fTTGPfuMG86rmG+eReeLzyz+t+hwzws
vDRy9z46dkfRqY59O3Kf8O5b6J7uzjur85/CuiN6ls51rOgz4KORq9Q+arhd
X957HfcRa7Lq84b50bl0PUNU5swnov/VGPZWH2uU/g6OVv+bl5b79xM9lkEx
52i7u47RIbV31efRlb/Hw9TmeB1/iOh3kF/aPs8w1a9Z+ls+Sm3nhP9GVlWb
l6vwvattX42to+HzzdPyvH6I+uuuE6WqP1j0/kF++Vr3/C2176PfzlyLtg9W
ObeOOzL1GOfUcQeI3kt0pfpmYnoO5AHdkznRD6hujjAeeGzmjNMC33Vy4Xfp
W+TL0vNTX413hLZn4zmpjwU1rhNVv7C2B2gs8yMbcM0675EqF0RH0rZ8c0Rh
ueqIIFutrfZVkH3m0jierPscPXXMQmFu7MY6q7p9dGxL13M1cmJqfnA4/TOX
ZaY/VB9P1D3HMp5zS9PIeueU5h+PKqzXYRzfqP6jyDLb0drevrTsdqTafATP
IXppngM8oeaCMzv8rVO/ZJgHmQ9Zcy/Qsaeq/kX1PVlje6rubeQp3slF4U9S
35uF0Nkk7pd5dil4U+0/QfsfaXidOFn182cuH1R5Onws34eOWYT5Qu1/VDm9
8vzcp+VxjQhju0jjGa5jXtW9b6q/fVSf8D4Vfu48/3bLdciJuxXmfeBnTmFd
1o6TVS6o/s/R8e+o/lJdy27oA9TXntp/Id+vtjPte1bHDlXb99TX5tr/p/p/
SfS6oj8X/XbLctDPosskvM/aHq7z/qJj+2isz6juWfV3keona3sr0W+iB2ua
B4YXPlD3YoLGsYHK+xr+loep/aeqWzjct7U1ns/VfhH1kaj+RHRt6ut++EbR
b2n/m6nnh/1V3qHy0bq/jdn1TjwCr6v611N/j/uiS0h9Hw/knur3sNosrDLV
mCaL3l/HDtQ7sp5+69c9r3zs6aK2bWy+Dz6gpv6/0PYfGv+rurYN1e4HXd8B
hfUHfNf76b5vqDYParyPR17fX9e+7qIvVod7aHvnwGN04RkhM6t9knttuyUy
r8A3wb3lG7lN45yg33FqN1Pjnkv9HKPyRHjuwCc8Bn9U9/v6cWp5p7fKe1Tf
veF5ravO0U300arvX5rfqDSW7/Trpf0Hq26qrmsAz0TXdVjq5zOf6u5sWC+w
r7Z/VPveKjfU/tVLy/jr6J7M3fC9hO8dnJnuqmNX0jUd0OF2H6aeKxZP/b0z
/8BLzVKbDyPPO3vqOvcIssfvKn+Lrb9YXPdgMf2uUZs/KutGdtE9XETX9Zza
Lq0+ezQ8B6L72ENjWETbp6p+ndK6i2VEf67zbBH5m3wb2UX0T9r3i/r8QuV8
6m+ijnu87m/+JtFdwtpxq8quDa9nzKHMpayPV2kc/9Ef+uPK/bVF92l6PmR+
W4h3Q+daVvt/Vx9fI7vpd7HG+QXfJt9R0Bujh3hJ9AXq+xMdt6rou9XXw6JX
D7pT9LtPiT5Jbd5T/SOih4t+izkg6FQnqc3GDeu30X2vpPo71M/zavNc07pH
dJA7avsJeGCN7Xn1sQ7vkfYvj65V5STtv1f7ztb4N1L5bod110N0/AS1nxeZ
ReWLrN91y8M3q91wtR+g8hhtz6f2t8Br6XyvdVjO/VpjG8L95VkHHfhr2n9T
yzrPp9V+08x61Ge5l+hf0aGr/eeF5Zjn1b6n6g5hTapbp8z9+U3l25l1mTcy
n+kZbM9HXbdsfZV+b6jfx4O+/U61/w4+CJ1F3XqCTzqsi3xDbS5BZ6z78BY8
pNo/rPZd9cze5NthX2E57HHVP6HttXnfNeZ5df0noJPXO3ioyqXr1t0/ojar
0T/XqLE9pPH01b7l65aNkYv/Ufsj9FtJ21uhY9Jvhbr1wuiH19exO2TWo97d
sp2ht37Xat9hrH/q/3q1iXLLR5+hx9J1fa3feaznatMdPk5tjq/MA4zSOJ9u
mD+4UPs203EXRJajl1X731iL1P7w3Drmp1uWI5cIMmlX9bOvjp3KutqwboC5
8ii131z0a2r/CteOLKnycl1TR+K59TyVz8ZeP/7TWAcxP+hcb6ndRsw9oh+K
rK9Grz6Z9aTDOpy/MuuWP1CbNzLbAqaL/kXP5VLtn6nzb6S+39Qxm6r/efXs
VlSbV1jXtO9v3iuVIxLrrtG3J2qziugZajOP6MU4l+jPdF07wgcje/Cdqu0b
zOWFz7upys+CfqOftr8vXG6scqCOH4ssgvxY2Bawvsrldb/6wIuWtgfwbV6j
636/8LewnspvaCd6I5XT1OZCtbmuZZ0FuovFVc6h6/uddYZ3Qdf0icoF9PsD
vYbaTFf7I7S9nfp5X9srq81ZOmYp+AGV5+u6NhZ9le7h9/D22Md0vqXUfor6
WFe/a+A5VW6g312i50VP2/ZzGcJcpHv4MDom/f4ufD+3V/0r6n9S5Hv6K/y2
znWbyjVj69zWQEfA+hn5fJfzvqpuG7Wp2n6+W6u/QyrPCYOYL+G76n6Wm6Cz
1W9Jbc+hYz9XuRk8nuhl1e/5yJTa/6XoNdX+Px37rdqszPuWWl/0uMouOv9v
deuA0BFtULeN5x/tO0XbE1XmrNXM27zfpd/DvbApqP9HtG99bUcqT1f7/mqz
nt6Pb3XeusqGxvELz0j9bKRyoNo+yZpV+bjrtH8077P2PdeybgcdDvaQq+A5
1WaS7vk69TDfat9U3YsTVT6lNv0L27CwZR0Ze+3mEZ3Zts0L21d//Y5T/X0a
ww/qY0Dda/9n4Zk+xpwdWfe1l36bqv2Vav+C2rdVf1nDsmUb+wI8kuq31Lme
0L4h2p5d59pS/f2t/jbS/dlK9L98a5n1Ynuo/a7oQtXPNtreJ7Hua1/91kW3
pHKQfn+hP9ZvRdEz1PcbkeeFHyrzpR261vW0b5MO34dhartQ3XPrhhrzYPW7
gcpN9PtV9bvqvC/qN7ju7+W90rzx3Mx7qcf+ga79Dv2ur1lvGZWek/9THy+W
tjW+JXopjfNEjacn8k/kuXoR0WvkLu9Cd9R0P8zzK5Seq/8K88PCYZ5ftfRz
rKt8Xb+1ead0fY+kfncW0rEdpZ8L39w09fuI6CszP7t1wjtwsuoPVPmvrnlW
btsffW6sYx4TvbDKnxu2h3KP1tP2GNXPwbzass7wEvV5b+r5oDs8R+zvlLXp
2NLrF0Lg0aXr/tO1rBKbl+F8p0R+BrT7tG57Kdd/nvpdXPQ98M7q9354LZUz
cs9jzGffNzxfYav9peFvezHRz5euW5e1NPI6ypw2InN5O7qO0ud6U/3dnno8
D2Mb0b3YOvG31Ig8p3F/N+La4LGZhyuvZbn6eAQ9eeQ54Z7Uc9IU9fNA6ndw
Rewkand3ze/DnanbPt7ynLd8eKZfV17jBqrNq2q/Ku+z6t6vzKusXdne2z2s
m9gTaD8x8EDwQqwLz1W2laYI3jruu7r7uqXldafNPKw2K2tcH7T93fKeYA8+
rjS/kKi8OvP39LLqP8rdhm/9jdIy1sbwrXXLQKwTfFsDwnt1f2r6BXSJke1n
9AU/2K/uexFH/mYHhjlpvXDs8aX5l6bK1XRvV419H1fJ3IZ38vCGx8m6eCT8
k+7jEbmf2zPM1XXzEjyLh9A/aN9XorfCDqM2N+q3otp9Xpn/Qe/do7Tu8UTd
w80iywKXabtfyzIperadStedCi+p4zeNLMMu0DB/BO/+E/aiDttrvxP9LWtk
h2UNbF3IX8ti71T5lcaxa2lb4wXqc9fItuP7tH1SsPmik+mbu24zjeH+xHpS
dKTLq59NVH4PDyJ6N9G/8k413Cdtzkp9/oV0/waX5tGOV99T69bFrolMiP1F
9KMqt4lsi7yO+TeyHQf76LOR26yq9s9FlqvQLV5Zup+VKsugF3RYDj0ocx/r
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
tmja7g/N+3Nzw+8k799FkdfKl5DpAp6B231Lw5iorqL3VD/bagwVclVkHdp7
qn8rdZtt1f9eqW3oXcDGxMZpqKjd1jANjnebpss31HbToNNGt90/6NCw4z6o
8su6cfOjGn5OPKNj4BvBQaiclLr+dfTJegZbip6E7Kb+pyIvqzxJ9VvDPyOL
VNbTdxH9SWY958PqY8/Kds95VH9wYrsk+CR4FeyfXyHDZdZBf4d+RuPcOvY+
+MMjeY5qs0tsfMnR2l5U5VXq/yj4mPCu0m4h0Veofpjo80Wf1fD4BmhN3Exl
pf6eTK0Lfz+8e9c0vA0/g01jdpXdwruETXyL2PbyXevmncCpzVWaR2L/p7kx
j0/FtmfclFl/uRhrb2LbwoO6X9dm1u2ibwfvBo2Odya6KuZkbNCR7dro2wfF
1m9uUvd6h56Za3gq9f6eTevsD69bb/9V7ncZfMXLqXE436vvq3Xsgcwb+u2k
Pq/V9iF1l4eqxEFmftGXqv+DRW9Wuu1n2P9z618/RUdU+rifwvPcs25b9v7o
18AHqZylNs/p3G+0jSfkHUMu3lJ1fUSvhV0bDJCO+1zlDqXXa9bt9yNjMsEh
DY497gO0XfAO8y2i+69se++u4zbT9b+p+iVVPpNaJ/2x+jxKx64VGee/TWns
+oI829J1C5XGwmAvR1fDdwSeCRw8cw7lAsgZmduAzRgSG/t+vLZ3i413H163
Lh17NucYmhgfsDdriegdwBaL3rzp6+2FLqc07nFe+M+W59GvW8YrMNeB5/lE
+w5j3tO17pd4HmC7R2ocAv4BS0XGLTD/8C3xTYEF7BIb4wZeHNkT3Nk43ds9
IuO9n9D2+anLwepnxaax4r9gC20Zzwau7a7IWLoNapZV4ZHglZBhkSuRL2/U
9o41616Oa3kOvlJ9/5S4H7Dor9XdfqeaMc7YecE5v6OxvK3fk/BqqcvnwAio
nz151io74D9qtnP3SzyG9bW9YmJ5FkzgZejuVf97Yvw79JCa/ZG4ro3xtco9
ntHqZ+/I8ukuNftlgaP/MTe/Rz3y6w2Fr/0Z9DYqXwlj/iPx2LBZv163PLtz
zfoBaGRc5F1w1z+r7cpNt+c4bO4vdxjvvU/LJf5ZF6eu31v0g4Wv91f0nA2v
bYcF/gR7/X3av3dpmR3Zff2Gaa73dm0fzHPUsRdXtlH/id275Xp8yvYpLcsj
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
bdTPnWrzbeL4JA+E6yWOJtjZDWrG7yJHErN0k8o4buKVoQMAzw2W+/zEzxEM
Nvhu6tEV4CN1R3iXhmWmN2Jur/yO7ajyu8S4P2JoEwP1ztA+azsu6mW6Dzvr
d5voA3LH6sAGgPz7fuw2tMd2hy0QnPxZgUafgM4Enxl0BTsU9huINf5zIvv5
M7cwD5wTaGR8Yuw+VrOd4aJwrqsiY/XAnRB3EhsGMTeINYJtEr0QsS3Qc7xW
OnYB8WeYx4gJQKyhX5ru+4LQPyXbyMnoNBgnuh1iFqDzICbVyMy6eua6lTLH
siCmxbaF58INSr93s8K7By9K/I4bA99LrBx45QsLx4YFpwf2CgwWuKszmsbo
9cqNwaIOrFkv4s0k9qVP234282v/oqX1EODNHkjs5987sS4XfhH9LxhlsMpg
sdFrEucZWWutpuO0tMCqpMaDjUztowxmuN603y7866OFZTOO6w3+JQ8+0blt
/Nj6sf/j045vO/EPnmsYBwU26vzCekFwHdcVjuMN7u7Kwjg9cl5cVTjWOvGl
VwhjBvcNNoPY1siP5zbtd/9NYj4cHpyP/6KA0wC7cUlh3SZ4kq9T4w9XSP1+
8s6DLSPfBrGpf8TfNbMMcE7q2N/UE7sa3SaxXun3r8g6EfSTzMl8F2AK8a/C
j4vrZ70AA/yEznt/YawI/l83N/8fo71PZhkDPfn4prHc4NPXbDr2Ttx0PDRi
LhMfntwhYH+JM4ZfOLhr8NdPNazPQvfxbcBlxSpv0bj30m9H/ebVMZXK7rl9
nOFjZ6jPqannny/UPks9T3wd9BLgnNBToJvCLwO90qTCOTvAtNwT5GvwvGML
y/fI8uSxOFljazaNSWJNxm/s08KYIvzir23bN/C1wn7lxDl4WvSypXXg+KAN
aNqvs4vKOwvHfwOHeWXb9/kF1U0rHJsIP8Tt8+AXn1svjf4d/CR+hvgb4qeI
fI8ugHGPrhv71InVKYwxAeN0Q9NxMH5TX4Mrz5V/qexd+jmDIcU2i60Rfy3i
FRB/GB0XMS5+i/xtErcCmWNk0KHx3oBZOqMyLwpPShyMXyPHI9gtdz+r6LjT
K7+b4B9/j4zRhF+FJwdniU4MXpcYjn1r1lGhwwJPTdwMjiGWMnh54g+C6/0q
cnswQ10L8/ULYxfLHD9wv6bjHtMOfRw2+h8j23Lge2eLHe/v4rZjv41XeaHq
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

                    "]], 
                    Polygon3DBox[CompressedData["
1:eJw1nQn8FdP7x+/cbe69s1wRFSHKvhYhO5UQ2bJUSGlDyPKzJC2WFlGkQki2
FrInOyFrFCG7bCmKIiTr//PuM//Xq+l7zpxlzsydOed5Ps/nec4WPc899px8
Lpd7Pczlivo7vprLHVzI5T7V0a2Sy31UzuU21PlBpVzuqVout4XqtVeDVjqO
UPpeHYep7uIgl/uf6t+pfAfl91K73aJcbged+1ntm+rcEPV9T5rLNVdfqdoP
SHK5c7mG2t6k/A7q/3UdN6p8vI43lJ6s/vor/YjK11P7itp/pb4+UJv71P78
ei73mK61h64xUdcLVf6lytdT+dZxLneX8s3UPlb7c1S/ufp7RXWvV5256m93
td9b7S/WufYqf1/npqrsZLW/SOkzdJyq9HSuqfQWVZfdq/x7SrfV+K9V/6N1
vKDxLtS5u1UW6DhW13pZ58aorKsebguln1X9h3St81X+oOqWNb7FSr+mPu/W
9Q9S/nzVHa46Lylfr/reP9Sxv9Lnq4+/Vf6Ixtxf9/uozl2i9ver/qZK1/mN
VH6C+uul/IHqb4Dy2yv/vp5HX12/p+oepDY3qvw/5fvk/IwfV9s16reH8k0Y
j8Z/icrPU/5I1b9F9a9Tfqjyxys/WfkrdbRQuoXObauyGWrTVG3f1bFWfe2v
MR6pv9tp/I+obi50f8eozW3Kj657/NzHfKUbaLwrlV9f9S/Q/U/S+U7Kf6v+
LlP/r2qM4zTWC9Tnkcqvp/or+L1V/zzVn6L8pvweusYhyj+iY7XaXqO6b6r/
lfr7hcpO4Z1SX/vpXCf1tZPaX6K6z+t6b3G/Kr9X5aOUH6f2v+gZ9lN+M+Vf
U/nhKr9b+Q0q/j4+VXk35Yu6/icaz0k6t6P6m6b8NqrbWP2/oXyk9o1U9pnq
n6z6i5S/T/WLOo7ne1L9Fqo/QXV+1u/VX/2/r+tPUPs/Nc7BVX9L1+jcziqb
qDb7K/+5jp9Vtr6OR1X3LPVxisoP0P21Vd0lqrdA6UdC/3Y8k9Eqr+l6g3St
QO1eUfltod+Nt1V+uspLqft+Rfl7NP4/yn5/+OZvYiyqM0vpWMf5yreq+9v/
UPVbKn2WzvVS+gGVf6T0tTruVP4t5X9Qeo6OkUo/rz7fVl8DlK8pP0B1mii/
n65/tp7VQJU/oeu31vu0v/q/SvkDNdaddY1deReU/0B1n1L5/5Qep7bPqay1
jv1UvkL93aLygToG6/n8rPIPVbZD1c/yJd4xrq3zDdS+oPyZyn+mtk2U30T5
y5XvGvpet9WYNtDv10HH/UrvyHjU9hD1f7Xys5RforEMV5ttqK/8LirfifeH
uVN1mqntrrzTKm+mYxjvnvIHqfxq5Z+pug1tX1T+m6p/c8Z7jNpvofb/aTw3
qmxj5WvKn6Lrz1L6TLWZqvdnsMoPJK027Sse/zLlH+edqfp5N1b+C7U5Re0/
1zMeo7J3da4h85HOTVWZmuY21H8nq//HmF+Uv0/976RnuJOe0V3qf5LqH6b6
M1V+jd6/55nvqr6Xjir/SO2vUvvfVL6Nns1jtK343obpnn9VenMds5VPdFyg
tn003lW61hzlv87en5ZKr1UfB6vuS7rGdSXPwS8q3VbHtKK/sY81rm6h+2qo
9Ga65ptqP1H5TVUnVt1XNeZeyu+o8X2i+/lefR4fuM481f2Gd019X61zO6mv
5Tr3NmWsgaxHqn8H85/6a6D+jlGd/1R2F89Q5V/qeFbpl3Vua6Vf1/X6FDw/
vRv5GfGsjlP75kov1/Wm6Vrj+X7U1256Rm10rhHfu8a3percpvQotXlO6daM
J+81hrUm1XgeVP9lHf1VVlV+SsFj6qf8ZXr+S3StoepjrMbyoMq3V9vtdIxS
+5Ya0x663hjV30b5bUK/C7eqj/lVz/HM9U2UH1j1/Lhjwe8w7/I7qr+j+tqJ
30Ttd1F/u6u/Q9VmZ6UvVf2zdO1HkTGUXqLjZaU303GO2p7NmqvyR5T/hG9H
xzDln1f+K6WP0DPYPXDfn9b9fjCWK1nvmdtV5wnlU9Zwle2r++2p+z1R15+u
68/TPZ/B2qf8R8p/qLFtwLuucxfzLFXeX+nxvD8qf1n5nln+J117OfKP7u0Q
HVM0hlaqs6f66KLyd5S/U9fbXGVXKv2Jxvcu72jObe7QueN1jT30bPdV/mbl
z1Z/vyFfafx9lP9D5X/wLPOWD+5Tf7uo7jTV+VzXmpH62W6u8rc0toeV30v5
m/h2db1vmL/V1/46d4vOxerjIdV9T33+WPU3z7d/QeD5en2N70yl++toqPQD
6m9/pb9QP5+pv/uV3zW7fgdd70+1+avge3gie/+7qP6lyr+j/DMa4+NKN+Jd
r1tmQnb6Jmd5aILGtKf621l1nmF90XEismPe6/Ey5c9S+mwdPyi9QgcC6nk6
fmS903jWV/ulajNb4/lVxzPMzaxnyAvq44CS51DmUt4Z3p0fc/7+Fui4XfkN
9E4sVnkP5deq7gTl91Hbr3XudOU7q4/7lG+oMe+h9CY61565U+9ATek7kHV0
f8/pXKijomO68gkyQtFzSE9+y9C/f1e1+VxtYj2fv3l/9M6cq/TWqedurvml
xv+F2s9W+UCda630G2pzcOB7upW5QscOSm+W9/c6vubx3av+Tld/Xaq+9wN1
7jaVba+jr/q6Vfn5Sv+j/m7k2ajP01i7a5YVLlL7v5Ufp/zutNWYb2B+RP4p
WOZB9mmo8f7O76/2R+lZ/K5zvyi/N/N76GtwrUk63la6e8XpW3TMq1levlt1
h+c9X3dl/ud71xhXagwbq/+y0oeofJGexz/qP6/84aqzSv2P5HkHniMvZP1T
eajyTsr/rrK3lZ+k8SxAxuL9Un6K+tpSx0PZ+/SZyu5XvqayvXSNe5SeqL5e
0+8X6hn+qrFurLGcrfRRqrNM5U/q3GLVuaJieWma8guVH6Hx/sG7o3MnKf0X
MjX6j9o8jOweue67qvuF+r9aY+yr/MMqT1V+qfL/qO0anVtS9vrxNe9L4Pn6
BtYvpR/mnVIfC3TcobpnFK0v7anx3BJ4jWKtOk/1/1D7q3TuCtZP3mf0Ol3v
X6UX69xTzN18c0p3Vv1vVd5D+Ubqr6T8JNXdjDkk9PeJrHy+zv2kdKKjt8r6
6qgrvYue3y9Kj0SO0f1dqWewWmNrpT6H6v04Qfc/WOMaoqOg6/2ro1j0O/qc
0icgpyEfIn+o7uLEuhk62nfK1zSG21T3j8Dy3kFq81Hez4Bn0VjX+0f199S5
y9X2R12nvdpGqn8d74OOVoG/Gb6d2cy5Sl+uejn0JbX/Qe13UJ12Gm+k8qYa
Sx/19xrvFnMAY1P+ZeVvVf1Gaj9OzScp/X3itb6b2h+d+H2fp/S4vN//pejB
rH3I7FWvaaxt3+nciaHnu09Iq88HmP/Vxysqv0F9dEsskyKbokNvr/QBqr8n
upbOjVD+Ox1zlR7Lb1D193R4zjrSK6xBuv4g5tPA8ltv1flH+Tt1T/sz32oM
7bh31Z9csz6/sfLzA8v3ffnNVP9u1T+Ad0/33FR1t+b90PPKKf+Brl9SfnPl
P9f1Lme+Vn5jXe8XHUOUv0L5FsgHOtqq/cE6bld/W+l68/h2lH9Q+e91vTcL
fma/IW/yXqnt9epjW5V/W7Y8vLXqXK26qa6/jGfL+hu5DW230rmrVJ6ofKnS
ebXvr+d5sPIX6l5GqM4ryu+CjqA+d1XbN5R+UtcYyPysOpsqvTXvkOp20rmp
rA9lyz/NC/6+8urvI6WfZL5Xf8t07g3lbw78eyNvfqr63fjmmX/V37EqO1b5
6cp/zPqs+n0Cy2sXhr6325Xfr2KdHt1+gOo/ofpzddxQskyDfMb3zlhuUv3W
qr8U/aJgnRV9AhkAWWA/3f9jyn+s/GPKP6rjI6VP17m/VTZZ/e2n/CT1cbOu
N0vlnyJjIQ+zPqrP17kX3eOIgnXjl/W8PmR8yp8eWH56KPX6PiGbT79Q/lz1
vYvyi+vWAdEFl+Ss727Jeo4ujM6TWF7qqPTR4Afod4nnI+alaWofqJ+a6h+R
N37TXcfvSo/Tub1Vth3zq/K9dRwVev6/K2eZdDTroc6diSzMNZR+VNffm+eB
zqdrvYhMW/A7yruKvHUW60loefMzlT+W6afog3n1Genax6i/p5VfoWMh+I/K
d1e6rPL1VN5F5S8pX1K+jjzKGqx8T+W/K1rG5X3brWrdAp0G3WYsMji6hvLX
Z98r3047nVug8U3X+LYteY47XN9fG66f9zvCu/KRzv2rssY6/4LGP1TnmpSM
dw1Seh+df5/fV+ferFmO3CuTz2Yhb1c8n45U/nel19f1fkZ/Uv5NPa+FoWWB
DfOWV46LjM1cqGON6o/UNVtmY0eeXMU7qPbb657/UPkj6q8N34au8bXaHlM1
VtRa525Um391jQWqf4+ucbPS2+u4TuV/qe1c9fc4Ok3BmBrY2t3qbwv0NbV9
m/dT9Qer/DGVf8v6ovKZlCt/gNJFdKaif3PkBzAmsKYTlL8DXURtHtC9XJbh
n3epzmnIFsjPqttf15ih8q462in9lfp8UHVHqs7zatuOd07p13SNY9EPNJ49
1fdROncj+KTybQrWTyYr/1Rs/GwfXWc296f8V8rfityu/LWq36BgjGJUZLyt
l9LfIINrPP107n6NZZHyZyt/ttrcV85kBPVV1RgaFS3znoZ+qjpNlL+BNVf5
rzX+h9Dd1OdC9bVC+beVf135mq49Q30sCCxLzFLf/6q/FSp/EvxRY+mnc1N0
vYdU53bVn6X2B5W8xnRR23t1bj9dq5Pq36H+N9Q1ZzE3g6Gor9N0brLa/6r8
ucimus57fBvgvaHXKNaqDnmvHzvV3BaMaGelz6i57dPMseDR/D7IVzr/jdIN
+X7zlgEGINtUPb/FalOoIThIhlDZbCX/UP5M5R8sew34rub18GJ0edVfX/m8
yn8qWV4BWwbzBPvkGe3FnKX7PTD7vaeo7pmh34XvdfRW+34V1+c3n66yOWAQ
Sm+EHlu3/PeW6paQ0VW/DxidrvG+zs3Us+2q/GhwVu5B1/pc56aq7mW63lPK
h8x/ecv0s3StDvzmyl+k9rvVLJ+erbrDVPaU+lpPbY5T+QtVz+851amo7mqd
61r1/MizR+ZG9v4p0+3fyuTTX9Hpdb9ddDyhsc+sWbZBxmG+/YZ1g7Ve+T2V
7qVr3KI+mirfT2MPdP2W6v959Gb0T+XbF6xf38e3WLXug86B7nGX6i1XuruO
qchXoed7+nhOZc+mXrv5/X6IjJcdF1jGQ9bbQc97w8C2hQd5V3S9tgXjtzMi
y0sX5I2pg60v4pmpv3vAl9XXeso3L1pG6qO6M9X+cNYHlT+kvr/VGDYpGqND
nuymPq8r+3vpqvTtqefjiRXPz9+kXpvBfz+JvH7OKFnn2F/pm9VHx4IxWLB8
dGjm6pFFP8+T1cfYsnXmTTWWU5S/XvlNVX9s5PX+3Lx1VHTVDjp3ksrfUHmL
0DIJskmPvOeDz3TNO7FfoDOpbqryzYuWIbEvdFP/Y8p+Z55R3ftr1p0XIaOq
v+d17mjWUuWXq/0TOtboeY/ht1Hbio61Kt9L5eW68S/wyv+K1u/mpJYNkRG/
V9tXle+t/O7oNMofr2Ng2TYMbBkd1eYQpf9R+wuUPkLl3cv+xpHfblWdzUq2
EVyh/CW83yWvgXvrfkYgkyp/OphdaPsBtgpsFo8zFyS2R0zK5uMJqecv5rGP
lf8FGVXtz1L9v8o+SDdA51DZzeqjjfLLlP5K9W/m/UDf1DGsZv2We88p/z/l
D1OdHupjvk4dqvRDuv5R2fs1S32tyrDvkDUd2bBi/Amb11XIeqrfGWxedWZH
nh8PVvrPbH5FJkU27Z833tmm4rIt1O9WrMdgFipPmFMy/ODUnM8NVL5Y9buK
zWJ4zesu629jHXOQr/jGGUve8jiYLdgtOvM5KnsIDCD7fTevGh9sVLBNBdvK
Ubrn88r+vZvrXm5X+XHZ74Ft6lLkr5Ixju3Q73TNk1TeTm321viHhX4XWJN6
Mv/WjD+DiYGNjVZ5Ve/jXzo3oGb8+g7l17CmKD1adSaDLSjfX/ne6mNq2ZjL
V8ofGnnt/yhneXMVOkLJOhh4RlHlv5RsH9hZ5b8i72X4SgPlO+v+hpeN6W5d
Nz6FrrkhmLvqLtQc8qfK9ohsz3ggsS2O+39UZcfofD+1PwN5FuxWdQ5Ufrye
zfN1YxZgF2CI17E+6tzdKi+zpqfWj8F+m6r9A2rTKzKWtKPyFd5xlV+R8zc7
lm9W1z8507c+Q19W/b9K/ub49p5WeVeVb4VNBaxM5b+XLAMhC4G5gb1hY0Cf
fkb1uyk9SuWfqv5LKt9b116p4wSVt0THKdom2gr5tOJvBYwRmfZVtfkxMBbD
+jWY/kv+JllDH9P1V6r8ap1/WuUb69xslX0LZgxWrvsbnHOd4cpPTv098l3O
Uf2f+E5LXuNY6w5Tf92y+fID5uzEaw948nKN5fHU2PChusZHKrtJ+YbKD1Hd
J7FV63rD0G3BsHXuCJ3rpf5OVf0N6sZNuTfueVd0KLXvV7K9pavSs3Ucivyj
9ifres8ntsdil32m7utwPZ7B4JpxJ/Cn6TreU/r9mtOsKR8o3Ti0fnlxwfbZ
3upjksbzPfNxbJsLtpfhgfH+83X99zS2+1TeM7X9l7KlYJjqr6GeT7VsjB97
6PapbWXY3E7QWE9iTEXrmCcq3aVmWQZ563CeDfqF8mv4/nX9xuovASsFn1K6
rGO1xr6hzjWrWJ9GduUZHsXaWrc+cFBke+clGt9GBdtEsI1gY8TWOEj52VXj
WUBB/ZABlN4utS3nIo13qcZ7mvpvpvLLVL5lxfYIbDlgBGAF34Xu60DmT/Dm
srH85eicKhuLzgU+oHbv8P6xhmY2RWyLF2IvRpZU/ixkv7LxnW46t1XNNkJs
hdsXjO9clNp2jH3reKV3Q77hXVH+BmyfqW3RzJ8DYttTQvBanWuC7qk6/2rs
k1R+pPKJxvQf7weir9JNNeZFXDvv34P5Ee7CaOXX6v42BCPVGBuq/mj1NSD0
b4UOiy57YdW2l4OUb1rzN8K3clXB+vFGYHrldWLlOnzo8JqxPzDA45VfqTqL
VLc1c0Jo+9b9gXVqdGvstrxLB4DPKN2d+ZbfK7C9cFRi+zG2zEfrxlP+ZL1V
nV48z9C///CC8cdq1VgwGAh4/b6qc1vRHADwjqFV26Z4B5pXzP94VnV35hmr
bpu615qczu1Vtw6EbPeRyruq/CXlexTMUfitaj4J3JBdVb4R7fU82pY9/0Wq
u7f6aA/GBP6j3+85ZDj0X7V7K7PvXFrwHPmyxtMOGUj1D8jbPrAn7xm6nfrf
WvkfQ4+lIzKr8tdzj2rfku8FmV/5K/htdP1XmSNDXy9UH7cpf6CueZzqtlb+
Mo3laPWxiep+qT5P5XoqP1jl/2i8Lya298Nl2E3ljVX+ifronLeNf3VoPHBL
dHGVn6by91jj8x4D+P4gvb+vquwMxq2+t9P9bV/2mox9lO+L32JF0fayC8Af
i35/v4isk6GbnRRYHscGgC1gdMH4C/Y22v6oo6/qnh56LNhEe9RsL2bu453i
3Vr3THJ+5uBnG+vc3sV10HHuHP33S+h3iXv8WHXfrHguWKXjJJW/q/ENQb5T
/YH6PTcOjVUMLBhfgW8CnoZ8Ctb2jPofWvL88LTSz6n9Ucz/Kh8G30l9nKN7
O6/q9xuOBFjUxurjMubqmrlI+/OOg80of2XRGAj2uk1q/naAbhfzLPXMmujv
yMD8LPAcbE9P6HqbVK0joitis54BvgdGqfRhavNIxRgOWA6YxhiVrWKOLNom
jj3wMB1fqa+LdW53ZGPdz/Ma30xkdPCO0Pgga3KTqm1W2K6wefH84H8gz90J
TlW3PeZO1d1BbRqqbkflv8kb0wTb3KxuW//FYAZ1X5NrY/O9v2p+Fd/jNKU/
qNuGji19m5z5FGt1/s+C7/EzsDbVOVH9ddI1EtYD5W9EtlT9W9CnlJ9Y9nr4
JetP1XMXOswhehavgR8XzQEaWTOnDm4dmM9Y1V2jYzX2APV/BO8TGEzBNo4D
q56jmavp4wSll+h4Q309lzM/hPcPbgU2FWwrm4V+XwPl/0Zf1/X+VX8XFWyP
apTafosdd2Hd+CL43OG6h8dUd0JiLsourHmxOXhw8dDBJ1S9jrGe0Sd9Y8/+
Me93jHeN+QSsGZsdtru5FY+Fb3xhxXMScxOYyDiVH1Pz986cwtzyVs22QnQM
7JPra4wFje1V5A2N55OasenHdXym9KZ885l++6X+Tq9Ytn6Ka6r8U53bh++1
4O/1dN6/ovs7BT5F3brOfegA8Md07J7hU9fDNUjNzcC+N0nXaqCjWDbes57S
a2Pbhu/XdV+s217Ru2gOVgNd74uy7+1wndtc49lV/R2m9GbMfXWvIawlYHrw
DT+v+d6wAWMLPrfq7505h7knqpin2bJoex32O9I9VSeuGB8ZUDCnA24H6zO2
jBtV3rJi/gjcIdbEfSvGzMHOby4Yj+6v8b1e9Pt9Ymr7JLoLHKdDauZ/zuHZ
KN8GXSp0mjlqmvL3qY++BevY6Npnqo9XisZ31tOzOlf5+UXji28inyj/RtH6
/016nu3Vxwz0tcB8qm11bpuydTDsXXeho6nvVToKkfmj2ELB9DaoWl/btWAZ
CltZXddYnTPWxnpyTOr1nXV+kfIzq8b3wZDAkobH1sXOqpmfBD9C/9ZxoA6s
+Xfj94MzxXwLZg52zm+Ofeq5yLIAcxZ8tct1veUq+xV9L8N3wZfBEFoqfY+u
MU3PcBP4DOCjvO/KX8gzV/4xHV8GxpR2VXptZOy+qDpT67Zn3qzrfRIYz7xb
dV4OzEGcovQOibk86BDN6UtHKW/s4yrVb6nyydj3+LbhomDPKhmTQ/6/DR2D
uVh1x6j8C+WLeeuA2P+6ZXywI5AtVH5T3dwMsFjm6xtVXgev0bjPq3jMjP0i
3cMDyLvokNgjVTaFuVH1p5TMpemk/F2q/w9cV9Wfzvda9XvO+34M3K3se56B
bKDz1dhcj8HYf1XeUcdT6v8m9BOVHan803nbGpeo/orI3JTugeXvHzO8Gyzs
G5Ufm9hWNVBtjlP6RB0/IA/wTJRuAoadybRNNNYLKrYNnJYzf/Zh9fkFXAWd
v0f5u5G3wedUvovK3kptWzgLHUf5W3Q8C3at8i2VHhTbtvsTOoLSnRPbji/T
eI7H9ozOHBiz3FHpYTomYnvS9baqGB/n9/guML5+IJwvtV0Mphyb/3GD8m8E
5otWMzzuB43nCmRn+J8lr3l/wP3I3o+Tdc9L1fagrD/mtn7Y85S/QvnvsHur
vwOq5q7OCcxfHqtrPhoYqxqv+uPQmQPbBOBrT8ruf7XaT1L5oervybxtn4+r
v/2Un5k3t28b+lf+AeUP1f1cqrYTdDwReG25CVuqyq9ReVFjvkllt2fvc2c9
w+2VvhmZtOznva3y26n+tar/s851Vv8bgU/kzX0rK99Jz2eAypaBeyvfQvkt
y+agX6v2Ayu2xfTK2V6xbzbe7rr+eSrfIns+q4rWb//I+Kp883z7F1ds7zk9
Z3vAO5n8iCy4icr2z+4X7vBGyjfPrn+F+tmH+TIbf6A2W6j/8dnzYE1rpvQK
HUneHIZ3Y/NFsa//jB6lvr7DRqTyyWA98G1i83XB6g7SuRuy32snXW+Eytsm
xtLQVTvyzmXPG1nwGuSnrBzMbUO1PQq+FroKawJ8aJ1bCdbAN6Hr9w7N44PP
d73Kt9R1NlHZazoGKt1cx6Zln9siMh8a2a1JJsuCCYAN1Avmt6BvIx/XaRMZ
D8DWXlF+A+V3qdpW3wydK8MX4MZspPzm3KOO91nvsamp7/4a72mBucHHYaND
/sUWpTGsr/yAbH2LQ/tUYMfAFoFNAv7RV9n8i43tkNh8q92U3jZv+0wXtYnK
nk+YV6bpXKJzY9T+D9VfoqOiuqnOvaFjcTYfI5u/onxj8Nqy+wAvob+lOWMo
YCnzK7Yds4bjv7GvznUAz8LGGVknRDeEU81vvAa8QeNbUTNe/U9qfPuX7H2B
HzcFWTTDQ7+vGSv7MmvTvGpuQEn9rY8up2MH1pbA+skg5IuyOcQ7Zvgsvhwt
yuYIY6NmvcNHgzUEfjf8b3jgS1hfmAPKPgdGCu4J/sm5PZWfWTG2yRjh73F9
dCOuuUNk3gf8Dziq41SeU5/LSrYXLlL+AeVfqNjfZW+9j1/q/h8oWVe/V+df
Vn6tml2p8rlK71w1DwM+xsmqX0nMBYMT3k2/1bbq7y/V30rX207pe7L1Gtn6
DvgKyJ+qf03R9tJdq+aBwAc5hbkjm9/hV22s9Fm0yTDmkvo7VcffzD3or0qn
qvOL8nOVLyq/SWxuwnRsyupvU+ULSj+o8prKrwrNS4OfNlnlpyb+rWbp6M5c
pjqvaDz7qnwJWGTNciHyYRflW1Usa6Ljw/eZXDf3HqwR/gccjhE6vyowtwPO
5PNg0IG5lOdneNCD6LhKB9nvgY71H7Jzth6MQB/S2A9H5g3MUYD71SqTZ+AE
fR4b7+T6ywPjnz9k8sagovkSP2bzIbrhfLBQXe9L/T1A9VNs5zoerRgPa52Y
81lV+ZU5c0EfydZ3bDKtmWvBTAPbXPaKzYcYpbaPBPZXWaVz9bw5xkcqPSZb
D49Qf6OUblcxVx/9Ef73ap1rkDdX513lf0htP8WO+qXGsjqz3yIjISvtpjHe
kbctZq7qB7FtRwvV5me4eTreZy3U9b9R3VXKv4O8hwyv9K+pZXXWeNb6fN26
DjbuQvY+/Vzyms/aT/0P0b11jEH2ja1bobM1UP2VKl+gsvk6flK6PTpO3ph1
WeNrl9g+xpzyr8qPrFoXZr7cMHSf9L060x+w4fNt8k7wbnC970nreuvVPV7s
99jx19Zsb2MuWl6zPAOnkPtBhwNvb1j33AQGW4jdB30dGlg/jJnz1D6NPB+g
o6Cr/Fny97JraFkJmQlbZmeNv21kzAzs7Cts1qr/kvIXKb8Z87X6flz5C5Q/
XvkDlX8GLLju75G+6Q9Z7Fsw7NA2w1DpxnVjQ2kmbzaqG28Hdz9J9Taqe20D
o63FxsTAxgC564wvdhrMl/e7g9o0Cp0HC/5Lv8E3Jcv0yPbXRcau+M2ZP7Ah
o2uvzuYbbBLYJmjzd+rxsXaB8yKvnFi1LQdMAmzistDzPPM9viP474BXgVsh
T1yu8W2ustfz5j9OVL6V8u/mza/jeR1Rtk/ZvnVjLmAvnNunbvwQbsW1yPNw
gepe2+GkNlTbw8AgIstMyG4tU9dFpmim/I51443gjldqPFsp37zs+shae1Vs
FwUzADu4gO+Td09HU+X/p/wG5QyTQJ7iHQj9GzPezeuWLTYtWB9sGtkvZZ1/
St18lN/y5ivAPdwrsh0TjBms+ViVHxDZZw3fNezzHwf2EcFXhDXx+oplStZK
/BvRjeG9oH/BDwebBAMHC8c/7OiyOVgngU/WLSuBoReRj1NzSfChwpdqSmi/
Tny88PXapO57R0ZFVoXP9ELgNRVuJTY9sG0wbvDxOYm5V2DGYMfHaTzL88ZE
wUZvSzPfrrJtmXA+4H7gY4E/2f5ggGVzDP9lfazbXwW/lS4V88e+z9umhW3r
YpW/rPKXSubH/E/51mAPOnep0t2q5ra8hL6l+vthf8ibX4GvG/wJ1tZipu/A
V3m5aBsZtrJfNN4BeXMu4F4cz/pWNmcCfx3en1sD23ix9T6t+sfmzZmAOwHG
AtYyruz1uoeOCWXPb8gi2Nh4vznXU/ntwNTy5qDCRe1QN78BnkNe99+ANbvs
d2go3LnIzx8O9rE8K50bVvYz+p/Sb6eWta/WueMy+YGxoPOtVdk+qnOV8r+q
/hClD6kb6wbX/zW0fodvap+c/RNPUPnIsjlw2C+OyPTt85Svw53I5P/hGteH
2H8y/RxfypWh1wzWjvWy+XuZxvCi2n6t9JOq/0u2HuKTA1+bNY21rWPk8fye
2J8Iv6JzQ/v3vZo3Zxju8MTEstke6usClZ9Y9/x4jcq61J0fVbaPBvYw9IM3
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
l3h/TdYO9mBjL7b/A9owWG4=
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwt1Gto1mUYx/Fbm+5xPvNRInuhBEoHaUYnsZyTPBVIvTES6c2C0MCMRTEs
SdEwcyuPc85sM6dUmqxZc3mK3Km1VqawPGZ5jlLBFJ01ndrn5u+LH891/e7v
dd3X/37u/3/Iy68/X9QzhDCJetHxviGcF1zPCeFEdgilmRAqaWOfEJrleT1C
OJQO4d9+IfyNOUd/4K/JO3JDyNesORXCSewH6p7D7hPXqM9Yuyj/Endcn1m4
jdbex3Xxv5Bn5P1ps/g33nBci3yT+ipcC+81c97oHcJ8zPfyQfZOZTHNcha7
FFdrj0o1b2EG6/EorpnuE2/HbLD2Ee4orkF8GPestULMQ7wL4gW8y9bW4vbz
xpr/J94Z9Yt5edi14vJ4NvgN8l9omPhb/mf8j3HVtMBsK9R2WXtErw5cmXye
897jWd7BjObVq+tJxR6nQJ5Ll8R52Dn6laltV/MjlalZx6+mG87gkj0GYOrM
eVO+N530uUO/5Zh98gM0i5fFW8U7KF+fTuZfpnYl/175h3qfErekkv/0V/t2
2jOf9ybvd3wtbgnuT97PqeR8DuBm2LvV/1Fonnv4xbgs/gjrjfKv6Bqvq19y
d+IdeluPgbz3eDPlBZEx51280/adqHYvr4HK7TkOv0i8XNxsvYVGxLsVz45/
zHxfy7v7Jv/HOPEP4ja6SqNxs3Gnre2Id4+mya/4Lzppuvg/XAHuBb+zeZPj
PRWP4d3prLaa6WnPdZk3Kp6Budd4niOeYYl+tXpf1ecC9lZuMmOcdYU+JfxS
mo6bgjsrbsedwk3ljee1857Uc5J+JWqO2eMl9VVmeUW+mtar2Rb/M/xudWt4
n/J28R7g7eF9wntYn528+3mtvGW8c/Jq/jNm/sYeE26/e/EdbKDxuC38CkxK
z+HxXvFKzfiG/G7z/RXvUry3dELvKv4WtU/E86Z3MTfNW4Rri3fNvp36deck
35n4vWnkz8V1907e7Sb5LjqjXw+96ihffhLbhCn224pfpVeGP8P65Jzkzr0a
vwXybNpKQ/V4ym8Ftk3NQrUd8dshL8TWq5mrdo617/QalU5qFsf3yrPUe9bD
vAr5fFzGzOXqFqo/qE+JfkXWatLJ+e2O9zKTvJ/xPd2M3W+PF9XW4VbGbwn2
QXs0Yufx1/EeSydndEvPGv7j8pHZyV2Md3Kq2kreP+nkO/q52ZqsT5D/D8kc
4Mo=
                    "]]}, 
                   Annotation[#, 
                    "Charting`Private`Tag$2346346#1"]& ]]}, {}, {}, {}, {}}, {{
                 GrayLevel[0], 
                 Line3DBox[CompressedData["
1:eJwl02tozXEcx/Hv3GaMIc1ZLiN3YSK3xqRIuTwgpcbYNNZctuR2TtkDRaRW
K7lERMwe2IOVa4gHVopSmDEHIywplwfkAQ+8Tmo7v8/n/fn8fv/f//c7Z9TG
2lU1WRHxx/+unhEZ3dEjooyY3D+iiB6A3eoesTc3og5fhBViDXRD34ip9GP5
EflFbI18PlbUK+IKf1pnOf9Wp0nnAbZZZy1WrJPmm3W28Pfkn/kL9pLic+2h
y7ysbhF3dQ5jv3Xy+Rs6J/hf8nH8Yt391r2E5fSLmItdo5foraBXyOvlrVjC
mNApxx/Kn2ErjRv44j4Rx+RtWIHxXe+ICvyR/DlWSU/Ijminh8o/yjdjJ+kX
2CbvVMVP1HnJV/FdOtXYKZ0OrBrbwk/SecV/kW/nn3hGOvPe9jBctxabT5+l
X+Nf9XZgz/Xe8CPxnXyJznn6LfZdZzfWSY/F9tIL5Bcy74KNN/7QSeHt1nmP
rTcm+dXO6KL8KTbQOMQZrcOP0vexpfQn93CV/uvcs+WzsQPyRmyqdUbzaZ3j
/Dedn+5rEJbSeYwfwmv0zmB3+CR/W+eTe9+qU81/MK+Dvywv5RvlrXylfBnf
Jm/hi+23DJuHjbGXg9acQqetXy+fLl8mH4HdNGePdVJ4Sp6XeY4syQ9zPgtp
9biuV+h89uBJPcvGbrrTnZkeV+XD5DuxEnNsMSr06jz7jU6fzP0ZEzq1mT3q
pPkcvFxvn94rXhyDfWzTmaPjqxAt1q7mCywyC1OLPJ0qbCZvejTrVPIJnRmY
v+ib+Y5iomjysZ7Ol08Telycw3J0SrP+/87/Ae41ejU=
                  "], VertexColors -> None]}, {
                 Opacity[0.45], 
                 
                 Line3DBox[{31, 380, 1761, 32, 2083, 383, 33, 957, 385, 2744, 
                  1402, 34, 2290, 639, 35, 388, 1762, 36, 2088, 390, 37, 1412,
                   1763, 38, 2748, 1415, 39, 2430, 2593}, VertexColors -> 
                  None], 
                 Line3DBox[CompressedData["
1:eJwV0LlOQnEQxeGxAcQtca0JgkuM0mhjpZWdCTERFzSxVikMJipeMBiwtFEf
xEdQ3oTa0kjnR/HLOTNz/jM3N3dRK1+PREQFr2MRzcmI6fGIBtZGIxL10UTE
g/qN/qKWjhjQY/zhBI/mLdknzPA5vQ25hC9k9OmP/S3alpkdZqYi1t04lW2r
3+mNNz3zL3wjr7cvd4VnmXvasOeO1pGgiW038rSAAxTRkf8cvrNnjt+1q+Re
lXbVH/TWvVWZZaxgCSlkUDJL0z7m5Qf2nPHnOOQvsaDfoXtZ/4lW0MWO73kx
2+S3sOjWP+w1KP4=
                  "], VertexColors -> None], 
                 
                 Line3DBox[{45, 1712, 1193, 2629, 44, 1765, 1527, 43, 1192, 
                  2628, 42, 1735, 2938, 1562, 41, 395, 2095, 40, 1764, 394}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{61, 1382, 646, 2754, 1421, 62, 2858, 1579, 63, 
                  423, 1771, 64, 2118, 425, 1112, 65, 977, 427, 2755, 1422, 
                  66, 2665, 1268, 67, 1772, 68, 1773, 69, 2124, 2133}, 
                  VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzssuQ3EUxeFVkbjzCuoSgjBwiZeoATMSl2Jaj0FFmgqRSEuKeBNJ4wEw
8BAYM/CdwS9rr7X3+Z9Vrp5s1kpJKmgNJfXhpIHlvuRtNFkcS07Nl7LdkWQP
TXOHjtNrrA0kZ273ZVf8Ay3x576bNh+gh6/SG/t6sUPZPCtbcTdDt/qTLx3a
mLC7xardHd+gbf7bPOf2Ra9W8W95zVtNukN/8YdtdDHpZt79uo4X/KH5XvZI
l7zxiqmiM45kx1hAr9uO7AndweSDf8eGjp/0R49nu397Dynp
                  "], VertexColors -> None], 
                 
                 Line3DBox[{75, 1423, 649, 2295, 1652, 74, 1775, 1201, 73, 
                  1587, 2862, 72, 1774, 1200, 71, 1199, 2635, 70, 1713, 2924, 
                  1197}, VertexColors -> None], 
                 
                 Line3DBox[{91, 1386, 656, 2762, 1429, 92, 1654, 2300, 657, 
                  1432, 93, 1656, 658, 2766, 1435, 94, 2301, 659, 95, 1782, 
                  96, 1783, 97, 462, 1784, 98, 2151, 464, 99, 2152, 465, 1785,
                   100, 2155, 467, 101, 661, 1786, 102, 2303, 662, 1438, 103, 
                  1660, 663, 2767, 1439, 104, 1661, 2304, 664, 1442, 105}, 
                  VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzctKQmEUxfEdUhrdnqGBmt3oMu0hIiwQGgUNnNSDRFmSJIod83Y8R2jU
Q/QQPUw/B4u113/t/X27d49XDysRcUOLjYi/7YjznYjjzYhrPixGnPFTyvWL
rYh1Owk+sXNEJTnHM33G2/IhPqID+nY7x+f6C12jFHGCJbom/8VSXS7fmpv6
mXzPM+zHzlTeNw+ov/xb7vGeXKOxvMe72Mhcd1vzZxf7kp+8+2GuYJe6N7lA
Q12KvS57tx07VWrJMzzRT3lRruBt6thblSf4p/7Z/ELveEtfpjV5rE/N/yod
Lps=
                  "], VertexColors -> None], 
                 
                 Line3DBox[{2988, 3238, 3677, 4066, 3837, 3838, 3396, 2142, 
                  3058, 3800, 3240, 4002, 3059, 3801, 2145, 3060, 2989, 3119, 
                  4003, 3061, 3246, 1956, 3248, 3430, 3431, 3247, 3500, 3120, 
                  3251, 2370, 3432, 3250, 3501, 3974, 4004, 3254, 3433, 3434, 
                  3253, 4021, 3502, 3121, 3257, 4022, 3062, 3256, 1963, 3063, 
                  2990, 3243, 4005, 3064, 3921, 3964, 3965, 4072, 3244, 3973, 
                  3971, 3972, 3802, 3245, 4006, 3065, 3397, 3892, 2161, 3731, 
                  3066, 3259}, VertexColors -> None], 
                 
                 Line3DBox[{3004, 3289, 3732, 3288, 4031, 3741, 3003, 4040, 
                  3286, 3285, 3002, 3283, 3963, 3282, 4029, 3001, 4069, 3279, 
                  3278, 3000, 3132, 3131, 4016, 2999, 4028, 3130, 3258, 3129, 
                  3508, 4043, 2998, 3507, 3128, 3255, 1968, 3506, 2997, 3505, 
                  4042, 3127, 3252, 3126, 3504, 2996, 3503, 3125, 3249, 3124, 
                  4015, 2995, 4026, 3123, 3122, 2994, 3271, 3270, 4025, 2993, 
                  4062, 3268, 3267, 2992, 3265, 3264, 4023, 2991, 3733, 4057, 
                  3261, 3678, 3260, 3263}, VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzr0ug2EYxvHbVNJWOQSH0FiQEFppxCipFV3R+jgFi1OoQeNrt0kIQyVC
YuhMGl+RCCHEVk383uGf6/5fz/vezzNUqc1VeyKijPN0xGN/xFguYjwTMS9H
dKNJ4k53mo1I++YkFZE3LyPLV+S98zO5yyfMbZT6IlZ1JTT0W70RD/pF8xIW
cMNrcsrOpvu2fdORT/pJvKDg7DnZL1/ln/MrHHtXgRf117zh3zfeNdft3EGL
f2DGW/Z41Vve+YXc57d2FPlX8g7dgW5NfvKmzPFp8w9m7Rjg6/pvfmg+wqX7
h3UbGOSb8tf5P1R0NdI=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0E0yA1EUxfFrpIpgDRbgY4IREUuwAxbAMkzJgIT4GmEBCKqJrnQqJFEG
lKpUYWoZfm9w6vT9n/O6b7/pze31rZGI2KC38YhiImJtMqLDh6WIxlREi06w
NjbQyXnF/Ikf0ZfeM7aUuryvU5b/0ip9yE9lj7RIDaync86H5jOad+5d7xX/
41dYlbrmHX5J2ai9zBX5gA6xh/ReZws8S98216kvL1Mb7/E5WQffoxzb5Rc0
i7+k/bEunzEf4wWN2a+Fr/Cf9D/pHlKmVzcveK7xJ50757493/NcXpM16QBr
YpnOLV9O95F42lvvBtvHrnmJ/wPqX0Sy
                  "], VertexColors -> None], 
                 
                 Line3DBox[{151, 1318, 533, 2782, 1462, 152, 2647, 1232, 153, 
                  1606, 2939, 1737, 154, 2637, 1208, 155, 1210, 1809, 156, 
                  2705, 1331, 157, 1810, 158, 1811, 159, 2219, 2915}, 
                  VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzksuA1AYxfFjRIJKWIEtiB14UwZdggWgyzEWKXbRQdGqUs/SiFdEIpFI
RDHzMzg593/O9917x1fXS2t9SYrUHUy+hpLJ4WRrILnFz4Wk3Z98yleopbuR
H/Nl/EFF6o4ku2ab8o7+iI/hlt13/RKN4oZ8mk/RDi3K36hp7trennd/cdV9
V3jB+ZUa+ktc5y94ni7wD6/YOXc+1G24c05W5meyJz6LH2lfX8F1f2j/z/Oa
7F43Qwf4VF4wc4cn8Ka7S/5yIt92ftD1dN/0Bz1GOH0=
                  "], VertexColors -> None], 
                 
                 Line3DBox[{165, 1152, 548, 2225, 1609, 164, 1814, 1617, 163, 
                  672, 2309, 162, 1813, 544, 1012, 161, 1150, 542, 2222, 1322,
                   160, 1812, 1334}, VertexColors -> None], 
                 
                 Line3DBox[{181, 1238, 1820, 182, 2810, 1514, 183, 1213, 1821,
                   184, 2906, 1676, 185, 678, 1822, 186, 2246, 573, 187, 1476,
                   1823, 188, 2788, 1479, 189, 2714, 2491}, VertexColors -> 
                  None], 
                 Line3DBox[CompressedData["
1:eJwVzjsvg2EYxvG7EkFa7Shh8iEsSGzOk/NhI4wMhNXobHDYrWhCwoewIHUc
lFJtw1cw8Ovwz/+5r/t6nvdtnVkcWkhExBxKyYjudMR0KqK+MeIuE7GHK9mL
+cv+mVvMu/Icmpyn9Jv5yW6QB3CJSXmtrFIXUXT3QD+LdlkNPmUXehN6XfJb
7ODRrl/+wNvmPM7N43p9XDD/8Hf1284pvVWu4AhrWMGH9w/5DCXdpF6ZK+jF
WPU92Y39Fu6de+Q53jSX0YlRvWXuQMGbs/ynl+AijvEu3+BTpDHiTobf5Eu6
w+Ysv8rWMV/9L3Pe/oT3zSdo8+1f3WtZg/M/opY/Sg==
                  "], VertexColors -> None], 
                 
                 Line3DBox[{195, 587, 2257, 194, 1826, 585, 193, 1164, 583, 
                  2256, 1347, 192, 1825, 581, 191, 579, 2253, 190, 1824, 577},
                   VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz8kuw3EUxfFLzeNGTC1KrPAIImIvqVarkdgIiSmtVlvDA5gexyNYW9h5
BkMjIfY+/8U359xzz/3n95/fr+YrHRGxi9ZQRHk4Yge/2OuN+KGPaNrNjEbM
IjMY8TcS0SM7NB/gyNyWH9OG/E12w2fdlrDEL/ZHrPPd9tfmC5rRS+PVnO6L
mOSnEnxrmnbpPLh54uv8ld4l1mTj+i2+iBI2BiJW5TW9Z/McX8Q2JtyX/U9T
fm6/zL/wVX4z+S+dAvL4Tt5s36b3qOhs0QXvH9NNmRtuT+mXd57Rgv6Hzh1O
zDn6jqybT9opu6Ur7v4Bm8wpYw==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNzstKAlAUheEdFJrXHNS0GkVg13lIr1ADRxVJUSTqsPsDlKldfC2TskFv
0CSiwBz7DRb/3mutszmLlcZOfSIiynSeiWhmI4aUMH/jfiLiAe/SEQfmGj9J
9/YWf9r8g4eyf2zTSi6ig9dY4c/lI1J6s9j0ro5pewOP5LvY032lR++Oeb+Y
0XnCPn+VLuxb9qWkP7mzjCX7JX9Nvk4Dt555Wd4fnrj1ggPZOxW9ecMrecuN
Sf2ceVvnVHfBviH/oCrd0Ccvr3NmnsG2d0PziL5SEXvyDm8Kq27MY0HvVt51
dxPHZAwsdA==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0LlOgmEUhOFjBYpL64IaiZ1SYQJqaYMxMYSC2thooybaaQwGoXEp3MEF
78beS/AqMLg+FJP3zMw535/8M5t75d2+iKjQ2WBEcyjil0bNHTxMRPxgi/LD
EY+YHYk4ktf4MXs5vEpFVM0ZfS4Zcc0f93Zk43TDP+kmzF2s6p6x4PYLM94s
uCthw86b/NbNuXldVtTd8as4y1/I9/Fe9o5/3riUreCanS3ZojeW6EW2zZ/4
ZoNP29vBB7cD8km+H2v6puzD3NF36ZM2+JZ8Dg9oyv48ntpf6P0TXds36vw3
TutD/mpexn8ixy3e
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzMsqxAEYhvF3IkMzwwaxtLZ3WJCNZmyY+aewNBdAyflwRYoiZW2jbFBS
ip2FaxDDbxZPz3d8J9rbxVYpSQvlWnKGscHklMf5o5yM8rO+DydYGEpWB5Jr
86KaXHGP+V8l6eVvszs3JfWS/1lumYWPcYQRP292T90/u0Oe81PIneeO2aWb
e/WMXUf2l/62P3lXN/x+6n/dTdsfYB8N3Lh5sJtS76Ep80LfdLvD7S5yNxG8
yqpynWtcwRo2sI4ffy925/7q8naxLHNSv2I3zI9mi/wPhoIqgQ==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz8sug1EUhuHVdkBbPTmkI6RchhGSphrtwEiiRTRISJgaoQ4X4iacGiND
FyBOdyCRJhJh5Ongzbu+tdbe+/8rW4crB4mIWEU5F3GJmXzEBc/y31DEh3oc
TfUEb45EjPE5zlCx92M2ze/yKLp4kNfTEfVCxIYzS1xDQt03+3amKpfsnqJl
d2pwxvxNfjQrck9vTX3PTfl52LtyF0douGdZv4AnO3N8gmNMyn3zV3Uei/ar
2YhP/Yy8zbvYQV3+srtn51be55zeAt/Id7jKRHS47RuL+sEl/tVPcmrwf+6f
55bZtd0XdzT4H4ZtKx8=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz9kuQ3EUxeGtRCWmRBOhKiEx1HtoXBStciVuVE2JGN5PDC/hEkUHGkP0
kojvXKz89lp77X/Oma2eVU57ImKbJoYj7ml3KCI3EvGTjpjHB1lzMCIzGrFK
v/IxrOq15JP2Nb36QMQ1duhRtoB/ukXznu46/0kflJW947ObtjeWvXdCwRew
pl/X+dIp0ZR5jRr2N/yrm1ts8SV5jsr8Bt25f+L3vbFiTulcyt/cnPMd/gKn
dXbw266bfAt/4GbG3KuziC+yCjawT1bUP9S5Sv7Te0fmcbt+u7ysad5MvguX
MC2fw2O9tmzL/A8s6TRm
                  "], VertexColors -> None]}, {
                 Opacity[0.45], 
                 
                 Line3DBox[{3, 351, 3179, 18, 2954, 382, 33, 1101, 401, 3197, 
                  1567, 48, 2961, 421, 63, 436, 3216, 78, 2975, 456, 93, 1430,
                   3800, 108, 2992, 1444, 123, 3007, 514, 3292, 138, 3024, 
                  535, 153, 1673, 3927, 168, 3038, 1212, 183, 1537, 3856, 198,
                   3047, 1217, 213}, VertexColors -> None], 
                 
                 Line3DBox[{5, 1397, 634, 3358, 1644, 20, 2955, 1542, 35, 405,
                   3200, 50, 2963, 424, 976, 65, 1121, 440, 3222, 1586, 80, 
                  2977, 1283, 95, 2989, 110, 2994, 125, 3009, 1205, 3679, 140,
                   3026, 1207, 155, 1211, 3682, 170, 3040, 1611, 185, 1215, 
                  3685, 200, 1487, 3823, 681, 1394, 215}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{7, 1398, 635, 3359, 1645, 22, 1406, 3791, 640, 
                  1647, 37, 1414, 643, 3363, 52, 2964, 647, 67, 2972, 82, 
                  2979, 97, 477, 3247, 112, 2996, 497, 127, 3012, 518, 3298, 
                  142, 3028, 538, 157, 675, 3383, 172, 1472, 3815, 679, 1667, 
                  187, 1478, 680, 3387, 1668, 202, 1488, 3824, 682, 1395, 
                  217}, VertexColors -> None], 
                 
                 Line3DBox[{1754, 2069, 2625, 2070, 2652, 2315, 2089, 2090, 
                  2748, 2930, 2931, 2106, 2947, 2107, 2946, 2854, 2121, 2122, 
                  1773, 1933, 1934, 2136, 1947, 2147, 1948, 2451, 2151, 2456, 
                  1958, 2166, 1959, 4004, 2457, 2168, 2461, 1968, 2187, 1969, 
                  2462, 2189, 4027, 2469, 1979, 2205, 1980, 2206, 1994, 1995, 
                  1811, 2231, 2232, 2786, 2933, 2934, 4071, 2247, 2949, 2248, 
                  2948, 2788, 2936, 2937, 2262, 2951, 2263, 2950, 2335, 2735, 
                  2279, 2733, 2280, 2282}, VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzrErBHAYxvHX4g5XN4pBzmJQVoYbTTIpmSznkqg7JsOJf8CI4Qwsiiw4
pnMuURwWKalblAwGJlmUfAxP3/d5nvft98vkiuOFlojIUbM1otAW0d0eUcTO
ZMQiHqcjpmQL5i5ZCXv4R/myeUC2ir0dESs4yGf0NeqjLD+PFfv9dubMKXsf
9CD7xG87YzSqm8AfutJN4pd/5fGE/8UZmqW9RMQSbrk/1ZWxxG/jHb+Da3zF
XoJqdCSvY5r2dRf8Aa57d9rf8pR0t8lf6zawqh/CV3qRDWPj/10csV/Ge77q
7s18hs98HS/t78rOzU3ZDWb5J3nD/C67w0PZLabwD+G3O9k=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz69OgmEYhvFHgvIn2AiSbASdZ6AzQ3DOI6AJToPDYNKiUwKegRLVwQhq
QAJdGVXdTEwKmnSOyI9w7Xru+3ufd++3XDrY3p+LiC18zkcsJSOymYgcd9IR
z1gx/2EVw1TEGp9xdSFi3XzEeTvnug25xnv2TvQl/SkfygVk5Lq8Y77iIu/a
KaOCO90x33MCD2gv2tE9mlO4la/lGzTwqmtyny/dd4GW3PSOf7zpO/I7T+QW
urP7eNN7Bu778u1FN+Infd/c41/5Y/b/XHB25O4yVzDWp5355h9MAXC1Mik=

                  "], VertexColors -> None], 
                 
                 Line3DBox[{11, 1085, 370, 3187, 1553, 26, 2957, 1220, 41, 
                  1573, 3879, 56, 2967, 1198, 71, 1202, 3674, 86, 2983, 1286, 
                  101, 2990, 116, 3000, 131, 3018, 1302, 3738, 146, 1149, 
                  3652, 541, 1008, 161, 1154, 559, 3328, 176, 3042, 578, 191, 
                  1632, 3912, 206, 1492, 3827, 624, 1372, 221}, VertexColors -> 
                  None], 
                 Line3DBox[CompressedData["
1:eJwVzs8rw3Ecx/G32sbmwF2UfwAn/gFnsXJSklqhzJHbOChFKdt1Ozg4yY+D
I227Oay5UZSUMhK5cJzH9/Dq+Xq/Xu/Pj9HljXyxJyKW6DkTMZSLGO6L+KH7
gYgRXJTN0hyt9kY8yAv8Gp/Hacr1R2yas/iq3+I/5B16MX/iO43px+lIP4G3
ujJ/mI1Y8FYFq+Yz+SBf46+c6+rm7a/QOr+DHTtFfo/fplJyr/laPsmX+Sms
4I2s5J66+3axZW7wJ9441p9i2/woP9Df8fuYlp8n56mpu8A6venb2MGavWpy
xtyw36VfeUr2hxlsyp70LZzxpxT/RWm61H/jPxowPL4=
                  "], VertexColors -> None], 
                 
                 Line3DBox[{13, 1219, 3688, 28, 2958, 1497, 43, 1194, 3671, 
                  58, 2969, 1576, 73, 655, 3372, 88, 2985, 469, 103, 1436, 
                  3802, 118, 3002, 1450, 133, 3020, 526, 3310, 148, 3033, 545,
                   163, 563, 3331, 178, 1163, 3660, 582, 1029, 193, 600, 3347,
                   208, 3051, 628, 223}, VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz79KwmEUh/ETQf80ghZpaKigskVEMCLHyD2ioSXyArLBkGhpbG5pTiSw
bqAuwCkMIsOttMEluoIw+vyGh+e857zfw/suVap7J2MRcYD1yYiHmYh7fE1F
DNBSj6ciGnyLJn7cO+RF/uMRftFP8nMRGS5jVi6NKi5Qwjbu7G2bt6YjCnJl
3sUCnvRzep/2vHMXb3jFh96l7GjCe9Rb7j7rH+l1+AUbyOIcN+bXdq6qN7mI
M/WVfo2/7cmrd+QLGDrnnPPqU64kf8Qj1mQHyS70cWze4zp6cis872/LnJbf
N8/IpdT/rgkukQ==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNzjtLQgEYxvG3Ie2KtjkFwRmSoBZFcBBa0qkyIvdoaen2BYIgghr9BjW0
tDTamA3NLTWWgTa0RCEIQv6GP8/tnPechd3DrYOxiNhEPh2xgdp0xOdERMJX
+TW8yE8YTkbM6xt0B4+6D7mbiah47l6Xk+u0OeUuTeFV9y7P0T/6i3U8yzNY
xYVbt+6M8xWcyw/yHf+firjhy/yJ/pr2dSW6Lf/wBX7AX9EjtxO0UfT9bxRQ
tZ/av/hL9Ly3QhP/vkyL9mP7Gd+x5ekiGvY9/T5tuflmW5Kznp9FBiMvSypr

                  "], VertexColors -> None], 
                 
                 Line3DBox[{1834, 1872, 2732, 2277, 2734, 1829, 1869, 2935, 
                  2260, 1823, 1867, 2932, 2245, 4012, 1817, 1864, 2230, 1810, 
                  1860, 1993, 1806, 1858, 2204, 1978, 2468, 4044, 1798, 2373, 
                  2372, 2186, 4042, 1967, 2460, 1792, 2371, 2370, 2165, 1957, 
                  2455, 1784, 2365, 2364, 2146, 1946, 1779, 1845, 1932, 1772, 
                  1842, 2120, 1768, 2941, 2942, 2940, 2929, 2103, 1763, 1837, 
                  2087, 1753, 2627, 2626, 2624, 2066, 2068}, VertexColors -> 
                  None], 
                 Line3DBox[CompressedData["
1:eJwVz68vhXEUx/HzCHjcYDY3ETxThOcK7mxc0ZQbGO2OGQIKGmZ0RfMPCIoo
qMYkDbcwP0ZQCKgCrye89/mc8znn7PvNljZm1pOImEXaHrGaRky3RdzQPtwh
Q7kjYpM2MS/PzOb0tTViWbbGr9BcXil2+X36jh3ZBx1CFZeyC4y7cU6r8i93
tvhDfpvWzI3hmh/AnNku9Tf/1hnxQ3/t7NFd2b1eWZ6rKxhEU+9I78zNWili
BA2MoqR3bO/B3COe8Ixh3Mp67E2iWz1FX+gBTtw8tdfg6+Z68Yk/deLuBFrQ
r3dlLyneyad0Qb1Y/Iv/BxKpLsc=
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzjEvg3EUxeFbTWgrwkBouzAwsLCIRBoSMenUJtI30aGlsQghFoPRarWY
pRWTiESCD+AbSBgkXazEYBFPh1/Ouefc/33fqeZBZT8VEQkmMhHjgxTJQMQY
zaOIAt76I06zFLv6b/uzfBdzPdWf0Z1cxLG+pJ83L+BTNy3fkDXcOuSPsMfX
sSmvmhe9+7HbMi/xv3yHnpiX6f1wRIre4pE/l6/wGbTNz3QNI7jW3WCdH8WH
+y3feui9oRX/tUqrtKC/oxd23t3pml/s1WSXsoROyp7oH774V/0Wn9bX6Yzs
ii+72afLypoYkm3TEv0HW64rUg==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz7tKg0EQhuGRoIkR/AuxMiC/B2wVFIyIpjQQG4mFFgqiYOEBLCxSJrkA
vQixEC9BbCwlFyBoZ2OInQhWPlu8vPPNzuyy+dHlzsVQRDRRKUVcjUa8Y78Y
MVGOmFPP42MkYlo+1Z8di8gxgxbOUUQJi86/zLa5b36A74TeLt/qX/OqO6t4
US9gye6e9zO9DWziz86ZXtPZur27LKLAN3qf6hX9mlzGm9xJ9zvr8pb9OpbV
D9wz88sNbGMy7eDJfJ2n8OiOZ7mHhpyjav+H7/kg7XrzkNfkVx7mgvlxPpYz
Pkl/4H+wZCeg
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNzksrhGEYxvFbaZwSUWwcMhaSmoaF3eRUk0NZiNKMUhasmKlZWfsMU3Z2
fITZWSgZG6LIJGUzTbMaKSUrv8W//3Nf9/U+zztxUNg6aYuIXYx3RpS6Iva7
I/IdEWM9ESMYxWciYo8bdu2csq/LTjkrW8Ux1nCNSUzrndn3urNl/kLLNznv
3DrfoYp7lHUudL95EUt4lM+goD9ozthf9nmfy7Kq87A8rTOLObzIrmQ3Oj+8
jg3U7N7wJH/lLA9h2T8W8e68wtu65/Y7PM8V/sOze5s6IcuZ80iaf/HhXzZ5
Cg/yhLlf79B5gI94gf8BV9MuFQ==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVzT0vg1EYBuCnkVA1+Bg6Waqbj8Q/aVJJWWhjwvD2B6BYKhZqIKmRxU6i
Yxd/oJgIFuksMSCvxNXhznWej3NOYb1eTjIRUZH3bMT9aMR1LuJvJKI0FpFy
khPyox/85q+sOb+ZV/nKl/GIlv6J3HjrmI/609584Ip6WS7Mntlmxd0h8yvp
2PniHS8Htff27DTsNpgfzPR2ndNh/3NKb5W3dlKeqs/d/+QZWyzpL/jnUN21
1+Ssek4S2VHPc5sb5kfuLLpzwL7U9T+YcJ9Fs5rzDKvMcUt/ybnHMp+4KXnv
/QNdojJX
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwNzr0ug2EYBuC7i582aQeLGCQSTkCcAptEJTqwtJVYCKsQEmVAwgkYbc7A
AWgXk0TDzKxC/AyUa7hzvc/zfO/zfhPNrcXNQpKqPA8lneGkVEz+BpMi+2zr
jculuqdeKyUvXOGyfOr/yIc8VZIvds3LZvescF6vJh31Mdu8svPCmy31EcfU
h3znjT0FttR35tfqA+f+QNLgrV6dv7LjXOUuF/jq3jfPeeqdHk94xjn9fedZ
7nGGUzItk/ImdXtWzRpscsT/b7tbNtvgo9T0u1ziA9dl1Pf/GWgxDQ==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwVz88rw3Ecx/H3dtj8SBIXhx0cyF8g/gQumMOUyyJbO7AyF64kjpzmvBWX
TQ2Jq9rRRS7cppSbKSmlPBxePV+v1/vzfn/7jq2Ws5uJiMjRW0/EQn/EIiX4
IgbO4Sw98Xe9Ecm+iG464lH+wF/dLbXlSzw1f9Xfyx18GIxo6TN0Y3atT/NX
eCIf0zk/j2c4YOcID6ltN+ltU3cgX8gNfpuvYwVr+J3yXazSJ7+k/6Esldwt
U94/zMjjOP0/w3e3v/h9bHlTsT8lb+GavKeflHexQwX9hLyOL/IODcsr3o64
t6wfknP4bLZBo2Z/m9gxoA==
                  "], VertexColors -> None], 
                 Line3DBox[CompressedData["
1:eJwV0L8rhWEUB/Cj8L4oN2UwqMu/gFWhZGJgka7FShfFZqD8WMyXzRWDDSnZ
0Cur904WP/Zrsemy+Nzh9DnP95znGZ7BpdXZcktELKjvNCLviEjZ0xmRMOWL
7FOfMXH+TSI+nBus8UT2pa+yzrwQcWf30eyKf+pd3uAbL3ltNtoVcc5X987Y
Kt/XP9k5YMYL2YP3js13ZEfsk93LKvpt2ZYa8da6c6/ZGm9loa+oU+8Mm1c5
zyGVm8/Ye+Y052Q/vHHes9ft3i7rPFQTZmWzcU5xjJNcsdPm7jKLbFcDZpvN
P1OLzb9iiRvsd+cfZeg0UA==
                  "], VertexColors -> None]}, {}, {}}}, 
              VertexColors -> CompressedData["
1:eJy0vXlYjd/3N07mIpmSUmZKpEKRWGYJlTQhSaYoIWTIkFCmSBESEqJUMk9J
p9OsolGpNJ3TcDqDISTkOZ/fe93uvvt97d/h83yf/um61nVf++y9htd6rbX3
ve9BThstV8u1adOmrnubNu2k/zdNmPakqFgEB6PemnjvqYRjclm2jk9SoM3/
9/cetpy5anxLIgb78y+WHhtf91v+ujAlOMpdDGEbbO7tb1cLBXu2TM7a3gAb
X/YdwnlRCgsGTG4565wMYWXyXvN61IB7wkmV9tOyYMDwvpOWbUj8PY6vxSG3
SUuEUP7kukvzyKrf8sO6dh+yMiRgH5qU0ctM8Fue1Fl17JFddRAQqzrP7kIR
XDN6ErrLjgdF+10lfpAEtksCw9vu4vx+/mNCzNfCYB64vs3bs52T/lu+3bsq
YqKVBNx6TjV5oV3/W95+8xqRVYUILENHrhp7kQ89F+twUmzrYWpM9weD9N5A
olk7henGSfDj887t/X1r4VpKr7Zd3HNBd3tH/rNJ3N/jvFeZzTMyFkHg45gX
6xR4MvUpzD8XKNddAuu/zuPM8Wblq0ztprjE8qFrzMpno7Rew9R9ff0vzOUB
fHnaOfUDFwQ6gwUvN3MgP2npy3H7RLAv6eKEXx0rYaDkiLWNL2tHt+6T3Jcb
iEFv2LAZZRtrfstfGnqfvntMAoElb/n+91g9cFHPJ1DPm9IGlveawQffrcf9
vOTTQWdb8beD3znQuM5f+aOhAHxnpxpaexbD+LMH17V7nPR7nBu91OJCrEQQ
rGK1sP8cVg+fn3jKZ2dL4JnVirHltqx9NVJLRtyY2QAHi51FHJ8KUPJ+W3K+
Zy38it160X5aDijVnOOs+54Icl/+0f9d1P9YQv+kf9L0+bOTWsbYgXx4naeZ
qWqVBp1uVWrMrONAZFT69J7t6kA1cFmU7sM8uPlWsWGkFzt+oQcEvK2sh6D2
kWazSkpZv+qztXqzowR26se7R85l9Vk440YXgboEGid1OpEczto3EfV8DPXs
4C1p1CupARfHOVk7Y1+DyrBH9nmlibB+x12nd9V86PL+3LeNizIhNrrOeK4V
G0fhwY15hr1qYZX9sTkuS/N/y6+N31dmmS2G+ZmFxTXVrB4iAoOMep+RwPhx
4/ofyain6x/9fwL6Pwf9nxbvNP+Upc84z4en3y2pBaUb80LsxxXI9NsfAifX
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
eE9aGN6TxjzfU0/uaIaLBIbfuWngvpodxxLPsevgOXZGbny2l9rw5zzYpyt8
M/FUBiitfyWOnlMHOlPH+Z9flw/zCqNHKIRzYW76djPD//Ql9c8WCLqnwhd+
3DOFFA5MwPcUEinvKUzC9xo24nsNM2sUlw04Wgd9VcPVF/ctgEVWx9c/yWh1
/wC+3/GFeL/jIL5vcgnfNzlq56PksYEHUxIUPU2jk+BkgkP7s4c40NK+z8NL
D/lw/3PE/vQ1L+G+4yMrs0ksXn1x8LL+rC2GgBbdI8tsWD1YYv9ch+ift1n2
T7+9d89/+u338Tz2NjyPPQ/PYxsoW0smK9WDTWFTZg+PQuhvLTRK6s3q4cFK
3ecPw8XQrpflvQZvdnyTN9pW0TekOKaebdizqR6mj6vKyGkvxYUL9xWSf2XC
wt5D1XatSQQDnYunvBJ5oHrm3Ptu61Ok+f/+7SP3WfzZt36BlkGDCEaW3E0p
fMTqTW+GuMDhhjTvL/zpFdeDD27JUyr95gkhV2DqtLv+HYSJY3z2liXDs6KP
Y5aaN0CGS+OSn9alEHeopH6GZTIkorwU5Qko34bj1OA44TgO87tj8Hed8XcZ
+V6c51CcpyGuawCuqxOui9HDR9SDJeqBpjdSz3Ko51h8v0kF32+qId5vYt7/
Gku8/5WP76OV4/tov3EA95U6EPtKHX1fnJ1fLAGV8Q+a/DcLoBb3s4xwP6sU
97OecgIWamrUgebNcN0OP/Ng+7rUjxonWf+n7ceNtZ/9WUuanyuWzrPc30FA
3X/c4xx3XteDB80pJr0+vE0CceDFS85H2fU+wX3PYGLfs8MEgQVvlBiURsyI
CLerAT7ut07D/dY2uN866eKs7v0u8kCx48ThbuHJUDBiyrrqyxzqekMVs07P
keKWfIzP45caubDQYfY4rZHsevvivva0/1PbeUdFlTV7GwNGTBjArJgzOqAE
tQyIGEDEhDkLKqZBEcXIoCBmBBNmHQYVc04oWQmCEkUGFZoGmtBGxuztu6zN
4a371Wraeb9/a521+/Q+tWunqt9D7rW7xfR2eLlGCRc65BkPVX2X/Xiffgnv
0/fhffrViT3NFnvJYO6Pgk4TzCLgzFz9rat9Q8AC8wEsMR+gNeYDZFzRj3v2
IReO2nUbd2RPItwx3bQm01V6Hy4/YVB9C5e/kpXgvSd42ClHhdr3HwoPLnzc
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
/Yol+5RQt0WXejYJ0vc6HLNxj/MFJbxLr9OhaU1VfKyXvXxihgxcvYO69X0T
CRv/cjnyOFTqhxjML1qB+UVGWQ1ntN8hgz6y4ycH2EeA7F31tBP7pOdbdavt
a9pLCeeWR7bdkCaNi5lY17mb1HUu2td9rFUrJZg1WqvlE5QH8R93H0j0yoU7
gUHjNrk8Bb8Pj+zO9w2DAMzPNMP8zIuYn1kwqHf4xZ1yOD9hUY+6KfGg96m5
c9sroTAS7xMn4X3iR7xP3JWf0mDOUzmY6Z4odj6QABtMLRv+kyp9F0PM4+1H
8njb9OzXzFhZDHtMPxgsMJL+Vz28D22D96EifzifyR9OxfvZKuR+1vbZfKtX
T1Ttv5hZ6F+YCxlYj+BB6hHE81x+Ds0z+e5m2rDkbwV4+UYtdun2HDrpK2qe
qR8B17A+KAPrg/SwPigI/Xw3+vkk9HPRPuViC3sKjq8YHF9GOB4DcDwOIOPx
KY7rU2Rc03oiWh9UQHRpUjAPYRXJQ8j75852rZJCKHw2xHXldMlOdbqEndP1
sosxtTmoinuKidaTvcrEvbkdfms1bn4RpPj+fjR1lZR3wdV7TvI01yq6roTF
+1y+OzRXsHnvnN4ap/+WjjqHmahz+BJ1DruvfWmSuj8Hro3xCqkREw1wtuWl
vzuHQqLejHVXH+RB5Wk1wxoEJEOs8xrn53lS3KhaNO5efS0ldE9yzbkxVfLz
3ycVTtyv2q8ZzhiVOcFc6ofcFo9fx4cqIWx0nr27mWr9ie1XwfZjsH3xPtfJ
+zR40HfNu01y6G9jO7nVyXg4EVaiFX4uFHTRbk7spe+J+o39iX7jn0321bMd
UASpZ8eGOzaUqf1e9P2F3douMeFgV9V+pGHcynvRebB/9b1URWYxXMzZdv75
0ywYfcKrcMOwKDiI+ue9UP98LOGmPavj7189qhi2VB73ps7TXMjPdRnSaoMM
DOq9XZpXOwL0bplnyVTrmQ84TpfiOG2L43Rf/7+XfgnLhXRInNm7XiJUiUg4
PX6qal0Gb6tFyeXw+uZkl7DHCfDc5Y2FSXYZDss93W/7nijhko9u3yuqdbBO
+4qr+4EMDmfN6bXjThgEZd65pOtUpm7aJefSwEeq9fmF8MPDhpfJG6nazvbb
4FwItNgHjZRJsHd6TdMX2kUwd/Ij20mOL2HzmVELJ1lEQvH1GoWOwTngPUrX
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
K+e3UUL1mC2Pna/lwZl2CZvq1M2D3G+9endMS4TffIeeHe8pxX/3q99GXPTL
ha82BYHO8mR4n3XrePztPDBb9l3/7N5kePDDZOXBnDBotqmd+TL3PNBu3O7S
4ErJsLG70Te3yDDQQV2ptqgrdQh1pY4t3D/e75Qc9k985XOmdQJ8NnbpeS44
FM7Ea1/NDZdD1juTrz1cEsA/v6TDpgRe/0r0zzDSP38Obpp4MCkHsp70dfOv
FAtZj/dqZ4wIhc3mNcZXcJbDTGuHNjUGxMPU68cX2pwMVcsp5nTMasY1/nS9
ejHInZ4WbKpYpr7sgt6iES+KYWSCfpPltST/V0ZO3XJ4thLWyUdfWjRaWm8k
H86O/tNVCd//7Ohd6CHZ6yE3IR+5CT7IEXZDjnAScoSd/3Zv3DAtB5brB/vH
NIyFevMs3aOsy9xzbYr9fdMCJTQfsmDQ+FlleDHId/ho8pPvsMBi6ciz0UVg
fn97kzPzX4H+bJn9j4uRcLf5q0d7lubBniGjumxLSoKBFwZ0PnpX8pNpOO+b
4LxvttX7Tk6/ImhxvbCx/6WXMGty9nSr2ZGQW3VoB6/uBbB26JVVHbQy4KnB
M0Vb1T7Vq/oGm5gluXCiz5iLdYyfgqHFwG0Z3cNgxxCbQLt4GbwceMWk6blI
GPht4sHDd0Lg87ZOm4a55sPrFUcvtNucCjmxmbeMbMKhYtezyXpGOWD/4XUr
g7sPoejG8/7wThq/1fGcZAGekwj7c1zX+ZB1HaefeQTXe5Nxvcf5eQm+Zxa+
Zxa+548uP99zBL5nIb5nXdT1rYK6vr6o65uH/bYB+y0R+20ars9jcX1eB9fn
y9Ef1qA/6BJ/EP72jfhbIwNvt6n+StB+e6pP0TPJ/hr91h39djn6iRX6STP0
k1D0k1PoJxbETyhnVozHOTgep+F45Nb5prg/Goj7o61kf+SF8aruqJ/x6hTG
mWMYZ75gnDmPcUaBceYIxhnRzkLcr7Uh+7WGGD9rYfz0wHg7DePtboy3n8f+
jM87MT7bYXw+hXHpb4xLrzAufcK4aoVxNRTjaiuMq3UxrnpgXBXvo8d8r7u4
Hm6K6+FOuF84jfuFPbhfaIn7glDcF7zHfUFj3E+dwv1UFdxPifbPvY/5UUu1
bhk6OtfBUbVu6ehotmFgSS48uh2y8ZxvIsQa97irtyoM2qI9GO3RaBftGH2r
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
               "], VertexNormals -> CompressedData["
1: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
3eGT43q0p7pjsNT+O9WdZVufR/vFx/OxVW1GpIZ95Ud1ZYL6M5GPsm220fXO
wcfaiOvZ4j6xVXR97Pr1+1YKO5ev/+0t7OS7zuV+Jzu7KW0eJ/iOXZh6YCDx
35BmOwvaF/wB/8Av8Af8A7/AbuwD9sM+2As7sR/sD/tKChjYadVel5bj/Bex
Q6mOm18Y9pN03eiPo5uErmPt3ufWkV/AX+Az8Bj4C3wGHkO+If+Qd8gr5Bny
C3mIvEQ+Iv4Qj4hDxB/iEXE499wViT47NHbnT6HX+Mz6KxKd9m2iw7tV4vqT
J57S9TwuT6UfXa/epiaV1v/xriOtz255BT6k9bd4H7EkO/t/dG0UdjKvuTGX
yE7l0UpfaF/1azf8EPtiBZXbD9K+PqfcfEC6dN2LRNKlfOuCvk8p3890Vupw
VOjYJZ1dSceyuuMFEh37+1QY6byWo0tgwUfSe86Wx0kfshVj5NxIHyonvZLo
Q7zG+zj/T09Cb/L/6En2Xz05tN+M9aRT277xIb3Ks2KsJHrV5GykRN9ecWTj
BX48ZKeBBDfgCFyBJ+6H++O+WBf3wfr/0bcM9gRdmkbXcRztel2RXG/WtViy
vmVZoUQvu0XclqyP13gf5//Zz/9rP+oo6irqKeoo6irqKfgdfA+eB4+D18Hn
4H3UAfA/eBC8CD6EfcAbdv7nfIv9h+95e4u45es1Hm6iuDVYEzWA4rbzp5dP
yZ4VWW/IHm5voONO9jx9UjuR7NfwnvBS2M93nBhpSPZHbyjeQ33EDDvWS/QR
zODg9yMUz4/2X2wv4pN96WVBOLDg1k8lOBhopl8i3NxXPyDcmOfPt/ckuu4f
j4PXwefgcfA6+Bz8CL4ET+52ubtD9Ik88ugxa9EncrMwi8/UJ6qeeDWTru+e
cFCH+gB9y96VdL1GWX81wW9s7FiNCsFv7HrwPl/itx0K+6vovmtuZNJ9mc6B
E5V034pG4z1kZ9++rgtJv5sV9T5MdsrqJvwU/Sxz23nRSPSzzPtpiT31s9BP
0FPQUdBP0FPQUbAb+4D9sA/2wk7sB/vDvrZ6xhmK/rzleFt5Ri/q0yebRawR
fT1rZbd0u+jr2eu3yVXU12cMVF9Bdjr3XraR9Pjf3Xfvk52HboXvFnWHyy2r
1xT9FI87+bCS6g54HLwOPgcPghfBh+BB8CL4EPGHeEQcAnf4AfgDd/gB+NcE
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
2Tl6xcDDWiZ+fGaPF5vDnQpYpXzP0/ozSlr4DvwH3jNQH90o7OcJ1rq3yH4N
DceFZP+UHaMvU3znru9bTPYff3amhuzvmLHHnPJZJTZnNNn/bOI5f7Lf/0/u
K8rngXvkmkV+8zM1pyV53Tn9gCfd1+LeKbovL+69UXJf388vthDPZoSNrBC8
y5eULDlCfIu6iDqJ+oj+H/MAzAGg+9EHQP9D70L/QvdCl0CnQJ/cORB2mOan
6x1KttDnDDcvWFBIc1TwO/gePL82rlFD5Ak/PahPrMgbHvXTJpfyJS1ricG8
yZ/4jdsTF4yN/MrfOA2xvT27qqWPQl+Ffqpb2yFRtP5648YSyoughpFraH0f
w4W18qJ+TOpv1E3UE/ZeVduW6gjmZZifYW6GPgp9Ffop6GDoYuhh6CroLOir
M6oXHakOPV3zqYR46fV8h+fES+j/MQ/AHMBGZfJjETfcJqhLAeWB/UBNFYqf
TqahFE88f4tFFcXXlcgei+g8+lj0tehnf4VN56KusBFPn4eJOsOOz/GyovqS
1+ev+9SCbDbQQ1nzSFAeGx/lHv/epIChP0G/gj4F80HMCzEnxJwCcwvMK9An
o29Gv7xtd02CqBNsSBu1XFE3WLTy499UL9LGnFqzz7iADZiWGeY+LJvd7jZu
U7de+S39JPpL9JXQkdCV0JPQqdCt0KuYV2J+ibllS13/V+dR3z3l6k1p/j9C
+rIyfU5WKkY2nuIWcyXMmTBfsp3tFSr4gsePmzqaeE7L/UU08QbmI5iXYE6y
P2Um8Qv3rEpVJr55qW4p4ZnZkwZsEvzCXV4N1SG+Wbk5+gzxDPIceY98x9wB
cwjMHxD3yAPEP/pk9M3ol9Fvo/9G343+Cv0W+iz0aejb0K9Br0O/Q7dvebPf
kXDGMSDl+H7CWaHW5+TeRVVsqXHf4xF9H6vkS41xOeeXwK6+K5mm/K2StY14
vmr7GAd2+Ih9xTajJGY5eM8I+n2o7J2vA+l7kb76A2/R9yInOzn0o98N047v
3kTff8rxvz+XvvcUE/NCmX5XauSYth70fcpWE/5co+tzh/dJpd+tathT6Ejf
29sj3Smavq/XKTGvmT4flVv+4tqAr5l8/+sc1/99fqynVtqBfJZtOlE/7UA8
731ja7txR4rZTZ7uTb83ZKczYgF9zzfn9ldt+p5v4vKHFzTneTApx4Th9tJu
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
UG8kS02rFr8XrRTlytEbIZK9+P1K+0fKKvhdYtUXBtG43zl/ziTgPYSGUHIe
8hvRa096434VZC6149/PGviodQS/d3u3Qv8L53vCexzi8Lsis747i+J7pdMe
+Q9x3qvtmmmJf78n4kezAX7fz7LdWQ/PZfBOvga1J2Ku/OIrtS+4ssxpI9oV
uxdk94TsfpDJzfbB5GfzsnXY/Gxetg6bn+2T7Zvtl+2T7Zvtl+2T7Zvtl+2T
7Zvtl50HOx92Luw82Pmwc2H3Ruweid0fTb9xCe+pSdPKPePwnjp32JzpeB/q
I7cxF+1htOzqNeh/Yq2NxmgPVzxnXNjyrY208vMKBajWkAUB9QvM3tUCuw9g
9wPsXoDhFYZfGG5heIXhF4ZbFFZckcJ+4Pd8KaOwn0TS1X4A+0k+zvEux/eI
nBxnOGGf+WSPUh58n0h5ZjLyP0Rem3fIryMX5neKdSD/s3hcG/K8ZLmB2iHk
fRsHYoeQ72X4g+ERhkMY/mB4hOEQ5lfMz5h/HfYMeYT91qASsgP7Up5HqMdj
X8qEt7wi+B7pCMtv0i1y9WTKnQdG2JfeHJP8/Y9uPeRunSuxurueXPISj8Hn
d0WbvcD3TyN9otyxn139WtlyfJ7VdazOY/Udw68MzzIcy/Arw7MMx37btfEo
foc2WXZTHX73+9uvxnj8Dq3ut105eE8quVriI/Kjnu2/viAv+nnj3pW4buYe
nSHkRyPGZhviug5GHzrw/m/4cuFtyKcdE5HejnzayyeHhu+yqQdrg8S8qP5m
8iLk7VqS3QCs3mb1N6u72b0Xuwdj91/HUlffS7lcDRP3TbyfcjkH/NMTD8yI
72K46C8eZ7iI4W+GxxkO/4u/uXic4fCLnycU4d/xkvvG743fH5ULNTmK3x2N
Uo9H3pgEqly6j7zx4Z/q3sgbx+QSSZRTsy9qNvLuLhnZoSjnyScTy/B7viIe
6d74PfXDVlKxqM/jR9vL8L55WnJePfLM0memdHH6ysSUpfD+dKXvTMFanVZ4
WGm8BfXG/I35H/M75m/M/5jfMX9j/sf8jtWxrK5l9Szrs2d996zfnvEajOdg
/AbjNRjPwfgNVlezOpvV18vnK/ji30cTaFiNfx8NHHuGn0B9im4PiMZ7T+vQ
De3Ix18oyjuD+hzl3rwCz/uPvpkQ3l+4nW4PQ30eum1xAc+7JlqZnns1GT7y
tiee+48ilSl4/5jqbWuK/G7/lmc/0K/dJE4+w/hSmKT6jcYbuDTptgjGmd/h
S67i+4ZaMVL4viGoC8pw3jdkPCnjTRlfyt4fYO8TsPcIrv3fugxYXcZ4DcZz
MH6j5//WiX/tk+F1ht8Zbmd4neF3htsZnmb4muFqhqcZvma4msU7Fv9Y3GPx
jsU/FvdY3GRxlMVP5g9//YPrF8wfmH8wv2B4l+FfhnsZ3mX4l+FexlsxHovx
V8xumB0x+2F2w+yI2Q+zG2ZHf+0HnM6h3QS0nfCjdkTKlm0/ivbD7hfZfSO7
Z2T3Z+w+jd2jCUe0YJ8W2J4V4/RtDcxfx+nXyv691wDx0KvcoizEn+4Rz6zR
H8c3SvJSf4QfGoVnqD8C71GNTeiPrJ6//g8/xup5Vt+zup7lCZY3WL5YZtW5
5NhAFGQ933flVF0YOVqQeteouQ8Y38T4J8Y7Mb6J8U+Md2I8C+NdGN/C/Ir5
GfMv5lfMz5h/sfqf8QGMB2D1P+MDGA/A7lnZvSu7b2X6Zfpmemb6Zfpmemb6
Zfpmemb3Vez+it1bsTzK8irLp+x9APZ+AHsvgPFNjH9ivJOV/HMJ7GvVP7p+
Mr6XFCwZwnkvicUXFm9YnGF9/Kyvn/XzM76A8QeMN2D8JuM7Gc/J+E3GdzKe
k/GGjEdk/CHjBxlfyHhCxg8yvpDxhIwfZHwh4wkZP8j4QsYTsn4L1n/B+i5Y
vc3qb1Z3s3qb1d+s7mb8C+NjGA/DeHPGozP+nPHUjLdmfDXjqRlvzfhqxr8w
PobxMIx/YXwM42EYD8J4EcaHMB6E8SKMD2F8AeMPGG/AeHzG6zM+n/H4jNdn
fD67z2D3G+xeg/HOjIdm/DPjWxn/ynhXxrcy/pXxroxvZfwr411ffP7aKVvc
SQwsfhtZ9ZcQn+ZVRxNlqkBn8a3gmPhOULGze59XkEQ+Sx7+oDWiAfTGJ2Xc
ysol48P4CsrDuyBs727BayerIUP98yM6DmJZR0vpOHGC2F9X6fhffMnFmwxn
MnzJ8CbDmdkBcbgu+TSkn4LrruC/xFmX4SqGsxi+YriK4SyGr446yo/bpd1F
XuUOu2rwOoHIHt5TLmxL8ew68R1+mV2gtXzxiJknyyAtzU/c07gE9hs7GlY+
b4GQxY+t6S9ROVWd5aZaCBuK4IxUcgNMF35boqPdQVbYheiq9ef/rcNZXf63
Hm8oaTu9uZE4PS5wn6fbBk/txELS9MpBf/GUXzfnNIBu5HaB1PoScuL4l96k
iHZgvAbjORi/USx8Zc9ZnTYYpuV0PSStgchNHxc4tqfiL1/D+BvG21S/2T8c
v4s07GySNH4PvPC1lwp+H2nc7Wbj2T5tMJT15cuMtCYyemLuqMc5BfAq9YPr
qcg2ELW7uLlschMR/2g/9mVyEYg8O2yK39V1d3tmht/t1JgdJojf7Uze3n8X
34sucDw/A78rovM59Au+H31y4iHh/qwWGBYcXns0JR+W8iwqfN/QAjNn+5ll
r2uCXxcDepyLC0C/327wWlsb+E/0O4l4foXX8EeYlyNm7+Pk5Tf3q3NLb94j
Es5FHrfWXYEUJUtNr+99sN5p/m2LGe8ht2nC+cIZCSSrceh87JI+OOv2oA7X
yw/hG03XJ+/HHS/Cde3URrbiejYm2pvo+qTkk+4QrrsrWmBfeEc1rJbd8Hkk
fwtxd95srGfUBK+K80fivz93+WI1nY/Ezl5WgfPo3PIxxn8fwSPYQecjajEG
P3EehtcZfme4XWrxbOFDIxpBWuDmuc3F5UR8/u/UT5tofuL6CfMb5i8T9heE
on91PnVNpnYOu1VTMtHOo/TXv8P/Dnv/Ef8/SZlSxhn/80jw63K9LmJ41PPr
gGglqe5dXfJ+UgncOezx+9XFLpIvLKa2bKiMLHU3l0n5UgJ+i0ZaqDh2Q/L+
Wv6ovcWgOWFI+DHNgym33H6Ha3TDpMHf700vlcJdYym79+OKoaNorXS4eiOY
3Vtt13yZ1oX3LxoY5hcCz45PXqNT6iFJXH7lwvNFJClk37Ny1w6oyovcSe2b
zOm0/UTtHSLHbn2Idv7rbJHo18IO4PM0LE8NSyWx48eOvqbSCMFletedTtaR
ura9x3650zw5V8rz3t1SOFsTJndoaz05dFsnZcGFdtgus1xaKrYcvjxach+f
391x6TB9npwTOsd5fvL4OTL2VO9fhRMX1Yd3kPkzD19vXlYG+kPLPTJHV4D3
7PPJ60uyiWZXssCnO91wUjz+EvUf+D180z7qT+TE4Rt30I+GpExH43etk1X3
LMfvlVrOUeV8pzRJfdXjPwrt0CUx4tSC0zVEp3K/g0JpDSwzTw6k8sD2bWVe
KL+xbscRlGfUt/UTqDyw6YiSFpUH7F4330d5vtv9OrP0WTfIzVi/5c3yUG2B
5g1yRlbV4LM7PMYjqxtOW+c8fKUbRiRCZwSMSquCrCPZRY3K3fAj4aYtb3wM
GTuVJ+50Ug18+28eYmWVtwnnEeLO07l/Ec9nxW7S+MAmLO3EYzJu7tP5qnNq
4cHgk6pH17qIx/wTAeqDceSpq6/aojSK/5MLikc+7iFP8jUcbvAEay9ycNXM
5imHiTlvN9gt6yHzK8WX6q19SD4shJrvrypgGBzlbb7bTZbPvXE+KPcVify+
9LzipGp4495jpmHbRsYa6ouE+TTAKvVjfIdGV0Jv2lYnwTmd4HpzXil/SAq5
4PLyEH9cAxiPVZYI2lcPsxsHWwzXt5GFD1tKvD9Ww0OrZpQf7lzaHUjlh+w4
cw2U/8kYxxoqP9zXSrlE5YdEZV9llJ/tn+mD6cHTalQw/vuoyJ8cfcha9qvj
PDrbzc7jv7dyn4fzkcwpbio4z+1Nupx1v7zfE4J6e77iOUdvzqrDMsYc64YU
mV8W2zaEE9WL6qMHev6eFzn7z3mtuz4OnycbCrS34vNXi4uF8HmdsJBfkaE9
ZJPX5c/p90LIu3Tj1wWfy0DjrIi19YEeYhZok1CwK5RIrp2wLze7HATapoXQ
eWFf845YXGeW9IQLOP+xoaTNdF5wjgzjrJO7OUwA5z9gsG1KoEMzONkbeIn8
rIFrR3dFKl1sgiWfV09NKOkiQpU8e/Qfl5BZ2xUGbw+WwrPWp0Elzj1QKDRL
ZnJjOGw4NlR49lM5rJ7rnra/vAdC/mTNrvB8SDLO6d2b3FkK/QOLahrmVUNL
3536UNkosu9Aje7dR93gU9slts+rhdQ8n2uZEZIBKqdm5i9vbYU7QtctvJu6
SUNMwealOkWQmfl03dioItAxmnFqa1g1WZY5bkBzMA+ay13vb/LsgteR52MV
J3XCx9RY+YpZ9WTx1r62+18K4MSvw0GZAy3wrXKd+oiXzSS/KaEv0qAEFmbm
OK4Qb4I9B8NC9kxvh8ti2ks+XimA0Mt8pk+vtZOu1cdbd8qVkYcnvp/50VIP
EnldZ9bE0rqmtlvD0uwphNunzJcbqoLUs06nmvtSCI+cdm+E4Qv44JUQnXG6
D+rWe/52bWmC9/rOrVnnWsksm1Ejd7eXwOhdkgEu45vJF6HNmzPjWshh6Qt3
zluUw1eZlMa7R6vI1KfCTgu/5pNhi1edOHqvC+bdmzfR7UQXqKXmBeQqv4DS
pJe7F9D6+XtzKjgmlMABR+1fA9GE+I+RWJdT0gMfFiYerIptIfcNShItG5tA
tO12zVXBCorXrJw3mNaTAKPGA/yX20h7iNH5qO3VkH3RZ9xF3g5orr4fEvko
GtJsbt/fn90EvRp2kjiefcQ0ko6T3OiOIBxvC6s4zX+1jjQuqp94a1MTaLS8
fGLF2wxZHr6LxspXE+F38qFyvp1w/uS8SacFSmF3/JoZu2sLSPzUwNFvlnWT
J6cUl4uKlcPv1HGNEqqV8DzMW0tQpxbcF8xL6vneDurD+3+NPlUP5z1c+ju9
K8E7Wkfmys82WCg3ysp6QgukWa8dK9b2BlJu11lMzG2DO8+/iNxybuL+FhHp
gIUbI4+1gcSvIz9wnjNbxQbpPMRFp5szz77rN0tcJhfCy6CjgUrPm2Fh4/Ui
u8etkC2xyLN0fAksrvqpPyDWAKDmPz2pux0uFbQ6JndXwMzSwZDfcknQRtQ1
BD51w3ob9+vaP4vB6YaasuaWBvIkdW5PAWkH3SVvR9a6ZMGglqKEvHw7uVPU
JCfa1wQLrW/fCa26p+24TLE1RbUXNPzdxaV1SoDX48Wobw+CtE/Yab2NSe6B
bfce8q/xLoMdKw/fKZB4qB0VZPj9Nc23ivts9o93rYFj705/fD8tXLvWf2jB
0JIuuL7k3N3KpHr4uf20vG9ClLZV5Zu8Kb2t0DQhqErEuBVW7sywW5MQoy04
+1SNcV4yCF6wPi36qA+MFyyYMn3JS+1FBy54nJZqIikDq455R9L8yZ1ny3/z
kFbuPCNrg3tw3Zr/1iU3uOtuevF9+P9PfmLHlf/Ompl7FPgKycUxfuJzWprh
nPThNQrHWuHlsD7UJ3n1+sMD1OfITh2OPs0GDzfYdpWRTdzfjqfb6+cpdkHS
kxo8F3L24OMl9FyI4A1jeTwX67TWUnqOZO607XfoOZLsZr0SPMcNfj1jqP6J
icJuUdT/tCehCqj/weVzZKkdQsU3YVG0Q1idoY12OP/XIbRDIhr6Rg3tUGza
3hS0w3iJ0D/UfojvtTO9aIeu7i4c+xGb9ceS2iFZ5DBbEu0w17qEY4deTs/Q
DonCsXtj0Q41SMsGtEPzRPmfOM/h/W6f0A6L9vFPwnluit1Yv3J/BhFVTtWd
b58E8l2mJmcn9kHWf/5IWrn+mM71R8vH2eiPJGnS1Efoj2L1xzj+eHTHVsWS
Aw2k+nJo+bdPhSTu0oTPeyQ6YPR5uyPUT0HixYPp6KdCUy49RD+tDnqpQ/0U
coyUQtBPRRpmTkE/dZtfeoXGJUjuuLQB41KYzpf7GJcinslW07gEsh+lTmBc
MszSO4ZxqSfcAeMS+bVzxQWMS3pejpy45HvjnB6NS6TX9V0+xqU2lUhOXJo3
2RHjEhTMjU/CuKQn3l+FcelJjr8zjcNk+0XlYIzDbct69DEO71bNUZwyuhYi
LSrajc9UkB6rOJUSdbqvBz3raXwGDZtr/Rifp/w+exrjc7YH/1kan8mN+84L
MT6n3FnCic+td3m9aXyGhxVaCpE0PjeNm8eJz9qJJlFG19rg3S6er8d0GmBc
sd7NtomVYHxUoZ/GbaL27N5njNtl/X0/d9G4fbeXX0ViYRZ5UKn1ru11JswY
9qHM51EvOG64NZnmR3B48MwD8+NnxUlDmB9tl7ZifiTkFK8I5kf5Hyqc/Oiz
0R3zHVTV8npivnsSHP8B893pKPMImqeI5jBeecxT42v3/cY8xe+THE3zGrm9
YJoSzWsQ032uE/Pa+Sg1S5ofISbDwpjmRzI0yccQ86PWObP3NP+SlomnZWj+
hczCiKuYf1ubqyy/KFH9SE5+cCC+mBS5e4z8pFwKljbjXzarNUHz81IintcK
X0UT2nfplcGM3U5KGoPdYOF9LULg8xOIC816NPl7JbSWz/o8INICMZ/uryqx
aiXPl6yOO9RaACv8zTXX8jUT9vt1x1xfnZoaMDDtLPr+ppW4/Vl601S3CbaI
8cms214GwxOFU5uSG8jR4pcWltJt5H5j4ZXTe6n+Cx+23ZnRCaG9ZvZSEtEw
41zeZ8dljcDkZvtg8l/XCT62d3HZ39/Xxi8uXXfvgo7NDVK171ohR1jSY+Ln
WDC6vcXq4apWuHTs1rqO0AZQkw02UVOuIBs+lZprnWuDj+eH3zcPLIGDk+eL
Gkk1wSPDPWubVrWBwh2emEHtSpgFjQ7XaD0hKPnI5cCsdij4UaCwxz8KrkeI
vWzt74KtOj5b3tfXQi53PbY+W9eP7Jy+WYPAtgvmtjb1jcSiWPG2pG8HRI+8
VLJvfDSMW6KUdaa7k0zpcgk4INMAI71kvEoHn0BRnvDoYt0esnLflfznCRWQ
1Rb1Uud4Jtlz+miq0ORW4B3mal6+sBUW64gKPj6XQ+Qe1CZUzWwkp15Jjpey
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
dejpGeff98Gswa1J2IdjsTx3bfvsFuL/4sQN7MNxtzZc3qrZRBZI9MjwnW4l
9xc9MFdcVf73nNi5sfMa9sY3M+ZFC1w0y+8olsuEVVOOBSs/bv27T7Zvtt8Y
EfMZ7U+b4c+YhWpHP1bAU5PhAjJRzbBdYt8W7B+QlL9ohO9Z5GUYLsH+AcEZ
M+8FLmwFtcFqR5ObzcQm1zws9GIxLJRRxvcaIGxcrji+1zBQahWKfREFusK2
m3u64I94kVDApmyw3KR5d4dUNWhU9dRj34XrbZ6lU8PyyJOyhhnYd/Gy3ITP
Q7WF1My22fCsupTILEycZy7ZAj+mP3Ljty0ih0ecLP3mmE/SRU/FYl/HXvVp
19/pvSVpV6eJk/jXRKp77usdkTSPvFnyjMpJnHgOmqCcb77teotyxuT8Mk7V
ewsLj7dXpsS/hglFw6/g8xejEqw7C1ugKdbmxAnhZhisvRE3ZVo5zD3s17Rf
tQUsD9SpUnlgaV2FJcpzc2zPqSyap2Tlv02heYqIel1MxDxVEVO2he6X9AWu
FaH7JWqTjJ/jfge473G3/vMedwu3f4Cf2z8Qx+0f+LdPQI3bJ8CeF/in3yDO
JGo01RsUJjuJot6WSQnqoJzjxYT8qH6gOTSoj+6XSN7fHob7LY6ZnI76Obxc
To/qB2rjJB6hflbbeHmup/l9U/87PZrfodaRxxnz+1CdjNr+WzVQcfqByp7x
9ZCmPEP8lWUbyL3wsK/b0AifQ7w1IldUgUjZ+lBH+1ZY3SerS+2K2G32Xkft
ipj6JLdNpHb16OGWV9Q+idyCnQ3UPolA0Y7XaJ9rWkRmY55tfz+gTPMskeux
HcI868jVQ8s/emD38i3/3Ms77XqM9k9Mgg/kof1PAs0QnP9/3b+Hc+dp/Wee
JW7qS6nfwavbD8ZTvwOngJa96HfDlIOU5h1LBCPhubPnt6ZB4P50veLFfaBV
8GwkjQPEtVndAONAl3MdP8aBFfbGX0e3vSG1Hrqjqb8THedwRfT3Ax+Fj2Ie
NyvbGkrzOEid2hCLefy1X4EsjQ8k4OpsYYwPN3/c4sSHKr9VY3B+uVhhPTo/
aO5T/6NB5+dp4JuF+CF7Bm8TxQ+QmRQuh/hhsOWibMu4TKiZHKaFcfX1mdu/
MK5us7jdRuMb4RETcqTxjej+aZLF+BZeOIBxlZztkdbAuPr63KjPGFfLDabf
x/EQmdDZdBwEJqR34bi8oBRPK51fTF1pNp2ffFqZ2Y/zJxefNafxnzwcNVhD
4z8xq224gvE/NP68KOb9qOe8hTTvE8WH3uaY989N2GGK+OHnQNseih9AsmD/
asQPXmdsY2neIUlbsutp3iG1np9uYt4xs5B9j/m3YeYxzL9w2ShUHvOv+6a+
BpoHycSv27edpXnwsm3kbsyDR40ec/CAuKtVNMUDZOy3FRw88Jk/ULaOPr8i
TNWSPg+5hjs4z1/pCi3DdScf+1GL+W7XXX7OusXZepmaFIfc4Q1BHEJGbS7k
4JDpG75gvoaxY8U5+brk5n/5Wvu/PA61/+VxwvL4sW8rJRAPHCRzEQ+QubP/
wwMBJ4e/X2MR9//cc/H8j/u1L7xfEFcQWV8LDq5IdVrNmcciegXOT6z0OONE
OWQVZ3y1wwJPxBUWT55w5HFa4cCRZ05k8ZwO5xf/z7pf/8f9jrzH0AWKx8gh
+yOdJykee/4gpgD1YLZ4bgE9F6JZK8qP5/KheJkmnkuCo8gDxA+C1S+78Rz9
783zR31K1s2QpudCGiKUOTjtWI8a51xSZOU44+ObE3Gc7No8mzPumPa6t5bi
nN6bH39SnAPPnle54Hm9ONcbiesW/BrHh3js7KO383HdUXquPfS8iEPpnTYq
J5GcyVeIco63TdSi9gZrpTJPIF7VrT6xFO3tQZvRSGqfYHX+pdc2ap/C+hM4
uLSA73g+jgeFFnvScVi/5uomHP/z0GYtzmO2ehzOA48/jF2C8/wZPH7R5HgC
WXruiCLFz+RAyo4LiJ8fmi9FPwKlFSNs0Y9k3dLb0Y+CRb5WUXwOU+ckRVN8
DkPiH60Rn9tbeFS0IC5qm1qE/pUpZ1eB/mV4fcYE6u8gt9v4J9YLdbvlZqG/
hx9pP0zjCWmyDd+O8cTK3zwO40nG6tt/aPyBRP3zdzH+6I6azok/9b7z1+Pz
yzTdnLGOsNI7QvD5wGm5GE9Af1HAAMYT5XjHyTj/tTmThBHnuEQZGWH8KTun
8Avjj0vU91YaD8n190bTF7SmkQihAlWMh9rOQftoHUTUfW4to3UQOV7jEoh1
0PMR9mo0zoPg+u5jGOc9V635inHegbcrGnFLwboTPCU0L5yriIjGuP2/eGbG
rx7n8quxXH51e/0iV5wfRsltw3pNc+PyLpz/CZdHnc/lURO5POq/8zCeVtVJ
9jmtE+HQ8RtVtE6EO4tM87FOvDptjwKtN6FBe5MCrTdh2Uh1U6w3fVx+n6V5
kJz5PMqZ5kHSO2b/AcyDSwoOlO67VUPCj0b83j2+nsTFnlqHeVMwy06A1tGw
3z2qRJDW0XUzDXdinpXZ42BP8QnxcVH58Y7iE62Xb4MwX+8LT7tG8QYUtz7S
U6Z4I5B8T0e8MbA1roLiE7LgW40H4pP4AnVTzPv/8sZsv9O5/OclLv/Zy+U/
lz/0QnxCxtoYv0V8oqU2GRCfyHGfP//P80mP1i2hdTpU5dpvpfJA332nCpRn
fOZdc1rvk85nM5bQep/s0tUQxHr/rNdPc4qviNly8UMUX5GwUy9aEV8lGv90
ongD7G7IvKd6gFcPX2xBPZhpt0cjznRYo2yG+CQjV/Mq4hP/BJMKnSdNRK7j
s6e1ahNpLAtx0d5RD+YVB1d45zRBWWH/7NCFDTAhrnlfiFEjJAqJy3Y6FpAr
maNqN/UWkL4xFbE79vWAc3R5gmFgI2w/oasi59kM6RU8AjfG1kN8fH6Sx5t8
+JQnLPfaJRvOPVs/JUm2FzbE6fevnpEPhVUJ4gcXpEDaXdNdddd6QZhvnuxM
mwaYvF5mwhvjShDlO8Ob5twGYi36ZtkdDVCYYxgTlVQEWj1Gk/1ut8Oavumh
TjzpZNrKZUvkNWLJ+KtXTfOs+yC6Uth4q18XEVTO61i/NpucP9qWaHCxBubP
e3LbybmZzJJN43GfkEGKv+TcH2psg+SIDc9x3Fje7aPbhAw4o2R4AccP6Wie
x3VtGwpv0nVJ86JFv3zpupCiOVaX6m3KyXubqd4gymjPOtSbRpcBdFH9vHwY
HEf1A2sCj15G/QysfxexbmkmXHnTP2/ntVRY8rZg5M9PvZC681fvjBF5JEN+
cs+f/AzyQXT1W6+dvWByVztQX6CCJK09s6XjeiK5uP195rCZPeA7Uvwl8i0h
ggaF6EexWmUcP1ryNLsBn3cbk2pIn4dfn1Le4PMNmxKj3jyuA9NHDnWO35vA
zifU/YtZE1T9mTXb9R6B+NQ2+Q9q2cB7515t9PA+0H/nNVF5WR5IhKgcbJla
AicG5teKqtB5psxrGylURMTa/DYKyWcQpZG8Lhmfe8B247CrtB6E5njjWbQe
hHs/jcyxHgzfck7Enc5/YsFWGTo/SXU4Uobzv5lGjOvVComG0oBApU092cJH
PDd97ACnWUW30qUi4VLvwpt7c4KB11HZTYvmo1wuL+r5Dy/6v/jzQ7lqYmuh
gMT2DQ+321VBPp0+vW64WDcMzrDUo3U6BGXnCK8dWQJnZynGY53u+WVgho9u
DFlg0+5wR7iURB3ol9Jp7YG8Dy8ccPzeoAWOQ9xHPc44/+jGTO2bOeSYTtb6
89dbYWmYwTPkN57dnYXzwM3E029wHp/eOAF8XnRWtz2ODwR7J+E8NqdL+HH8
8fnBm2lSkSRIaF69e04wmel20h33O/6boQKVH+R2VGdT+eHZHLtlKP/+aS/H
8AsVwfFPf7yp/kE1R8UO9W9X9FSS6hOM5aaWVtjUQ2rQnFDU54TE25/oOZIz
XiZ8rVNLyIhzgjF4jgtMrTvc7hFi8MTiVh49l3cVM1LwXGKM7SIxPo9KT2pA
Hk+u9mg52tXxn3l3qV2ByKCnN9rhzArHDLQr03f29Ti+bGTifrQ3qYMh8Th+
W0utS35EHhxLEZCk9gxV+rVlaM8WmpsLqR2SRXmrv1A7JHGNxuvQDmWssgc7
HAvgdkfdn800npi76gWgv9yUv3OL+iNIhwRPQT+N0nlxD/3xVrzMCxxP19Ub
TcchQaTJD8fvr41uXb80k9yc+X6m87VU0iEc2P2D+pf74ubljjzpsL3K+Yac
RixMmDLWEeODwTaepTTOkKiP6mY0zpAm7cvFqTTOyNQXP6ZxjKT5aU6gcYx0
7lk5H+OYiF/2ROrXkHl+cQ2VE36PsXJGOY2qs+Jo/ISpi5OeY/zMTlM1xjhw
IEO+ncY3skxStQPj2/AdTjswvtUVtK6l8YQ0HHo4+jmNY20v/0hgHFv2T75Y
xM0X4zas30TjGKjPDGmlcQxChFc9xjh29tKnc2vo/C2vKhPo/MRgc5AJzr+q
f603zn/t1PRujFeyW+b2Y7w61L1vJo3nJCLWXpzGc3Lu/6vsroOq2vqAj9vd
hYpd2IGYqMvua3d7VRQD61HsDiwUE7u7WzCWKAbYoCgSAtJhF+a7f+fZX+d9
mGHeef+6M2ecw7nn7LPPXnut9f2c6HtazucFt55/L68/05IpbnIeu50+zk5e
f5lRLw9MvfxYu6w52+zcuHs638KMw+S87VrUcavxd9XCX+mCpxt/N3hK937y
d9M9DstknE908SF7DxnHlTptnctXjqugstequIwIUG/+/HLt3+q5+vSnWnKv
XQnqackr6Qa4Buidiy/Mdrvip3/8CB0r86Eud9tcvxgRp+7mXp/msmOYytij
mGfAMD/lMeLSGVmf3zbzzsYyv/mjebEBMr95sPQmmcfUmQrtzCbzmB0rVzoo
85iNTLc43HSMG5p+cUzhKt7y/Edf2//0dAzTrnc9z8rzDyhxfaPs47D5U6GQ
zA9+t29STOYHA+tm79Y6KVzfDfe9Y5s7TE8e+n3ZwUJRKpPpHL823ePGpnc8
38OxmIzT/1l40Unu/2w98euPjNO/LrD/cjXypcqaf1mf112i1PfQV2ljLr7+
O44ulWIcndp67HExtjtkvDntXsQkuZ92Y2+WyjLezOHS/MzsS4/V3jWjDxRw
vKeScywc5lTijVp+YPNUOT/v+DOtstyv6+vnMlTOz1cO5pgs62DPXc52ZMvJ
p3pZw8KNZX2RXdClMnKefOrmnss4T+pP2ztflvOkrcq0/tlOD3Xgk3vt1q9i
VZ40K/vsD3utirRMO1D2QV+znrVB9p9Oqb3Xsg/6QVTdG9fe3FG70jtZL+8b
rSqO/X2ivnW0+rS8cq98U6+pvcN3zTtXJF4X2Px8bssSESpnp5wesu7r3yyN
Zd2Xssra3bLua1/ncoeNv6uXpNtYXv7uyr4HHeXvpv/4KVnWgznV2pcztlSk
WhEw7qLMJ7bzTbpn/F1dum1UXvm7e28kX5S/m31g8DhZr9j+9/C7si60Ufj4
xbJecfAlj9HG69EXJ7aaJq+n885eK+T1THC4vUnWMd5xDpZ1jLrNgljLOsbK
hbtNknVZg4bVeCXvW+4Gb2vL+1b/1eBvHyue0w/ahsi6Mn1pb8bNMj/bbcCX
7zIeWf+0zkmZL7Bf3r6vjEcK7CtjJeuI6n3qFpFli58qV856rKwj2p7K+px2
KdaZuJjrTKrd9v93v3uMOlP6S9zPK2GqRpFc14b2C1IHfhQ5eXtcmHLzGT/7
QKS/yn43JM9m9zg1plW/eTIP3qKWb3XZr9SudYDlOK9vetiHTB+7q+lid2jQ
1krWCWSoa5/F+H6p7RvurJPvV+4BmXxkvUGRXtO6y36ZD0fr1Jfv48i7L+4b
32v1nzOPS6694qfGtrKuLN/rCOMT3XU4ScWm/WnrlO+Qmp5tbplufs9V6V69
M8vjN7YWUMbj2rtYxiry+MLEIFm3oPrM7Ros6xa2h9a2rFvos9Fu4PrjSWpO
5NiyvS8dVlbDNn88evG52tP1lUfJHKG689HTfbovDVTOGXLXlk6Xbd7co6Sv
2L/m6/2yvqWgf1ZL1+vCyT9ZqzmGqmWF8xTfo17rj86FB55fGal6rfVfnnNh
uAq4k//Rhn2xOnONUol9fzxVOrzOWumK9B/2KI/sz1szLaqY7PecsMaxnN28
66r+vBlp6hnjNcc1bg1lvJbauve8Nm4l2k69q1a+zz6ynoOX7j/FqYf01k5e
HSvrAFW9KvulQ6h/+Vex9N/KBs0ZLf20Xm16V5J9CtWGvDos+xRu3/xH5v21
fdcxDWXeP3DZaX+Z96+x72wFWUeX/tgkWUenJv5KqCrz/hsOJzSXrqbNzm0D
ZX3LwZyVNsj6lhuPF6+X+415KxQrKuOsu0e/LpVx1pD2ma1kHtA72+eNMi7L
uj5HCxmXbZxZuJysK2jdv80kWac3YI5TNXn+bsMW28g6hMUNR7aTdXpdwxIt
r+donW8T5f5V/uIdX8r8Re47Tmvk/tWnuta9ZF7j69JysXJfa92OmFXyeNob
u1tLF27o3c27y66I160Lly4tXbiSbQZ83P0zWJ3Yv+2K+hin8/0z5efM88/V
gjw2zsbnpTtE1ws1Pi/14NyxaPm80rT03Cvjyk0/9heWeUyXh3Xs5fWffTNn
dcvKsbrm27DikX19tdv7/avmx79WbhGJ/eW4yjNrb1XjuNKrDwUmy3FVN9+h
vtKfr9Cp2FT5XrwtlX+BfC90l2YOMg/r9Z+11WRcNmpv7gIyLnNr28bV+N1U
zTLnGG6Md3SjNz3byO+mR1TwCON7qmM7HEsyvqe6pu+cI/I9vbe+ZfCBrDF6
ZK9GJZKOhuqNk/uu2pgnTL2y27sheKNxnbR8zJQlz8J1Oacy1et9DFcD4of1
WNTupG5eYMjnB9m26cpnJz3YZlw3tgjIOniJ8fis6e9eGY+rFk2d78nj3gMn
JRvXRSpyenprY9yh7+qwL3JdNKREndBBeyNU/cqjQp+MjVUX/qj2kyOfqKXv
fu35ti5cbdh3fOLuK7HqQ0zXhEednqoRYXETe3QK0tUuX3pwwj1Sb+34uszH
HpHq8/37NZ5NC1e2A6JCk9/7qW2LyyVJ9+9BKusZMqf4XQswf9f+U3FpXuP6
Vh8pOqCLXN+m6bbJQa5vW+74WbiaMR5xWpB2jDEe0U0q/3wk17HWGTw2yLxw
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
0PWavM42UXbFpf92oUcGf+l5vLtVP1T2EzV3LDu+9ManukXzTF/rxcarwTuu
dRgWHKSKzLz1XfbbFt3fT+dsFa+GtPIfIetRO8z4J0LWu+bP26yyjE+rL3fe
JePTljVnNHHY7qH8ymyct+tEgsqWbmDpP1NeqQmtg8evKnVVuV+7OOvLDuP4
+V2ra5eh4arjv/u3/7x5U23uuPhzjbA4NeStLn68coTaU7/R+NmnbysPm19x
OY3rqR27wybIfqsstdeslHW8gdr9moxbN5cJqC3jVt8NaapJ/9xr8+Xssj52
Sva+rWR97NOkKi2M16MnLgybI68ne+FyNvJ6EmePmGy8Hv2jd5uZ8nrmr+nU
XV7PiRcBUbL/a9nxn8Vlf6tfoU2W/V9JTf12Ga9T93sx6L28zlxfJ5aV1zk1
po2z7AtL3JTwWl7ng3ohln1hp6a/emd8Lur4Sns5HlSaF/XWyefinuu+HD9q
apP3beRzaTkoxnL8zHLpNNJ4/1XDpDvf5f0fkS1jC3n/91Q7917WA9+LO+0t
73+Hb737yvvf+NUZy/NkcL0jz6NnOb2xfL6nEuq/kb977uYPy3G4f8notfJ3
37n6+sj+KVXjieyf0sMWdCsp+6e+znS3M45P9fZN7dNyfO7rNzfDJuP4zD7y
WTfZN9S/TmEbOT5zrOhVQY7PC+37Pb0a+VIPivw1S+7zRNTJEC37WV63r5m3
x/yr+tXnzLVkHeCkk1NXyXWjb3hBuc7U/mfuz5brzCIHZtaQ39mtL9oUla71
kVpdNzyoekaXqtJgonStU/OvHyzwk++vTnJ90ki+v+/DKlq+v4dS+NTVTEfv
SOhFOT+oP44XxFNQw+M2vZXzg0v/3j5+56JUzahV/sZ/dZMQv6A0+f3UkFxF
N0n3oFi3h89kf8/RffesZV+P68oRln5yTO4ylv1WuYo5rJX9VoWdB68SXyAo
S+IA2e/TYnPfnbLfZ1Vk86yyH3/z0b3TZT+R99orw2U/0YXFzrKfSH+6lTFE
9hOl7/P7uewn6unVz6H4oQhdLu+Spz8XRapR1xZ9kX7Uw/EOLbN0DNfr5k/q
XzhTpEocNH9zuj/hKv9Z9W30rRDdNbKmu/SdSnTdNUb6Tl+/VA41xo86f+eL
N43xo7qWseVXGT/2M+8vcL+B+wxPC2X5OWX1ZpV/baM5ct374+y4ZXK9WuNJ
5wfS43Ku2lZ6XKrPyKqWvmKrOiNOy3Vg8+fOs+X+24uMX0bIdWBx8/0abL5/
vG/bLm28Lb3f+Q3r9Jdex79BtYtLr2NLsVrTpU/+MGmCpSNRsG2cxU2YkWFr
gvR/HINCukg/tqnrt0vS/7n8J2yG9H8fzMw+VnqzFe3KdJTebJHvPnHSDy/6
0zZZOiHFu0Sll05INaubfWV/UL7K+zJJ72L6Iu9k6V3U7XPrm+wnWnej4FTp
XZyZ393SuyiaPG6sdJ92X53cXbqpb7qdGCXdp5d92w6U66Klrh6H5b6oa5tu
m+S6aM+PfY6yL6b/9IYLpWfSqOJ/msu+mHVzfS37aMZummXpmSxrusbSMznu
5HhA+ju/3r76Vzq676f0eSYdnpoT3v5n6pYQnbFz49DxVmFqctYjdjLPe66e
ut+uYLS+lWzXo+W7V2p6id2lb9wKU8OeRO+UXsoe/W9p2adTxGa45flfLnBp
Jn2VmM+HD8o+nfVOsxvJ67Gzb7JhypYQ1XV5n44TrML0oQqnasjzz7e/+eNS
rxhdKmumtiN7Rqh27hemzn/zXHl23yv7rfTIFVss+62WnBryVt6fZX0cWkk/
ZEWGCday3yr7h8Dv8n5WHexX23LfOPqEv+W60W77Fnl/mlUovEXu0/aLSt4v
44XVuSMd5Di54bx76lnj+tFx0DLH8b1j9OCx7wq0zxmoypZv8FX22X2LyR8q
XYt5Vg8t34tttwtklH15HrPOzZauxfZMyyzfo+Tydg2M74X6PrCog/G90N8L
ObrL9+LxvEpXpeu+OlN9K+kRZdx55Y30iJrPKTJR5pFvbew1WtbplW7Z66HM
I19Nf77+ufyxqsevpOBCZ8NUDlWhlZ1HoPr3QZ9n5VSULnSreo9x6YO0zc/n
zVZff62sHOuk/ZAvTscG9l7U9KOvPtvx0ao95yLUwx2LHKQvVMTT9qTsj6jn
e8WyPyK/09JD0iNyKz7eW/ZHLBvdeYrsjwie5S7rG/WpGVvTyPrGxlPvWNY3
HrefLvMgOnHs8JcyD/Kl/bJjMg+y/F2RC9IbTdt8U3npRLmut94onaj0e113
yH2e20+a5pDr2yZeTy3Xt2mqzM0pr/PW1wkTjNepsvYqPVdeJ8cfxyPH4Zq9
J9vLOsadrgXWyTz7xJuvnsj7E1qpXW6ZH2/dr1hHmU+xH91gk8yntMy5eY3M
gx+++rmVzB8t/vauuMwf4RTfNJ3icqZTbFukRjfpOZccb7dH+mBRdT3tpQ8W
sLDdALlflHVrj89yXzeu9b1Lcr/ozuUR9+R+0bkWfvXl+rxj35fucn1+cmvI
jBfbInTzHO7fnVc81b9WTK4VFh+jisctOzz06iv1Z0GA1523D9S3vk0zXLkR
z++LOmj+vpQ0f19Sc4RPtrZbIs//0HnKZ+P5VakfnpXk+d22Ta0j94VuN3N5
IeOykL32VWVctni6exNxWOqvzyIOi268+mVRuY+XtU6RODkPl9s91kvu43k5
vv0o5+FvtytahQaF6NPne6WJsInVCRWKOvjNC1GFHaqPkOuuO1Zzvhm/+7pd
Pad/5Hf/2dwa48WR8VlcXRwZ9eJ7peWyr2e9Y/rmch+mQLbO9WR8fXrmvNEy
vr58dc0WuQ/z8UDNRBlfewX2TSP3YS4Mdikw3/Gu+sen4cvF0wP1wi67V4Ze
SFTzf8Vvlfswe5emlfswquVjp91yf+Bu+3G2ch8m2XvpEbk/0DthzC25PzBp
o6vl9+JAqerye6GtF1yx/F68/d/rKM111P5PVs0s1119tVx36Zyvz1quu/I0
T7tTrqOSkzfIdZTOlbuF5TqK45vjneN898JL0+Q+xn3n2Q5yv6jbgZlr5XXu
XPkkrdzH6LI16025X9RqyapT8jojnJMjpQPpUGDBQekYD77QIkI6kJFtXWrK
fYmcB+Y2kftXte5aOcj79rzsn8py/RNiffyMcf2jxnW5nlmuf37ZP5pmHA/q
k4d9rmnG8RY751l1OR7WLfTYaBxveuakkWeM400/vRybTY4329wdiz4pHqw9
hiRWiN11V/u9C8vSu0CiSlto02J5HpdZiZmN51HZbJtUkOfp3bVgjNzvHfpu
j5bf68PJDX5bjpMS0bmM40TdTj7/PdwmViWfj5wnxwnObJzpzN40ndkXpcY/
l/ncFRmi08q6lE7FN5SR7yPX91zvc51/4P7wtMb4SC0/E/GPjKfaeV5tIOOj
qi6F5XylDr7cdkv6aflqL7P007o+HCP3k1Xip8b15X5ys+yrV8h55oPDzj/v
88Wpe0e77pDz4e0r7pbz4em1y9PL87exDWwr469iufrayfPXbHIwh3FeUu97
T5Tzp/I4M2WO/PsVs3J5GedblX19ZAPjfKvW/ntoiJxv368boozzs36ZZewr
4/ysv3Y+V17Oz53yWg+Ted73t8t82tcgXJVN7rtazkuOl3V/WTee6YF7KVlH
3dq3nmUddXTfP11kfvnZua4/ZJ3Mthf3Letkcr+/V8/4vNSdKn72xuelStbt
m0Y+r8xeo0rKeG1ckXUX5Xg43WmtZbwWkn7MJBm/bD/pKuMXffjKYMv4pc6H
O5tl/PK5bk0Zv+h+o2aVkOP5VHSxgXI9/+3q85/yvU7osrG5fK9XHG4/+5+3
8frc+eM5koMC9ICc1z+/iQtUvRt8fTUq4oH+8GPDtlVZE5Rj2/K3ou+Hqtn+
1T2Nx1XB4p/2Go/rlRcmnJPHv4+pd0lclaIHPN/I/s2fbz+ulv2bW/q9GyPz
ZY/vDI2Q+/CeZyuftpxXv2SOW5UuWu3/UHr59qFReteTIfmP2PipqNZrP53+
HK6cr7zxnVfomR6x9t3mgx1iVYPHF+rLPoLeXrHlZT1z3dndh8t65thzRZbL
Ooc6Ay+kG/39tfoVlWawrHN4NyrOtlyWcDXu/sIOE/o+Ub4XY94WPxKnyux4
6ibn5347rH3k+1I05Jbl+xK7efm4GiWuaYctNyo/K31eZSoxZ+anI2//3mcb
leI+G/fT7qa4n9Y9z/ZKxt/VBeZtaWn8XZ15VJOv8nfHrTsSJfd5KmVYk5x4
NFQ3ajvETX5HOs9qUP7M/HgVUrH69PLd72nP6pXyNVgXpqrueeq3YeQN1W1f
tQbObvE6KvD20kX24Wq934ibti4JutGl2Gj3PgF6Qo+ye+JuPFcV6n+ofb5Z
osq2aGf7cQ7GdfOUSa/f5X+mKn/6bGvTN1G9H7LT5kalZ6rk9ydBYX5P1fUh
ZceVOBGu3E+93DFjhb92alpwe8cnsap8lyIFzu+O0Vvrfj8QYFxv3uw6zu1n
2hdq/+1iP6rMCtG9Fx/8dux0nP63f9Hfq+xeKJcmn/p0bhquerh88fpg/H7u
azIj67tsL9XTutu+Gf9elfky9Yvx79VBn0nZXI1/v2FizZpfbROVq3XaAj1d
T6kXeXp1+fQ1RPU/de1H8NFE1SRjwcSgbid1et8rI09VCFb7JuUcdMbd+PfF
bO82/H1S37A77N1qYrBq9cdOnkcvyDM7rzxPrcr9Lc/zs/vyoHehCXpP3j/p
2iee1i1829fJV+qVuuH242qDnwl63q81kSfnntaH2hb7XtUzVK2q63mkcYkk
7T3i5uGBn46qPVlrHo7p/FLl+OEdOChNkq7+stMz76wn9Mp0HqPX+7xUe5PG
d5+fJ0l75rPSjUYf15f8HNflWfJS+VTtU9XNI0ZfX/RpZJFhxucU8KCAg12g
qn8pblLg4DA15XS1U9v2x+hPeexfP8kRrPLXTpKOkjpcM9s16SplGXLV0lNq
PGRisPH6VaNH4363SzytQjo3sJXX3+H872vG61fWhf6EGa9fTfda+UVef7rL
RVxefN3fqGzWdctOTU7U6dPMzjG1fYiKLHfyisOJ3epocP3k/P0S9blruWJz
uIeovbva72263kP9Onuw3MPTCdrBK13+lmNeqTMJK+V9U2XTnEwr71uXzf9Y
3rfdq8uWfNI5UYXkveYTdfGUXpnp/tRolxCV4ae/fF76YvbOUfJ5fam2yPJ5
BXUrLf9eL1juY/n3YbZPLf/+7LbMLoWmJenXTodjG548oo+FrJhx89ILlSGv
a7tXzZJ0ps4Orb82P6a/VvpovfpEoLo41+rAiRJHVP7szo0vtUnULi6BEba3
Qv72Pel90vmkz0ivkU4j10NcH3FdhLuGw4a/xjwo86LMhzKuY5zH+I7re673
uc6nN0p/lO4o+9vZ784+dzqGdA3pGdLLo59HN4/94ewXZ584PhxeHE4c+73Z
/82+b+a5mfdmvpvxMONjxsWc3znfc55nXy77dNmfSxeVTip9VBw+XD48Phw7
XDs8O/qn9FDpoNLHpJdJJ5P9//QA6AAwb8o8KvOnuIM4hPiDuIA4gfiAdMfo
kNEfY/88++nZR48nhy+HK8c8EPNCzAex/5n90OyDpp9CT4WOyt/eh9n/oPsx
akqrmX9O+upXuQcM7xecoPZc8j65a2Hw324sHVn6sXiQ+JC4kLh0OHX4dOyr
Z589++u5r819bu5vM/5hPMQ4CG8SfxJ3kt4TPUK6T/Ty6OfRzaPXRr+Nbhs9
L/pedL14fvpSPD/eHv4e7t6R/339f+8Tch+Q+4LcD2Rf+t996ub+dDoddDvo
dbBfjv1z9HWnVCo9wPgcVQfbM2OMz1EneQ7dIp8j+8FY18Z6NtYB0DlgPQDr
Y1gvwzoZOob0IOlA4mjiauJp0iWkU0ifkH04dO/Yj9MnFdcA3xHvEeeRvhW9
KzpXeIr4iriKzINyvcZ1Guu66DAxH8p+DOYtma9kvwH7D+jVsE6UdaOsF2W+
h/kf5n3o4dLHpYtLp5VuK71W1iexXol1SqxPYr0S65ToOdJ3pOuI34nnieOJ
l4mfiZtJB40uGj00ulR0quhT0UWik0Qfifva3Ofm/jYdGboy9GTwRPFFcUVZ
L8X6KdZNsc6MdWesN+N+N/e/ue/NfQruW3C/guskrpu4XqJXQr+Ebgn9LHpa
dLToFtExol9EB4cuDj2cAe1y94m/4KPfNe/vmbeBr1rh4xAgjiTr5Fg3x3o5
5o2YR2L+iPUirB9h3QgdFros9FjoTNGdojeF+4gDif+In4enh6OH14jfiNuI
m4ijiJ+IU4hb+NcrNJ083Dy8PLxJ/EncycepeIs4kbiReJE4jPGmw9jFdBiX
p+Iw4hfiGeIYnv1/+IxPTSewnekD4vzh/uH94UfiSeJI4jXiN+I24ibiKOIn
4jjiOuI54hfiGeIY4nTiduJ14i/iMeIw4hHiE+IS4sDhwuHB4ejg6uDp4Jfg
meCYXI6YMVzXiFFDC6739ln8Wl+Y/bHEzUVP/3qH+Ie4h7h9OH74ffhzeHQ4
dDhquGp4aqX/xBVKtkvQoz+XinNyD9RdWv8n4YJx3Y6DhYuFh4UDhAuEB4S/
gseCw5JoeiTLTZ/kjOmSvJ33trha/1oFxWzLPq9cmN67ZV8fceJwHXAe8B1w
HHEd8Rzx8/D0cPRw0XDS8NFwiXCK8IlwUP66KHgopvOB+4H3gR+JJ4kjiYOI
i4iHiEuHU4dPh9OG24bXhveD/4P7g1uDY4NfgzuCQ4I/gnuBg4F/gS+IN4gz
iAOHC4cHh/uFA4b/hYuDk4OPs9L0Y7xNTwZHBkcTVxNPE/cRBxL/Ee8Q/xD3
EF8Nbw1nDYcMlwyPDJcLpwufC8/mkunb4Nrg2eDb4NrgteC34LbgheCH4Ibg
5+Hp4ejhn+Gh4aDhY+Fl4WTh7eHv4e49TMUp+5iKU4Ynhy+HK4e7hsOGv9bU
9MvOmn7ZHNMvwyfDK8Mpw/HC9cLzumc6XqtM1+u76Xm9SsUpw6PCp8KlwlXF
WcVXxbnEvcS7dE1xHY4Thw+HF4cTx3V4rxTX4bhi+U1nDF+slOkbjTK9I5wj
nB7cHrwe3E0cTvxNvEn8SdxJ3EQcRfxEHDtcOzw7XDecN3w3vC78Ltwu/Co8
KxwrfCa8JpwmfCa8Jpwm/CE8IhwivFv8W9xbfEe8R5xHfCy8LJwsvCL8Itwi
PFd8V1xXvFL8UtxS/Eg8SRxJ3EQcRfxEfDi8OJw43DIcM/wyPCp8KlwqXCWc
JXwlHCBcIDwgPGB8YFxgXFWcVXxVXDqcOnw6XDGcMXwx3CYcJ/wmvGH8Ydxh
HFxcXDxcHFNcUzxT/Eg8SRxJnDzcPLw8nDPcM7wzXC6cLnwufCm8KZwpPCR8
JFwk9vux/499fxNmHJLrf9XA575c/6t1+Ro1l+t//Bs8HBwc/Bs8HBwc9tGx
r479dLggOCH4IJ6ld+QwxiN6vGfHCjJ+ObqocmsZj+A94D/gPrCvjH1m7C9j
vRfrv1j3VcvsRIea3eg8Zi+6dNZLu/sZ78OyfWlHGO+D3t59eUnpwbL/iv1Y
7MNiPyT7I9kXiT+BR4FDQX+fHj8dfrrndNDpn492aDfLGCeqae2GlZLx7Ma5
TsdlnIg7hUOFP8V6U9afsu70U/a+fY1xqM7hVFDGoXp2kdXbZByKP4RHhEO0
tnOEjH91q6GDxsr4N3ZfZ1cZz+K14LfgtuC14LfgtrBfkf2L7FvE28DfwN3A
NcE5wTdhPSLrE1mXyL4+9vmxv48OL11eery4XDhd+FzsU2XfKvtV8T/wQHBA
3MKPznn1K07tXtzy35c+N/SGX9cfPs4ToXAOcA/wDnC8cL3wvHC8cL3wvBI6
zI8eY1x/7l+Xvofc/zmw4PtSuU9yM+Z+D+k714qqJb1k3WfUoCDp1uJC4UTh
Q5U+kXN0gy+P9ZdiNyO2zw3SaZu1XyD3YfCN8I5wjvCN8I5wjli/y3pe1vHi
GOEa4Rnh0ODS4NHgc+B14HTgc+B14HTgOuA84DvgQ+BF4ETgQ+BF4EQUf1d4
gbwPx04WDzbeB9XJt+k8eR/+9t/NHjwdeLrkdMrpk9M3p3dO55y+Ob1zOuf0
uOlz0+Wmx02fmy73xbv9u8l8h+sp24Fyv+tbiWWW+Q5cN5w3fDf2UbOvmv3U
eFT4VLhUeBj4GLgYOAG4AXgB9O7p39O9L5qK50JPnL44XfFbQ/7Jmy/msmpQ
NssguQ9/c+ur/nKfvOJ/76srt//eV1fcV8fRwdXB08HRwdXB08lW3XLf/q+7
ks28b4/jguuC54LjguuC53L+v/MC6ux/5wX+ejq4IDgh+CC4IDgh+CD2o6rL
vIDKV+mPZV7gwZBnlv9fvAr8CtwKvAr8CtyKKOslxWSepeHy3jLPon38jlnm
WfD58Proe19MxYXB58Pro5u3749vdZlH6FBrsswjqLvLm1rmEUak4sjgw+HF
4cThw9GloyNnW75gUeM41LnHFfwox+Gzaffzy3FYOBVfhn2G7KdnH/2ZVNwZ
vC78Ltwur1TmKVKbvxh4u/wRuW+2J3S53DdTuf0nvZDjf2Uq8xT0yPB/6JLR
C8OHoRu2739f518n4mwqzsuoVOYjcCNwJPAj3qfiv7TOlLawvP/FM3z+YLz/
2sdxYAF5/9lPxf4q9lV5FDh9Qj7fZrGf5PPVWaplOiGfbwnThaliujB/TBeG
vj8dKfpR2VPxYvz/97j926WnR0+fni59yOlaA+/uu6uWhSbkmzIrSldbVPGx
zEumKdvozbFOZ5S3y+hFkW9v6oezrp6TeUzcQRxC/EE8PHw8XDw8PHw8XLxB
B7c+uxdxT89sbP3i7eNQ5bnqoYt0xdWVSTFDVl5S426veiPu3MjmhzykQz7a
3bZq3QHhuuvQyTJvq45617LM29r/d55XdzPneW+a87z4T3hQOFD4T3hQOFC4
QThC+EG4QThC+EGpzWfhteC34LbgteC34La8mXjt8edzWq9wX95U5pFjqh3v
IvPIzerfvSbvz8fGnQOlv365yJtl8v7gl+CZ4JgcCGxoc9z4vKK3p1ss886v
C9W2fF54G/gbuBt4G/gbuBtBoemmW46HXpPleFBH93g+lOMBTwJfAlcCTwJf
AleCPgK9BDoJeAb4BrgGuKQ4pfik4Ref9JX5qW3ZN/WX9Qk+Pie6yO81jhqu
Gp4azhDuEN4Q/kqeFN4NjimuKZ7psw0lek4fEKKiph3fUrR1tG5R+VjQ+GPh
fz02fDZcNrwo/CjcKPoX9DDoYBQ4s7fclj6vVQ7X4XNkXUf2Um4HZF3Hk1qe
XgMjXqvaJR1nyLqOpvk/Bsm6DvwePB8cn2tOab7MaxyuGl3vfkrWexR62nSz
rPfAQcFFwUPBQcFFwUOhi0Engz4GPQv6FnQtcCZwJ/Am3nlfKi/zaxeOu8r8
mmo2+K1lfg13EIcQfxDHDtcOzw5PC18LV4v9dey3Y58d+83Yf8a+M9w7HDz8
OzomdE3ombBvin1U7J+iS0KnhD6J7cmdH3yXR+tuc20+yrqj5x/f/nSKfabq
pk1XPuPZSL3kVL9jsu7IKnTKb1l3hJuCo4KfgpuCo4KfQjeEjgj9ELo8dHro
8+CJ4oviiuJl4mfiZuL/4QHiAOKN4Y/hjuFp4WvharEvkX2K7E9kvx/7/9j3
x34w9oexLwx3FocWfxZ3FocWf/ZK94riaqhhLuW2ibNx6+7PyuJrbK1fpoqs
78q87MY5mee9mLg8Xo5DHFNcUzzTiDRWj8S3cPdc+0Z+jy66vFwg59vThxbL
/L767V0oQub3J9ev7SXz7/gieCM4I/gieCM4I2tyr8xfMypSbetYcYJNej+9
vMjsjrIeAG8DfwN3o87QjR9lfJpjb1JXmccv9dtliYxP6bv97b2Z61rxS/BM
cEzwSPBJcEnu/O/z/F0fi+OC64LnguOC64LngvOB+4H3gfOB+4H3gSuDM4Mv
wz5V9q2yX/Vrw8oFypeP1U2aX8kk6+i2+b+2rKPrbjNe1svpniuTcst6uTJH
91vWy+Fy4XThc+Fy4XThc7EvlH2i7A/F/8ADwQHB/8ADwQHB88D3wPXA88D3
wPXA28DfwN3A28DfwN3A88D3wPXA88D3wPXwy16pWMmIw+pk9Indsu6r57xv
frKuSS9Kl0se/7dltDyuy/+oZnl8mmOjX3Id8j3SW8l6vFW5C1iuQ1r5FPpc
9+sj1bhzhUWDDwXryBcTd8m6QTwVfBVcFTwVfBVcFbwW/BbcFrwW/BbcFjwV
fBVcFTwVfBVcFXwUvBScFHwUvBScFHwRvBGcEVwNnA18DdwLHAz8C9wLHAz8
C5wJ3Am8CZwJ3Am8CXwCvAKcAvr49PLp5NPHp5dPJ/+vg2K6KHgouCY4J/gm
uCY4J/gmeBv4G7gbOBC4EHgQOCi4KHgoOCi4KHgoeCT4JLgkeCH4IbgheCH4
IbghOA24DXgNOAq4CngKOAq4CngKOB+4H3gfOB+4H3gfeBv4G7gbeBv4G7gb
eBv4G/S68WDwYXBh8GDwYXBhcFlwWvBZ8CfwKHAo8CHwInAi8CHwInAicB1w
HvAdcBdwGPAXcBdwGPAX8HXwdnB2cFlwWvBZcFNwVPBTcFNwVPBT8EXwRnBG
8ELwQ3BD8ELwQ3BDcClwKvApcCNwJPAjcCNwJPAjcFxwXfBccFxwXfBc8E7w
T3BPcEFwQvBBcDtwPPA7cDtwPPA7cCxwLfAscCxwLfAscCxwLfAs8BjwGXAZ
6P7jAND/dza77aXNjjv9djrUdKnpUeNk4GbgZeBk4GbgZeAl4CfgJuAl4Cfg
JuAQ4BLgEdD9xwGg/0/3HweA/j/deTr09OfpztOhpz9PX5veNp1tHAtcCzwL
XAGcAXwBOvJ05enJ44Xgh+CG4IXgh+CG4GTgZuBl4CjgKuAp4CjgKuAp0K+n
Z0/Hnm44HXH64XTD6YjTD8exwLXAs8CHwIvAiaBHT5+eLj0OCi4KHgr+Bx4I
Dgj+Bx4IDgh+Bp4GjgZ+Bp4GjgYdfLr49PDp4NPFp4dPj54+PV16evT06enS
4z3gP+A+4DHgM+Ay4BzgHuAd4FLgVOBT4EbgSPB7hBuBI4EfgfeA/4D7gPeA
/4D7gK9ww/QWcBbwafBqcGrwafBncGpSrrf/69SYjzumeDy19fb4K4dT3D/H
ccF1wXPBR8FLwUlh/TyeBuvn//oWpnfB4/gHeAg4CKmtb5+f4n4v7gCuAM4A
vX0cAlwCPIKU6+Svp1gnT4+fDj/9fXr8dPjxYPBhcGHwYPBhcGFwXHBd8Fzw
KvArcCvwKvArcCvwIfAicCLwIfAicCJwFHAV8BTwivCLcIvwNvA3cDfwBvAH
cAfwY/BkcGTwXfBecF5wRHBF8ETwPPA9cD3wHvAfcB/wHvAfcB/wD/AQcBBw
mHCZ8JjwZvBncGcem67JadM5wTfB28DfwN3AV8BbwFnAecJ9wnvCecJ9wnvC
9cH5wffBv8HDwcEZbjorGU13BW8F1wTnBN8E1wTnBN8ELwQ/BDcEPwNPA0cD
NwJHAj8CNwJHAj8CBwIXAg8CBwIXAg8CZwJ3Am8CZwJ3Am8CnwCvAKcAzwDf
ANcAVwBnAF+Avj+9fzr/9Prp99Ptp0dPn54uPZ13uu/03vEt8C5wLnAUcBXw
FPAt8C5wLvAw8DFwMfAh8CJwIvAk8CVwJfAP8BBwEPAP8BBwEOjU062nV4+r
gbOBr4HDgcuBx4GLgJOAj0Dvnv493Xs8CXwJXAkcCFwIPAicCdwJvAncAhwD
/AKcD9wPvA9cEJwQfBC8DfwN3A38AzwEHAR8ArwCnAK8igcp9rvhi+CN4IxE
mdcJH1NcJ+B54HvgeuB/4IHggOAx4DPgMuAl4CfgJuAK4AzgC+BS4FTgU+BP
4FHgUOCj4KXgpOBY4FrgWeAx4DPgMuA34DngOOAZ4BvgGuAf4CHgIOBP4FHg
UOA94D/gPuC44LrgueB/4IHggOB54HvgeuBt4G/gbuBz4HXgdOBh4GPgYuAu
4DDgL+A34DngOOA34DngOODQ4NLg0eCy4LTgs+CC4ITgg+Bh4GPgYuBh4GPg
YuBA4ELgQeBG4EjgR8zxDi4l6yGdhk1aIfM7diWKl5f5nbQl9ZSsW/y0Y0i1
yLIbfXW9W97tZB6KzibdTXqb9IjpE9MlbrTdRea/VKM3oftl/suqxmbL/Bf9
XHq6dHTf+ncftfaKnx5V5M+d/q4BqqV1eFeZh6LfTc+bjjc9VvqsdFnpn9JD
pYNK/5QeKh3U9Cf1xQOR/jqgUPrQ2+PCdI4242Lc3eP+uu848Pjv9JHpJdNJ
PjexlczDqqrBmbp+knnY0xXd5d8nPfV0lnWJs3Z1Oyzzm3Wj3XrI/Ca9Ufqj
dEfpntNBp38+LZXz28VUrvNTWx9Cl5ZOLX1aOq10W+m10lmmu0xvedm83O2y
uN/UYRv/XK/i7aOtwrLNkvWEWRffLizzudtvzPOTdZhjyr9Q8v9L75X+K91X
pxkzjm85+VQF3P+5W9aXHpmyt6Gs/6TfSs+Vjiuda7rX9K5vJWUPluc5/Fzv
lHWkd/yP2crz0BGmK0xPuMqytc497IPV5/affjkOD1Oeecpsl3W2Fa//quN2
xU/ZDB6ZeaBrgPbOlLaVHIf0Z+nR0qGlJ0tflq4sfW1623S2E3r/yB5bKlL7
7vQKl3XObp2qesh85bA2aya+7hKl1/UcVPha5EtdNrRakMxX7utz5Gm/Vs/1
54j7s5eOCNAHnh9tIeuZd+y3Kyvzs0WTB6yU9cxnncYVkO+vuT9UNRiydZvs
D61j7g+lq0hnkb7i8f6Bsd2WBurxNe5XLpUjVCUN8qgm+2rbnXmsZd3yz2I5
8sv+1qvVp++Wdcv0kekl00nOU9W7ST0HL7U5n3vXtlPv6vIJPbrL/mW8BPwE
3AS8BPwE3AS8CvwK3Aq8CvwKusTt9w4IS37vpxMW9askPYeP3fu/l34CfXl6
83Tm6cvTm6czH2EfZi3rJWIOBS6RzkadqLNHZb0EXgV+BW4FXgV+BW5Fzmvl
pTeifJ1X2EtvxHVh7RLSD6GPSS+TTiZ9THqZdDJHrKm6R9btH72/aqzs241p
lWTZF4y7gMOAvzD39+/OxutU0+4v3FnVMVTvGnG3h7xOuuR0yumT4zTgNuA1
4EPgReBE5Nl/2Vbmqev9minz1Dpfmf9Y9qHjUuBU4FPgUuBU4FPQYaTLSI8R
rwK/ArcCDwMfAxcDRwFXAU+Bjj9df3r+9PTp69PVx7/Bw8HBwb/Bw8HBwZXB
mcGXoRdPP55uPH4DngOOA114OvH04el90/+m+00Xkk4kfUjcJhwn/Cb8JDwl
HCV8C7wLnAs8DHwMXAx8BbwFnAW8H/wf3B96/fT76fbTSaebTi+djjldc3rm
dBXpLNJXxFvCX8JdwpnAncCbwKXAqcCnoKdPX5+uPk4JbgleCZ1Nupv0NnFB
cELwQeiY0zWnZ07fjd4bnTd6+vT16erTZ6fXTqfd+3/Ph3877Xgq+Cq4Krhc
OF34XHha+Fq4WqVSuc+Z2vre4HX7X8h5eO7IwZWlY+PhVvSDnIfpLNNdprdM
l2N7ii4HHXm68vTkcZJwk/CS/vorpseCw4K/hceFw3Uvlb9LJ5FuIr1EXASc
BHwE3AIcA/wC+v70/un80xmkO0hvEH8FjwWHBccC1wLPgm4jHUf6jbg4ODn4
OLhoOGn4aPhDeEQ4RLg1ODb4NbgpOCr4Kbgg2UwnBB8E/wMPBAcEhwOXA48D
TwtfC1cLFwEnAR8BBwIXAg+CPiO9RjqN+EB4QThBTvHDihfNfU3bllTzxra7
oEJ9chVPf+itSlsu4e7F9RGq3ceCY4aXCNSLKszfONg/+q+Lg5ODj4NzhnuG
d4ZzhnuGd4aDgouCh4K3gb+Bu4FvgXeBc4HHg8+Dy0MXlU4qfVQ8GHwYXBic
Odw5vDmcOdw5vDmcOdw5vDlcHJwcfBxcHJwcfBz67PTa6bTjoOCi4KHgCOIK
4gni5+Hp4ejh3uHg4d/hJeAn4CbQvaWDS/+2xI7NXjlbxet6z8YnyfpPhwfV
HWTd5qfIuVdlnJu54bENsr7LrqybnYxz6eDTxaeHTwefLj49fLqcdDrpczau
eeaO/N01W8pHynrRXlm69Ja/W9ph7cssxjh9c02b77JedGf8qSEyTs/+Mo10
eHTzDx1KS4+o0gibr9LhGbX3pLM87thzS0np83yoXOKbPE53lQ4r/dU2oYl1
BvY+oQo8Slgq/a7DDjfrSc/K1vvR2gdVz6jaO2tbS78rwOvseOlfue8a20D+
/T3nzC7Sv7q5rbnl39NvpedKx5UuKp1U+qj0muk3022mj/y3l2x2kunP0qOl
Q0vnmu41vWs613Sv6V3jS+FN4UzRjaUjSz+W7iodVvqr6RddEmdCf3pn11Dc
iW57rS3eBD1W+qx0WSMqt4nPaYzPa2ZJN1J8iSafrSfKvkj6xfSM6RjTKaZb
TK+4+fxxkfI8wc2iJ8r+yvmjd1j2VwZ59PhHxpU5vZfZG+NKFZy5/xcZV+Jz
4HXgdOBz4HXgdNCfpUdLh7bh9aq1+pyNVy8a1a8t63JnOxa0lnW5v1fVrSTj
3CwvOz6SdblXhu7cLeNc/Ak8ChwKesf0j+ke79tjVUWeP9v7f5rK/t9fzbNX
lOeny0+nnz4/HXy6+PTw6eDTxaeHjxNQPIWzUMh+VLORxvh2/NtBaT16xag5
TsWmSJeejj9df3r+dPzp+tPzxy3AMcAvwC3AMcAv6JuKj4C/iMeIw/ho0CqH
8b1j1OdyNWac/Riu/+kSVlA69ngP+A+4D3gP+A+4D8kvu9jJevIFv2bvlq7m
49dX38p6cjrsdNnpseMC4gTiA9K1p3NP3/55na6DpR91pfq167K/wCeflZvs
L7gR59ZT9jVPqhewXvpahxp/2iX7munv0+Onw09/nx4/HX76+397/GaHf7/3
xuHSR6o+cuE12R89JMazpOyP3tXu2XXZB/GwwXXZB6HzxGy19C3xBvAHcAfw
BvAHcAfwBvAHcAfutBgbLev2X3Wd/lt6pJWGZskkvVC8BPwE3AS8BPwE3AS8
BPwE3AS8QPxA3EA673Tf6b3Teaf7Tu8d3w7vDucuMDlnHtm//7V1zeLSE1Md
7jaS/ft0z+mg0z+ne04Hnf45vgveC84LvgveC84L/gQeBQ4FPXH64nTF6W7T
4aa/Pen652My7n6VuMpNrqN87k1uINdRuIA4gfiAS1z6BS6eHqjSj42uLH36
cff2rJAuPU4Pbg9eD05PYorzM04Pbg9eD04Pbg9ej83IqDmyT79s2SQH6c7V
WhiyRPbp04unH083nl48/Xi68ZOnLPwi/1/z816dL65dH7+HP8Wzo7tNh5v+
Nh1qutT0qHEmcCfwJvCu8K9wr+jR06enS/+pjddp8Q8+L1tyRPr03ToXzCid
bbrtdNzpt9Ntp+NOv51OOt10euk4ZLhkeGS4WTha+Fn4PXg+OD44Pbg9eD04
FrgWeBY4FrgWeBY4GbgZeBm4CDgJ+Ai4CDgJ+AjZapT3FBfhh8/rvMZxqO/9
jlgnxyHO4l930fQW8QvxDHEM6dfTs6djj5+Bp4GjsXxbi+CCIR4qZ86G/euP
OaMXFZ645dr1twp/C48LhwunAbcBrwGnAbcBrwFHClcKTwr3EQcS//F+5yr7
5D5q8O6zjaXDnCu8Yim5j4pPgFeAU4BPgFeAU4D/hweIA4gXgh+CG4KLhpOG
j4YThhuGF4YThhuGF4b3if+J+/lrTJvVcv2cdHiUXD/rprMcLdfP+HB4cThx
/sV75ejWNkEHNB12aNLRZ7pMttBV5WYEqkZJjes6u8Wr9SH7X2wYeUN7O8Sv
kD48HXm68vTkkx769jAeV7NO969uPK4Xef2TWR53ONL4l+zvW5Bz6DHpUW9r
5LBe9vfho+Cl4KTgo+Cl4KR4jrgir0fPcFkbIK/nSXh7y+spVy2w2NKmCfp4
7kMTrUKv6CfrOo5rMzRMXdraYMlVjwTltsTn1/WCL5S3MeRfmeaZarj9w7Tt
Q6NUf6v7yavSRWvn3pktLgAeEj4SLhIeEj4SLpJtvsDtAcbvcavog9bnd8eo
rZffu0rHHtcK5wrfCtcK5wrfKnFltasfjPNmvIPPoM5Nw/WQ8wOzS9/evtAo
t7inxu9whoH/6THRuL6KXLrx3pEn6nyHVbvrbDSuxyrGf3jo+lpXih77weM/
furI2aI/PLu91E7jnbvI+pOXm2pHyTz4ncPVLsvvTsO8w2vK9/3y+Kxr5fte
//OkAVaxN3WbepHH+qW5pDYWW+N+z/mtqmft1lQ8g5y9dW1xBn6MrP1efAE8
GHwYXJjX5zJuzLMpWP17q8u+hZf89Yz7py54hcUrXAecB3yHR/Pmijegzsx1
ls9RtZmfzeIO5Jie6X2FH/FaN63kEPbrpfae9THX697P1Jt7haY+c0zQNaNy
5ouo9UKfj7OPvzk1QOV4+LzPytmJyuPbt1uXF/qrXyNKFGi775k6Pm3m8OJt
E1WLiYNXT+kZoKLqT97s895fFXmQMfv0RnFqWqBtx0tvbuvn564EjPKLUMmN
V20qMS9MPw/q2mfTfuN97V/N98X1IPXo1bucEzvEqOQXbeZZu4XoIh+rVreu
G6bK/bfvqgKvhq+Qvmtas+96Zuvlb9LB7zog6brDid168abIOOnhxwW/KyMd
/GXf0h1qut5Dz1/5uLD08BM9nDccv5Okv2YsbVPEbXejlYn7l5ce+1wFj6so
PX3VMKKtp/T190/ubunqN1lxR3r6qnwu/wPS1+84bXg+eZ4CpUcX7Ol6Stf6
+aq6eAUjvtn3FKdg7vzgX9L3X1Zwq/T+dSabw7Wkt19U5wyXvn/ZBT+l969n
qvWWzn9IxBV5/SqHdcdr8vqvf4+yvP5mU643utQmUZ36OeHQiRJHtH2+pVHS
yX8fc0se1w3y2ByTx0f1GWF5fP34EdvmHkrSmQp1L508b6u+1KzZvg3fnqvE
PYOzem1M0lVbzmwRH7lP27xY4dje3hhnpWm9J6L/KVWt/+v3WYxxdJ+Ffdxm
eQcr99DA8KBuJ1XDVe9+igOQp2WOYdL/P5/051bUxVMqvXu1UuIA2AS9nyT9
/9NmX6+J2dujs1cxlc7zArOnGWv2Nc+ZXc2//UqzZ7nL7FheNzuMS80u4xGz
x7jf7B5WNTuI78z+YU+zZ1fA7NsVN7t2mc0e3EuzDzfP7MI1iLk/VV6PU9Jy
F/FjTzfTv2cYr2fQ7tU3pD9V81Vjq4k9Y/Unl2PVpEOVWk+bx7eajxc2H0+t
dx1i9q1qmL2rImbnin3mxcx957/N/eZXmlhJJ1f3zt+pvHRz/zR3tfRyvXI+
7iCdl/hHOW48sj6trbJdOiq9l6wp1kXTFYlKpQdCNyNNKt2MLym6GSnXG9OX
cDPXA5dLsR44tf2nzDvgmeOYs86hnbnOwcVc55Da/lM8xSEpfMDUOsOp9YQ5
npumOJ7/f7vB2839um7m/t0V5r7dm2YPfZnZR89udtHpd9PzpuMdnOI4sTKP
E74vB1J8XzhOBpvHSZoW/z1OOK6KpjiuGpnfn6spOqKpdThT616m1nsfa/bf
0pj9t1Vm/y21bhjOwtcUzsK5VPo/qfWfU+vksG7J3lzHVMRcv5Raxya1Tuka
0xsoZ/oDsWYfyTeVXuiHVDow3NfjPt8C8/5ejlQ6LXfM9SVx5nqTdeY6k9Q6
8NYp+hV/zM/9ltkxGG92DNqaHQP2m3P8ctzii+CN4IzwOfG58Xl1S2WfdWq9
mhXm+f2Geb4/YJ7n+R6eTtFxxX3gc+D9P2ceH/SiOE7Km78HTil6p1fM457v
Acd/NvP3ItT8vZht/l4MTPG78MH8XeB9KZvCYalh/r4MNX9fLpq/Lxx/9ubx
WNg8DtOa3xO+N67m94XexG3zc2tnfl4cB3fN44LjgfMF549C5nnjgfm7O9H8
HfYyf39T61Px+bFvns+RzirvE+/PdPN5g82/c9l8/nHm+17O/Bx4/1PrTU0x
zwvxKbzj1O6HD0lxv/e4ef5P7b5rSk/2mPnvD6Toae8xz6up9aA4Xpebxy/H
Lb/L783f5cLm77J1ij7bNbPP9n8Aeb+9fA==
               "]], 
             Method -> {
              "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                 GrayLevel[0.3]], "RotationControl" -> "Globe"}, {
             BoxRatios -> Automatic, DisplayFunction -> Identity, 
              Ticks -> {Automatic, Automatic, Automatic}, FaceGrids -> None, 
              DisplayFunction -> Identity, Axes -> True, AxesLabel -> {
                FormBox[
                 TagBox["x", HoldForm], TraditionalForm], 
                FormBox[
                 TagBox["y", HoldForm], TraditionalForm], None}, 
              AxesOrigin -> {Automatic, Automatic, Automatic}, AxesStyle -> 
              Directive[
                GrayLevel[0.65], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, BoxRatios -> {1, 1, 0.4}, 
              BoxStyle -> GrayLevel[0, 0.35], DisplayFunction :> Identity, 
              FaceGridsStyle -> Automatic, ImageSize -> {330.}, Lighting -> 
              "Neutral", Method -> {"DefaultBoundaryStyle" -> Directive[
                  GrayLevel[0.3]], "RotationControl" -> "Globe"}, 
              PlotRange -> {{-3.145793068746681, 
               3.145793068746681}, {-3.145793068746681, 
               3.145793068746681}, {-0.999975415798742, 0.999975415798742}}, 
              PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
             Method -> {"ResolveAsTriangles" -> False}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[Sin[x y], {x, -3.14579, 3.14579}, {y, -3.14579, \
3.14579}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1493$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max1495$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min1492$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min1494$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1492$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1493$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1494$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1495$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1312611$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1492$\
1312616$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1493$1312617$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min1494$\
1312618$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1495$1312619$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1493$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max1495$\
$ = 0.5, CalculateUtilities`GraphicsUtilities`Private`min1492$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min1494$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1312611$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1492$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min1492$\
1312616$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1493$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1493$\
1312617$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1494$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1494$\
1312618$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1495$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1495$\
1312619$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    Sin[$CellContext`x $CellContext`y], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1492$$], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1492$$], \
-3.145793518145755], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1492$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1493$$]], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1492$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1493$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1492$$ + 
                    0.00629158703629151, 
                    CalculateUtilities`GraphicsUtilities`Private`max1493$$]], 
                    3.145793518145755]}, {$CellContext`y, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1494$$], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1494$$], \
-3.145793518145755], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1494$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1495$$]], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1494$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1495$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1494$$ + 
                    0.00629158703629151, 
                    CalculateUtilities`GraphicsUtilities`Private`max1495$$]], 
                    3.145793518145755]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> {330.}, ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1492$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1493$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1494$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1495$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfv/6D5B4RuoGD3tAgnVsTBpQkvLeW+\
IkFq4dbGcb/PPgs5ukWbtKMR2gKX041Zfm8913313v+YkIkn6v11M3jfkgWJxs4emZMSMxy0XB4/\
fnuSRKUcGTG/jsnjEh0fuEwQ8SO99tYw6EnIF25zf4PrCoYKDJV00Z1ZSo6aGEPKORqj1jSU/\
NT6ZMRMDoT/JiuDPcfr2762AwljFoTSRXO20h80yCIkkPgW4Zs8eAf3PHp+\
XxU8FYSL4XhEdEPTbeiYTYwAgODPPxvvV6M/\
UAE9PAY5DxldNk5Tlqe4HSkvJ0QmY5vnE5WcO2wCBT5bh5WHKzTkEu/\
Dv4QIQ2JuexSduzJdAvjGtG30VZ/XPuBnh+2xZeirPVxGF+\
7xjyBpqeErVM58vWdXKMVF1ro59zdVXzZaNBXj5l6v+lY6r0chjbbcMgsxNT49XaW4Z/\
1RZe5Nj1c3E/Muazc5SAq4ZDJbiPIi7YPIpmygMn0fbpqtw4HMb9iu8QnT4VrHACE2fZL7Y/\
nlTg9aYQYu2mG5AOr2dAQHJiXLHldp+mVI8ykBAZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaI6ShbqDjrIvf1TcSi4Xmgx5P+\
KapESuFf1drI805PJ4IjwjCfGCpl69OaySGoP0lv2gBAlz4BQh6S/zsd/\
cw8VKIFWHEtUlHYsDW5pz/yT6ZYGPCU911tyxPUeXd9tiNoE4q1UX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwFRNbiO"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.63", 
    "parsetiming" -> "0.325", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa365413h70hfeiaaeb54h000036e914f697666fg1", "host" -> 
    "http://www5b.wolframalpha.com", "server" -> "56", "related" -> 
    "http://www5b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa365513h70hfeiaaeb54h000063e108f032g20i5c2586184755524934074", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2019, 7, 7, 22, 1, 6.9988846`8.597603805571458}, "Line" -> 27, 
    "SessionID" -> 32514846202028766043}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "3DPlot", "3D plot", 1, 1, "Input", 
    "Plot3D[Sin[x y], {x, -3.14579, 3.14579}, {y, -3.14579, 3.14579}]"}, 
   Typeset`open$$ = True, Typeset`newq$$ = "plot sin(xy)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {1011., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
Y/D/hmr8nFPg52j8rKvrCklvf+CPqo8uWfanz+VvJjz80ZjmSZwh/MZ+Yf+6
jof4HPry9xnad/AN63DVjfWLtX/3C+s/4Ds+/6Vp+St/dHwR8un4udVH/F58
XlJfT/gDoxbU/nbEO+Zz9mut7q3PK331SutRyO1SknvwK/viHfE5+w46pY/r
fnHhZUk+MvihR9Nlr314/jzzJ+v+yfWtW3RKJ3lmaf9NaG85BT6X/Vv0vQLz
yZVjmr37eL8krzjrWE/7CHrC5wUhT6lx1qFFkIceP/001XjgA3DkCXEarO83
RXzxcx5xF9CtxYiuZdo8/qP96uC/1+6wfWz7X9wP4xkW+smnH+TD0W+c2Oe9
q2bY3gA/ZU+XNR36LHHcCONdVGSfL3I/zG/cuPTdqYlz3A/4E4/M/fXOKiut
N8Mn7+ocZ93ZZ++pnoLzAUm/m/nG/u9vPD/JO8/f79f4OafB0xo/82ce0IF5
0t89oR/LTfqrGfpx3Av9l1V7cNbr3DaDV1ScP9M4fNIsrJfj4V03MLQ3znny
QNt0QbE7fjLu/CJDDh/9ase57pfxTxM/0C94U42n85svp64qmbzrf6VJ/wtq
jd6SOlL7BXxi3vaZ2UrDUyfcPrvfFU3/djxDi1br7nir/6ZMWe038HXyI51Y
hC+2HdwkVebbW37YKv75nnq52Zqdzx3Yed28vMNDe/uhW9V6cNCbpfAvJf7p
ozr8XTDtsILM4UXj3Gm8eb1b7zh3YJ/U0dIPwJfKv3RsGH9y7/dR8QXzOo1M
dQp0cLxH9+/3lW4xf53pA3+2rdkrNbjEqAz0AV9/6dKZnX9I6AC+RPWYmBd4
9e3tb9584UbPC7xVlRN/Kny40PMC3/vLJ0c/+d4vHg/7otKGYl+evKvQ4wGH
/qwXeLett/Xdev4ijxP8aNWpYZzgp19bo26lL9d6nOBbZnbqO+z3ZJzgq7de
OLH0moIM9AevKD8240f+H/PbrNbrqq7y+MFbre5fsOGXfh6/36Pd0vCFPat/
ScFXfu/18V3dTl27wnwF/kz+faP+My9rvgKvHdp7XuDU2WRe4Gs/fb7J1d9v
87zAC/Sei3mhX7da+8T808au8T4CX6/3ocfpHAe/buCdvca/vtb0dx6PE/r0
OvHYBR4neK3Q3uMEX3f/BaWGzE7G47pRS8s9/lC1Qo/H97Gy1+AH8LeoZxT6
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
hk9MH7nV69o/nO+ZjM538KbST4rtLNJPPK8HdA/VUnoC+N/Sc8qPLtJzLFcf
U/tWob31n8H67qTwXY/n5vDd1FzpReBdpIcMUnu+O1R+9OXSr8BvkD7zrL7L
eDrhpw/tvb9q6rujw3e9X5oFuqVqiG6s17iwXqmHpZeCr5c+w7qwXqPVvm60
vj/I73FcWF/7oz7SPeRF4h/WsbnGkxfGY/x86UWviD8Zf7hP2JHKEz+z33vo
3u/jnDz2OzMXqH2HsK+NHyo6sb+Yb3/dx74ku8B0kH71YLR/p2i+/wn71/6W
3uqncSQf6smvclSQD/bLVdY420n+sN+ZF3kdoQ90qBHoYJx5fSh5iB+Pe+Ez
TwnyE7l6oe715k86bfpjZ/xk+Xmkvl9Bchi6BX1gd2p4kOfGX5V+eJPkue8L
1H6k5D/zov9zdY6wvmU1j6zOHfo/TjjyDfz3cH6l+4dz0/vls6hOFnhcJ4tx
HqP+3xfdoCc/x8qO5ne++6zOcfu3w7mfzn6fe+5fE/SENHoCdH5F92VDpG8w
TtbtbdkX4H7voPpWjP9q9d9S+g905j6un/Qoxi8/Q/r6MB7jw6SXnip9zPkl
9d3B0t/Qc+Zrvjd9n+snmaj792+CH8b7tKriBNAPI30yPVN+mEj/TEv/9DlI
P+T5ZPx/3Xva7Ls3l0r/MKjhsCO6rTb+ZNB7089I743iRhin9XD02E9W1/5r
eslEjwU/t8XlG/+8fVUq8mtl5dfyutP+9BW7fznp3hWmA+3Pqn9+3y/LJ/tI
48yeuvmvi4aNWWB8f5hX9uzDbzly0sBZpg/9v9m4Q/OZ/debntwzlpYfD/lT
Rt9t23H9oiu6/+zzl35KNh3RqO4JCV810XgOCePx+eK6Tpfum5J3dsJvzOvc
MK9URP+s6G+ceY0P62X92fnhAv29v1yf56E9Bw+dsNzrAl778kb7nlyW2DU/
yE/VUf4u6EP7m5qcNOO6gVssZ7jfXBnuN01P8Nflv4We0PmHus1HrPhgbh54
b+5Vr2syc16l6aYz330o8+nZZ47aZDpjB30Y7EHPFz/bS6+u++qD1Yk/La5n
BL+Btz7x9uMuu36D8dbSt1fUL7Lf/+EPbCT6QAfwac8MuevaLolcAl9+bc0P
tp6X6M/cqy6TH5722xQno3wLxi8nnkrvT6EP/X/73Dd3txy+3npO9F3vX7+b
1L0D/PN48ANkH5E/AXoSh3Pdaatq/Pu9raYn+M+P3/7Z5D9Xmm7gi08v+eqr
rw603AYvG9lB4Oflb/jm3PsKjXM/e0L1Ch/vWL/NevL9iquqKf8J+DT5P5sE
/6f5bQbvEOc1G3Nonynmt3t5779hbY28OmPzoBvjqaE4NOiD/TIg+EtNB+Kt
djV6a+FBhb94vg/In8n9LOv4uuyyg1oG/5Lv0eRH7R38qKbDZdLna8vfBY4+
f3vwc5oO3CP/pHs35gs++r+3n33B4G/zkD+M81DdP8InrxF3LL8Z8od+6sz5
vPV9dydyhvi6wS3f2999WOLvjes3wScDpf9/vaTZY1f1Xmm6rZf/Myu/IuOn
nx87LVxY9YphecyX++XnovvQk0TXv4JdZv3TeQxSI+5s1v0z24/Vc+nsczMa
j+mA3fRlGL/xl2Q3VVpcZ/Mpy342/zD+IYE+pnOJH4Pd9GzwP1veEqd064D2
bfq3nOz1BX/u5+eemNZ1pPmHe+fg/8iYz2lf6r27Fkz6oKvpRvtTwz245S3t
Hwv9m260Dz87Vcv1b8/M3BDG6X3xvuysSzQv1r2W7Kz5wa9uufqV/Mkfi87g
tynukndqzJd4tIv0XfYF9lEd+f/BK+f6jW2n0M/tmi/995D9VUP3C+CHad67
I76in41diuicT//csz+kOAroTPtrtY70Q/vPA3/aHqT9eeIH+BO6ddV+AYdu
vAOCP28S/ZfoXgMc+7qH9iO4xzPt7Y3NRyfvj77R+tbSvQlygDjZ4eJz+CGu
jwZ9wDe90rXNqjFzTE+/ywz73fQkTmC64mpoDz48yDfbiS+JH66WnGRetL8p
yDGfg3x3hOQYOHbuPN2XMV/ikRdF5wJxtRUeLjoXzP9+L7i0eKmmHRO9Pav4
3B66RwPHDi0WzgvTjX5u6zm+TfHLl/rcH6d+PuQcEU77bkOvuP7UDsk6gp8Z
xmn69JEdWrlUuGcE515jYL2gFzHOqrKLR+ue0f5k3WuQB5L9SLwB8WbMK9hB
v6ee1D0m+D26N7kynPte9/ryD1QK57j9CRPUT8NIH5jCd4M+kJ9737QnVV3v
wuAf8Iukn7C/wMljb7+i8OwZQf+J700a694E+vsdhPQo+oE+DyveDz70OKWP
5fJPsfQK6XvQGTv6Ht2Pg2O3oj/TD3EUbxDHKHrS//CgZyZxR8LRbx13JHyh
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
2mpcpP8SfwiuPv3/AP7BdsUd713F/Hg132dTPxTceSp+Hvzryk/W95jA74R/
5fe9mUoPoV/em1Zv4s4j2Q8gh3alHYpPt+48d/pYd11vmv//ZJ3Zssg6J/YG
/nNFJ/2U/OfIlfECv/rtjBfw0k+Kj6K36B/8D/STc1je0/9nvgYfLfQv/jD9
pTza/5vMU/Ip3ot/lr74Rs7hHQ/JC4Efls+ci6JP+yt1d7F/+Uy+LMaLdpl4
IfyV9P2/nGdtRztcWCd9buAIehP3edc/GVf873hRTnH1Jj/ZB/F87isi37rC
/n1vJet23/f/0o+V50jabe4B4a+y/gFvYz0T/rEH/V5XsV97m/2aekke6WKd
lrwx0LG/fU9+tCvlvch4jD2jT8dj4nt4z3GnPNkvFOs3+d/GfJc4APTnPVbl
VR+binnZ9pdzfpi8n7xHXaTwlzpZW4c3zLafjd9WT65js15FDvNtZh3Oe64z
tRvlcD0j3dxPZL5WTvXj89KXz1n8iXKJK2+5z+1nnyId5aCufdYf8vU863Pp
qCf0E30VeOadov5UfZ6LXIPwo75yb5R21Zv6MZ9k8hHQjn5VPnLPCz61T9u/
aeE+Pftr13vqx3Z307/yKZ3n2G/mngx6m2c/bj/mOxrfZzPvoJ/v+C4Wu/U8
EPpF3fatv4CrL/kfZF0dvwedct+UegrsK21XfV9kPZx7d/B7Bjz1NqA3R7v+
TrwoeL5rQn+S+t3K7//qwffFh1jv5R6s992wk5y/gDvvS6eMK1Auceev9KPz
O3jWFejT9Xnuq6PPF8Fjx7TDPZrMd8qlPSQvMPQ+faV5cHNH7TeSR6j7eM81
O0dDR76m2Lem7gj/ny/WPzk/OdzcOLOqruvte1MVnrwq+e55qmvm3pfG8pz/
D1b7zd7/AOVNxtE=
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[
        TagBox[{Polygon3DBox[CompressedData["
1:eJxNnXe8FEXz9ffu7uzu5CuCCQMoomJEzKICBkTEjIIRMeecM4oJMWDOAcGc
I0YwK0YEc8KcE0YUec/3nn4+v/ePe7u3t6enZ3amu+rUqaruIw/a6sBqpVL5
L69Uaiq7xZXKDm2VSrNVqYxvVCo36K8RVSrvq+05/e2rPjPVcSP9zdDnj9Sv
i8qnm5XKq+r7iv6O0d9+aaUyVH0vzSqVi3SC19RnN33eUOO/ovpgHbex6m+r
vrXqW6n+serDVL9E55uq+v7qf0ZSqbyj+jZq/0zlIvo7TO3Havw9VF6u8e/V
+C+qfT993kzzmqn6wvr7U8fep+8+0bH9NadbNe55altDfw+o/VO1z6u2+1X/
Rv0PrFcqX6v8Un991f9Gffed6kvoHNN0fa32SmVXHbOY2l7R51M1hwN1zoPL
SmWi+hyv+s1FpbKpruVD9dlWfbup/RS136bybPU/XPU7Vd9Q49+p8dt07i80
5x24+aovru9GqXqHyoX1/Y5qr6r9F435M/dQYy6i9gfV9qM+/61rma3yILUP
1d+Cqj+vuR2uc+2icfbX3C5X/5fVfoA+z6/6fPr7W5+7q9xF42ca60md7wJ9
f6GO+1ZtI/VXqH1/Xc8rui8rqHxYfS5Tn/tUX1fnbdf3x+qcr+nZOUj9L1HZ
U30uV5+XVM5Vn3t0jnEql9bnDzWvTPfwVdWvVZ+Lda7fdV0rai7v67tXdPy+
GudilcupzxdqK9T/EJ1vOY1zsMqX1X6yzrmq2nfUsbN07F76/KG+u1ljrqTr
fUzzXU/tD+nzkup/vspxOtf7qo/h/unYFVW/Re0f6biVVb9b9Y9V9tDfdJ03
Vp8zNNZYtV+gY5fRNTyqMfvr+Kv0212pv+k6z0rq/436r67+01U/Xd93Uv07
zfcr/T2s4x9V30f0N1h/76nPmTz76nMpz6XG/FnHb6ZzTNH3/VR2199NurfT
9f2aKpfU3wMaZ1td7y/qv7vaB2qcp9R2k/qerXs2TH0203dLa06ZPp+oz+9p
zonGfEflAmo7WW0/65jFNc4u6tvSOI/q7wuuUXPYW2176E+HVBK1f67yfJ57
HXucjv1Sn9/UWD/yXqv9aZ3rcPXXz1VZU2PeoPpKOq6zBsh1zFH6PFr143Uf
TlV9gPofo/Jb9V9Q/b7nGdA4j6lvZ+an75bVOMepXEDfr6y/i1RfkvdUf4eo
3knlRI2zL/PnvVJ9jsrl9LeF6qdqnn9zPTrvaNWv4/3V2Jeq/Evt72ous1Qu
rL9F1GcTHXOOvuupwUapXEjlA5rDgarPo/oT6nM536v/VF37bzr+JZXbpG57
TuUT6n+m+nRT/1s13r9qX5ZnUe2naA5T1L666lerz/Jct47/R99P0LUfo/pV
al9O7XtprC3V/pjaTy79/vIez6PfeivV92bN0/nP0JhXsL7o8wZqf1XlCrrG
W9XWpr/V9flM9XlWY26t+dytep33Qeeqqbxd47+g+dyl+lrq84PqVdVvU/uF
ut6l9feBzhNlHn9Hjbe5Pp+vsbbVWHP1+Q71/VdznKHzrqy/u3X8ZnqX5qrP
EJWjdez6OnYH9W2q/oD6L6hn/ik9LKup/0EqT898vVx3rPpD6tNHfVLVB6l9
V65Lc35WYw/UPMeqfRO1j1T7vKpvrfo+qvfhQVCfm3X80uo/SfV1WA81j346
1xE61wBd4wtq31jtW7KOaJ7Lq+yicabouIV03tMS7zuDWE/0N1n1DVRup37r
8zxrnFMT70+nqHxBnzdU+zEqX4m9D32s/svpu2k6dnPVI92j69V/vMZoU/tZ
rLtqz9WW8Szp86Mao5P+TlB9T7Utq/rpjJX7Gf4v8+9+muqr8BzqXOeqfpLG
G6v2cyL3P1y/216qn6X6eSp3rrveS+XqGvNs1XfS/dpQY5yZeT+5Qm0n6vMh
mudU3YdJKvuWfsbadP5YfcZU/Tv1SjzGiSqP0Ln2jjyPnvp8jsrndV1v1vzs
rab+a2i8Z1Uer/m+yZz0N0yf99UctmGv0Ryu1H25VONcUVjWuLjqff1I1dfV
WBfo89Gqx+wjVd+zC1XuzN6vY/bQtX2leR5Wek9+ROUo/W2hubyici9+L/Wf
qs/76ti1Neb5+ny9jr1an6/jGdBxJ2i8EepzfMOyzaXqc4LqA1W/TPUb1W9f
nes7nesG1fdR/RvVb9X4l6v+sa7xNY33qv5uUf/DVP6j8lb9ndzw/ni96v3V
/zrkIZ1rjOZ3ocq3Va7FOqD2BTWX5UvLA+dq/COQSVS/Rt8dqDEP0+erkROq
Hmc86wiyStV76pY6ZrzqC6icR33/Un1H/Z1deG2co3v+sMZZMfJ8jtR5R6t+
hMrNuTa1za/yEbWtEvnzqrGfvac119GJf4fTVc7LOfV3ic67tn7Tiaq/qT53
q/6K2jbQdYzn/WUclTfo864qN+Jd05x/U/+b9fernrEreZ51zKHqO7vqe3il
+j7Js6HyVY17sb5fh/myhjFPfX6/5XIetbfVPYdH9PlUjb9O5H305cJrYHdd
14dqX0DfP65r+l397wrP6o9qX13l82qfrL87kRsbXoc30TleUPmT+v+ov/N0
/kX5fVjzkef0/Uj1v0PlW6y5amdzmqtxtlJ9rn7T2brvL6r5dt2bYZrXdvrb
W8dcVPMzsg0yrq7hNtXf1bFFy/vthTybGmdntd+utvM0pzeRhRDadexOOu5T
VcerXqtZdp+p/vvr+/uRVTXfy9R+KPJA3fs++/pjLe/1OXuWvm8g8+nzNSqP
Vt/hqo9MvO8/zp6eWn6YzPqpa1lQY3yp+5rUvFd+hfyk8Q9V/WvVn2xZNphP
5RXsoQ3LC9+nvmdba4xlYssI8yMzJd7Xv1ZbF+QXtf+gftPV/hPvuu7DwjXv
s7/o85Sa91bW0y903Od1yw8/IKvp+6X4zXXs27pXd6r8Rt8/H/b6ri3LQVdq
zE5qG1vzO7KE6leqfiSytca5Vt9vrWd1qZZlhxv0+Ve136iyp9qH6Rp6s0+p
3DS1rLCOymMzr7FVPW/99dxcp/b1VL6cWDa4Scf/o34DVe+seb6jvzVU/1Pl
0Tp2dZ5pjT+r5WdsZ7U9kXtf2E/lLPWbrbkOUjkH2Vjj/6vyL43Zj7Vc/f9W
/VadZymNM1Kf10NPUbmF7sfhur7tNO5LyIpt1tNW1Rhravwn9XkVlfejAyLP
qX2Mjmmofp/+xutvU64N3QX5Vp+TyOsz++sjml83Hb+3yrdq3ncebPNeca/O
l7Onaq4/q76+yo11X+5nnVX5Xs17xIu67pPRHdR3bdWfU797WZ90LWN5Htu8
f3xc83r+PLqp+j2icj327pr3DuSGp/U8TVDZW+3n6zy/Rn4mFkp8bxdX+/25
n/+dVF5c+L2YpPt3p47dVfVYfd7RsZ2CvHpv7ndvuMpbVD5e9buzhPrvrjJF
BlB9N9Xf1XEr61rr4f1aQe2no8cid+lcZ2gul6lcXn3awvu7aOv/1jbeoSOC
jL104c9Pam4P1ixjH4mMrTEf0xy+Vv8Zuq491faezruCxpyHZxtZVp/bG34/
11F7WnP9Nt33kzSHSzT2khrnMLV11jhrqU8c3u3OGvNDfZ5XZaYxUvazNsvb
XMuSmtsJVcvn6lJp1qxLoEfchP6qv525F+q/XN1r1kcNryErxl6PWJdQgffQ
v7rGWj7oInuFcTbJfP8f1LVfWngPQPael9+l4XVkj9LrxAMq52e9qXpN2FDn
nC/oF5+rvbvG6a3zDs1c31jHPJh73dld5UlV6wKL67tHkOFVP0gX9oi+bw9y
2rxhjWJOE9Brwpr5q9oP1t+iyAAqu6lcW+3XqT5X9e2RuTTm96p3Unmyzn0P
90HlnTr3Tmr/S/N6XPN8TH9bcr8L73eL6PtJOqbQWEupfFjllKp1qlH6DZ8L
69vJkX9T1sZFdfz7qn/LeqG/hcIaOrDuMUcH/eg0lT00j0/RFXXMTJWf1a2z
Ha3vFlZb14bH/wodQX1X0xy+09xKHT9Cc1tffRdR/Vj2gIbXYXSczxpe8xdk
P9f3z1StD56gec1fcx1dEL1vHpWra5z926zj3V2z/rkP+oXuS5eK383jdO7t
ka/0rJ6h77dWfTA6gD5vrnKOzru7zntBzXvnlLr36BnoiTr+GX23vspL1D4C
+VbH3KhjN1H5F7iD2sfUrO/spL7bqNw07PsnqfyD/U99utf8fOyqPiP0N0T1
59X2gvqPU/0Z1ZepWWb4SvfqYN4bXcfmTe8d3+mYTzXOzLrf5YbKk8DXdPzG
6BmqD0G2qHkNYX1ZTvf6e811ea2H0xKvP9/q89mx370eKpdXn/3QQXSum2te
W3gH84bfa97fITp2Y2Thlte5z72sVd5GNlD73axRmsM3keX4Nh27Me+d6reo
vqf+ttff/onluBnqf7M+34RezRqra7lQA+6m7/7VnNZWebn69NN3PyML66+f
7skt7Asqd9Fcf2cv0tz75F5btlfbfTU/t9y7MbGfmeXBQiLLab8ibjX8jrP2
3Vbz+8n6u4rGOVvljuA07LU65ikwn9zP/HC1b4SsrHGey/zM8eyhUoKZcA/n
U72PnpXbWctVrqHj71D/RXXcumEtVXNlYG55uLPK9pbH+AD8o83XtVjF7y7v
ExjIxLCesD5/rXG2rHuuf/Ju6u9anqXCMsMqWtP+0tz/jIx3zK973kPHrqL7
0E3neFHnvUz9d9f3uwVdccXc7+JWuq6f1L+n+v2ospvaZ4PZqBzY9LvJO9pb
n3/RpFdA5tHYY9qMU6yU+5nfVuM8A86G3KByPh0zK/I5RoR3mPd3GvKMPi+j
m7Iqz4/msoz++qr+A/I2z5bGOlJ9x6rPX5rTX9x35FW1H6T20WofXRpfBWc9
KzFGu5P6HFRaRwQDHpMYo91Z7Tu2jPu+oGs6ojTWCua6PbK+2vdBPte1nKhr
u0rlCZrn2ey7KvfTd4urz6tgCJrn8axlmufmNWNuYL5b1ow3dtPfqerflX1C
5Xqa8y86boDu2xax8eftwRl17ult1kV/U/sK7IHo2HVjnmCLJ7a8172j9p94
v8ECNO5C6IL6O1d9vlfbrjXjrRdpzGvU9rXKe3Xeo1Q/l3WM9wKdVeONiI0Z
H9ayngoGDoaOvnuV/t5S/ULdt85qPx6cLTEGPpNr0ffrqT5Afe7X+Edr/PNS
675fIFewX6B/1I0PX8PxVeux36r/HcjV6r+1no2t9Leqvpum75ZVOVZln6C7
orfOAZtBRtTnSUHXXJPnQG3dVV9F9UtSj/kt1xsZT15V7Re0vK9+p/t2iea/
vPqfp7bvwh40lv1Mn//Usdepz/nINLx3qq+s+3MB18HzojnvCt6g8QfVbINY
SH9d1T5C7UeofRb7j/4WQ0eoWu9F5+2h71ZX3y815mDN6x2dezN9l6beK/5W
+8TEe9NEneuo2PvITapvqPF/0/db6Zm5JvE9v5J3L/U6+4baZqj/Q2r/XO2/
qv9jOueNqfXczateT9H1l9bf1frur9jv3VfYJmpek9nPXkfv0PxeQ0dOjUtP
BoNU/0HsZeq/hsb/XuWWms+8Gv/cmmWRbuq7WGQbwc+xbQ7gJHsjf6qtjz53
yf1bDVa5hvqeib1A3x1Q87rK73Wg6l1491VfsHTbN+grmscXas809rLof1Xj
ElvoHhynY1bi+vV+1tgnVe5Q9f7+hq73HH0/SJ9/0tx76tj/VD+K9TfgHsz/
Gs1pU5W/gKGy9uu7XfX5b/3tEvb9/5rG0sfrulK1rdxmW8heGj+q+r39qWps
oZ/qK2uc3vpbSp9r/NaaW1XlupExh3XUPlfH/qhyDf0dzp6sch0du1RuzH8t
zecjnfc8neconfeTwjaL1dX+H3pV3b/l4oXXitdUHtM0xrOkykt1zm/Vb902
21ZWavOa8IaOe73u5/LdzGVv3e8Pml5LjmzZnsHa87HK65EpeYbA+vR5B43b
UpnWjc9sqb+66qNr3q+v1u80SvXDVWZq/11tQ/U3Bvsf+IzKM/X9+mr7Qecf
i8yovz6aw4+Z5aONsP9oHhuoPkv9j1f/fuq/vj5/pvaePLNq3zmudNjEDlXb
gKrXmSfV1KgaMwIv6oONQ5+Pbtl2xe92hI7dSWM21b6U+k2MjSl1Vbkte2Dk
Z2IDlb+qHMheDm6v8iDeT92L7VT+rnlOyH19vyFH6fg59FW5d8P43j76O6Jq
ffpjnfs29kp9P0Lv0a9Btr9Yc2vX+H+q33Cedc3zD5ULqN8/6BM174mzqn6e
N9RY1+q7s5AVVH6FjKK29VW+rXHe0t/Keh4GV93+NLdJ83lc7T3UvmxumWKQ
+t+mc79esTx8TOzz36K2Xrr2ZSLrKfvELt9WuUnude4NHbtfWPMu1PG/1Wyb
6xbea9bni5AbMq/n3+maNtEcVgrvxTJN2+Ny/T6DkBsbfgdOrnvNpz5a87ih
Yix0vtx2rreRAWteL3rq8+zca+4M7KjoacgjKjfNPYc31b5U0+OwF/TMvR5u
oXJ5fb4L3EPXtXrkNelOsCd9t2LV9r5zWt5Pe6jv2S2vo0s0/Zvx22HPe0j3
tFfVexA6WZ+wf52ufpPRV1SOqlvfY9w0sbxzFmt+zfXb0K2wVVd8rw4Naxvz
+yTzudAFu+Z+zmeqbePEfVZoWk5ZperjN84tm7yuPlenPpZn7dS6ZRuepe1y
76tfqs/auva1Irf/B2ZQ87o0rrB98Wv0TX0/uu72y3XsWirnqLwmtqw+L+9i
3esg322j+/A864/qz6jsW/X+dFDs9e8K8M/c+9qjhfcj2h9Vn2HwBCLvX83U
YzVUPq3yKf1N0XcnNv1bLafyitzrQ0XjnFO3vZN39peq1wXWhFXV7wnWN53/
qtT2XO7h0NwyyBeqH1t6T36v9D3eMBx7fFivOB75h3XucdXfi92H3/fK3DpZ
tfB7it7EnnF56fo1OmdU93pCv5PC3nRDy/sKfTdN/L5uUvU7u0ni67gOnVXX
/V3Vz+jEhjH91TSXxyLjCcg36BDnt1mP+DKxjvmbjh1VtZ10JbUPCTop8s2p
OnazuvXQbZvGBmdp3OdqxuhoB+e4sM1Yx266RyurfDnYE9En+iB/NtyOfW2N
3LbUPdR3qtpf0t/B+tu8bn2E7xZXeTHyVcW2hdMi21C7Jh5zmZbnOyHMedeA
o6ITX6OxrsY2gIzcsl33W/0OZ0e2ZaIT7Z/ZrvuR5nJWZL0JG+pv+m2uRNdS
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
fVaxHbAa6vPXjYGCf5YN78VweLD3x6E+oWYZhvuwUuAn6JDKanXbGbHLj2ua
pwRf6Z6abbV8XjvwB4ANjozcrq6VhUpf7za5MQcw0vvZq3LXt2VPrxv7wvaa
h9+X+lb67TdF30tsbwWjA3PcTvWf1D4oMt6IDIksSd9HOU5/wxvGHcDNr9cc
ttYYG+gGn1e3XAYuf2Bi2/N9mvQB6IBV85+wL4MBvlyxvRa9DU7yi5FxUfD9
JDUWOp+O7Rrsnnvq8/7q/wR7q/7OrRs7ZQ7Pqf3ZgKFgl969atv0y/o8rmab
6ZaR7dPg1DentsF+VliOQZ65O7fMiB0cPHxC7N90wdicO3CZx5CNVW4TecwF
67aJg4EfEdaaCXBneD9Yh7m2wnP6mz039n1+P7ZsynuFDLtA3bLiiPAODQvv
0YFB9kAGYQ1Zpe5rH657u5fKe7B96P5Pwwah81yl7y+uma8Ghgo3CRy1WXhO
y+gai9Q4673Ys3TPhuvYfav+g0P3nvqfXvi37qX+12nMK2rmvO3b8LtG/cjc
sjQy9dtV1/fUsd3U/3L1P0yfF1H9kppx4Ok6z6U1c+1wkjmk6nd+R7VfW3f7
Uuw7NfM/Hmh5LveBI6r9ALXtp7+RXGvVnPyHYnNlnlCfUyJzNeCxjVC5po45
nj0DPKNmW8ZXsfWpU+AARuaawM/bJfE5PovNpQIDAku5XZ+fU/1XjX9f6t/k
eN3vEYlx6klgktj46p7P4mGNgvN2EM9k1Ty/QxJzRB7TeF80jOXAjT8EPEL1
cwvzTtCzsGV/GHSuKfp+96Z9dxL45DrX0/TT37SqddjtKtZT4Xj/qPH76e8p
tW/UMhcPXBt8bLe69Va+26tuPRfeb6X0OOjEH9TMG+Mcn+tc99ftp3RIbl7Y
+WApDevLcJXRfeAUtwLW8kzAAS6KrOcyzuG5uWy7p9aP4As3gw4F9zVWvWth
jjf+TUlu/5oLVN+jaT+bVOWeTduvs6b1feaPvr5pyzbHJ9V+UWbfKLjQb1Xt
GzWS96i0HXsq+hT6rtoaKqOm/ag21z0b2bQdvNn0XN5sc7/NWh5jg9i28hf1
/csq9+WdVPs8yDO5bdOXh/O/0eZxN9X961UzX+XQ3By63TTno3PjBuAH71SN
S+xdsR4KVzrX92s3rEviK/aZxni3arwA/QC7Mbbk8wvzqQv2LrV90Gad6ujU
518ks811hOoHwAms2pcKPWrHprmK/8HdaZn//6Dahrf8/WDsMw1zA+H0b9fy
2PhDvV+1bRe9C1sv938Qdpy6r2svdKeWv99S7bsU9g3bGc5daV7ANJULF/YP
u4bfS+eaob+XG76+L8I1guF8pfq16rO0jllU59sDf6XCPmY/6ftL1D4cm6fa
j0n9uy0KJqbvh9V8/ERwM9W/pa7+36u8MbOP2+dt1uvi0r5qLZVvxO5zLjJq
Zl895glWwxg3ZF6D4fa8w7F184uwhW2v69tMbf9orBNS/7Z7a5zFc+uFr6fm
EMAlgHNwUmp/u+s15vmlMQewhx65ZXPk5yVUP13191NzFDjumtIYI/5r+Mvd
UDN3ERkDzhC2yOdV/yB2fa2mbZqMj+/Zly3Lxftpbms3vSd/go2s5b1rc7gK
iWXNL+CG1V1H5ly/aXny7Yb5UvCmHkrNp2KPflj171qWs/CLYu9HBkCeeTQ3
3r6ayhVyr+dPqP8PLfOdbwucK/o/ovZvWuZT4UcFv7B7xdzDwU1z5+DQ4RsF
Fw5+M3wk6s/o2J9b5j6Pjb0WsybDV76oMKfxKfXpr/rz1f/jStHnWbUPjGwj
hDM2ROdaUcd9g+285vd2Pv2GWzWNU8J5f1zHTuU+58bm4RGB+W+jPuuq/AW5
SeO9rPb++vwnpKY2+9yA675SNTYKbxcfj6LNGC/tfZHlIq/7rPmzW+YUL6nf
Z0TduC2Y7WT1e1X1dVX+C28KOV3X/l/LfOFl1f/8yFjuFhX7ttB/MGtd0/ve
tw3vF8wBH5OP2rx2sC58omufoXq72nZqev9CGN0ZOzGXE+waXPvqKquxfX/w
AXq1zesy6+kroT4v+q7mMF31kvc88r3lnbkh8rq3T8XrDesOfJJPQp31Zc2G
+8zPutP0e1xgn9G5P6waa4JnRB2u0YfhWvDtZP08QOdYrjSXFl2Fd2f7xLIG
ssfe4FlwGkrj6+DkvNv47sDH5v6CQ1Pn/oPD90HWhwtTt38Wv/UUta+KzJ/Z
hkC9X8WYO2PyW+6u8y5ZMycePRx9HM4Y9gfGhHcOt61nzZyzW5r2UVulZawe
OxPP2zOx+8Apfblmm0vEvqjPK9bMZX+95jpzg3sLx4/3BH4v/oPoRbuFdni5
Z8RuvwQ9uGbskf7gkLyP8H/BKrGnba17/kLN18J8fgl2NPhDb6hcI5z3xZrn
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
OpyMsaU5mJ+o3CD0B0OGB8AeuXdsGym20v/J5t+HceATocOgvywX6qzzyHnI
e2BNxO6AJ4aeDleMOtwzsJB3auaroYsj7yLrgsO8F+aMfo8PNvo+c6IdHH5E
uBZ4DOAsfA9eAI8QDuH+uef2fJgP+i56L/jQeuFcYABwQOF77pP7PqMjwaUE
K0JX718xpoJejU7Nfs2+Dmfg5dw+NNji0WmwZ6Ob4Ge0X91YKnaKLDyr3+bG
VE5Mva6wZmEfAUcBa+Y7eItgi+CK9MGOwvrzYGiH0/gq8q3KFeEIRMZ/wX47
uC1129Z/zC2rnqxzFaEPugH8DHga4JnzNi3/Ipd+nRv7ATclrhh9/lX/J3Pj
BOBgcKPQB9AFwIrA48DQsf//HN4v+NxwBol/Bc+FuB9wXdiv2Lf4Dps/9wpu
xmWBM8DagpyF7zFrwfBwLpR+/MIY5+LYOhM+8+hN6Chfhfkgg8O/4ZqJj4Pt
oy22/xg8nEZsnQy/et5D9K2Pata5iJVCPDhwRTipcDzXC5jNG+EZwK7TYd+J
vW7yfmPnRT7o4BQEPhc+M/DPL2mZs71fbD4C6yxr7EeZZUo4YMiJyJ34CLCm
/lXzOg1vDp8KuO5XBVmOdYa9gj0Dux5+HtTZO5AB/wvnRfZBHsXWiy3635pt
06xPc8K6hI2XPsgtrG3sbdh5WX+59+OCffvvms+NzILsAvcd+29buBZkJXx9
uX7WTuTUfkGWqYfx6YOMhXx2emhH3oHLzv25tLRfE/j9tblldmR3OOXY9HhH
2NPZo7iH8DvgieDbgxzFXODgL5xbpsMegAyMToCegF4A7wP+B1xM1gveEXAG
7ie2UnQf7gOyNfs7vuv4XWGbvjHIA8cGGyY4EbIHegz6DH7ZcDHgZ+wY6sSs
AWNCR5k/zAHZHx0ADgD6EHoR5+AZwFcEfYGYQ/CS4SLfFerEdWFM+m8R9osZ
/1vza97beO8OC3V8W8CVp9eMLcM74LzIQ+hp6EPoQej6Zd1yC5hWj3BdyDLY
kpGpHmnZpordFvszcViwQXOv4AewJ44L9w27/E2BN4JeiQ5XhOvld4RHcmSo
Y6/9pGKdslO4Luzv+BcxP/iSS4TfnXgx3GP4ANxzbP/oj8wT2Qt797u5f3P0
ROxHB9Xte8WaSZ219MrI9ldsr2CT4J6s+/gxEx8AmaFHaEeG/qpuPQdME/ka
XQU9BSwTzhYy7lWhHUyY/QUsGM42uhHHojv1ali3IXYZ+yN8evbKT3LvM8RC
Ia4PfdB94OpvUze+Ct8dzPqvluNo0Y6/ANg29gzWJZ6HoaH/MZGvRa9Uh30I
7BQMBA7pMnXb6NlP2Y83DzI614E95/DIWLxO17E/0wesHZm8I/ZHxbouOu+Q
3Lgi8T5Y2rAjEbMPWzy6NT6Q+D8CwK5Yd6wM+sO/AZvFzoRcdlHT8Ul61x2j
j5JzgaNyDPMBw6Std5gD84FfRQwB7gfXjuxEjBT8RNBPsYWyprMnwv1mXT8v
s413o7DOP59b1pk/sw1114pt2th1iZeFXYPYntQHxuaWj1Sfo1LHxtykZlst
ftLYMrF/IDcxJnLLSbnt2/V2203ojw2FGKFDarbPwm1nTGzdn4dx8P3+tM19
uqr8te7rAhNGPgE7Rj4EY3u2ZhkL3W2DuvU1bAXYEtCbwNWIZ4F+NV9oB6/G
V2ajuv1l0K06/G3ok7gdX+Ne4VzY0B+NjT+917K9Dvs67cjqxOMAd0LXR+cH
N3hS/TeuOz4Vcahov6rpeAO0n9Fmex7vAdg18wQHxN8Z3sSGkX2MVq2be4NO
1LfumC/Ee/kn955JrE7WPfQN1kB4qPBRP0itf9COnsFeBkeN/ZS4Y/T5r837
LO3scci0cH/Bi/HvO6luOZ998+RQxxcMv+C+mf3K2IvgadOXPj2CjnVW3frR
BpmvA99HxkF/wJ8NZYV98rLSvlKMiZ8Y9pldw3uNDRBbIDLH7nXHwRsc3nds
MPjAYJPBrwYbwWtV+5bgV3Jr7PV1VJCXwKbhkZyYmS+Cj85JpeMC7qDn80X1
26HuuGHYzpHB+8fmrTAHnmf8SZDTiXnI3kR/9qkv9fllsOB2xykcEdYW/F6Q
r//BFp2bo/Jpbu4QvyUxMNfO7EeMP/HRNeur6KrguP3rXpvvja0vvq95ZS3H
0yHuFxy3NeqOc/FgbN7R/bH9ZliHkdXhIdF+AHtSZux0E937u2PH5LkrNr+v
I05Q0Bk74gqFOnExiCV0T2xdnJgkfN839OnSCrGMWh4HviAxSdBJsYuAfUyO
bL/Hdo8vPPzt6dybwGNn34cTjx7Wis3hhsudxOZoYne4ONhhjqxbV+XZPjE8
87PD8wefGd9XfGDxQ4cjzrlYr9FN4JdjfwG/hPMNJvlC4JDDJcffh3gR4Evo
+kfVrftzLPYbZHU45PSZ2bQ8f0LoTxt1ZHtkKnAW5NJ54B+DpSaOPQR+Q2wO
8AJwg881zlGlyymlecnwkxm/R2R7T4c+VThmXqpnrFfmPgcV9v1dNvI185l2
OM7oEb1COzx6YhDDjcZ21DWyDYp7tkLk95prAV/jvsP/haOMnMj4jHNdxTIj
7ehWxAtGD94jDj6+ke83vyd1ftM5rAH626jimCfEVF2WesMx04gTSqy4m+qO
11JPHJPkm9ixUm4O/YmbRJ9HdS/3LPz7w0+ZpzA22q7yBfzX6o7DBp4BbohN
j3WVWBLYWWZH7kOMto1Kx1KamhpbvT3IHveAienvjrqP+zYce636r6759Wt3
3Gn8HfiMjwP3Fv1qsD4PiOwLTwmOP5k1sOrP1PFLJW4O8j/+osj4+Ibjm0s7
2FYHLzsylkrbev9fO7xt9Ii65r1m5HglK2T/FycA321iGsB376PPfdFLdE/W
Kt2+Kpiu5nlVxfGXZ9QdBwFf78MLxyGgD76ay1UcO29ow3MAmwWPB5dnH8Ef
gpgSp1Uc95L6AS3ff3Al/F7gysOZpx0fCmJVc1zfxM/R203z4ruFdubKnOEV
g3MvHxmH69fw8R3nijwHsOV3Mvub43e+QeJ4mOsn7tM3zJPYkcRzYJ2lXPd/
9dAOLs2zRAziUuWqpZ/VgnWy4RjExDY6t2k9qX/THHC44PsEPfSaunXSj2Jj
a/CbWoU5Tb31zNyVGo8Hg30rMv9zpj7PLBzn+jJ9/3lsfmrP1Hb4G+vmiGKn
gguL3gGe28GRz61HwFkHP/kyth5ATAMwVvQ1cNwZkTmu6DLoFDfUrYN8GFvf
JZYC8SqIOUCc7VULx+YiRhf++fjpE98EX77fKUvfb2IXEMt648BTwo4A9/yj
urnna+ETpO+/Ltz37dA/ajh+5eeqr5b5eeO5O6xwHO5L4fTq93u/7piZqxWO
Cbqy7mGR+HklFkGfwtwQ4skhIxOTDrmdeRKrG974hk3LZcQKJZZAn8h+LBHr
hcrbUsdCns3vquu6W+0P6vNH+PXExpmIlfKq2h9S+2KF4yzeVzd/8bPIsRC3
Vf2U0nGCn4PPU7h9F41zNe8dcWHaHRvnkbrfvdfqHvMc1Zv6/m72r4ZjKN5T
N592NezXrLmFY7cTS+QK9X+9cOyh7iqPLB1zfbLKxVVeWXHcGGyJcOKxl8Gj
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
38mh/29B/yDvdf/U+Dw4/Xal8wFx7GZqf6NhnJwcKPiXEhsMbgz8Fngu5HV9
s+EYgP1Sz21AOG5aw/Mg3u4boY5dEfsi7yGxY98M8tsOmf1syMvc8X3o0zd1
fIAfm475yHfgcRw3PRwLFw1OGnmozy2df2Ym71bTMS0fV1lrOm9If/xcY8cc
I44a+Wi5bxumzj8Of5y8qOTN4f36KjHXLtUcXmg5/wu+1nAOyUs1Xv0jHTcw
NbY4J7Fs+EjDz+UklS8GmXyJoJMgj6OfoKegX6yVuh+5AtdOfSzXiz7xfNAp
kDufC9ebNx3j9Nmm5UAwPzBFZLzTeB1Lc5bgJcJPjDPbneEPklMAOfAgzb+Z
+boamXMM4I/N2hVl5rbVM+eV2VBjPtA0Nw/OHrFNkb2ZD7/tVqVzEm3JXt2y
f+A6sXNRklOZfMr04V0Ygkzacoy8v1WumzpWCTFLkK878i0mvrdwyy8K9/nx
8HmjoOsh9/D7PxvuyTEqX2k41ipYGvNBhwR3AH/YMuwnrzbcF9mTXEodfQvL
JMgmg1I/ZxujS6Yec6uW9wyeR+pzU/M84Xsi08FFnNr0mgRHcdeW93R4VeAN
5F7Cjx/OKvHx4X6SE3b12Fwc4vDBBYQTSG5TcifxrKDjHpP4/Sf+zRPBTw1/
Nd4X4rv8rj7dWo6dRP5oeMgXN6zbsRcvyXNdOl5oqeN+KJ0fnZh9xOMkLye+
ecTHIj8mmBLYErIDdu+2xPl8iauC3yU51OHtkgN3csu2buIVL9xyHL0+sTEq
7EVvJt7PP1O9hV01c7yW4ZrDMrHjXxDjambD+dbRF8iHSywV4m4SExt7CnYb
5EjkSWwU5GjDnwK/igVbjkv4U8uyErm1eqo+T8vcdvKnkxcYn6qvOWfLMTnI
Zfx4yzZbYo+/o35JkLfJvftU1TFEHwi+Wvhskd+duDHkgSZ3JzYOckgSC4lY
Sx2xk1rOj8MzSz5a/C3r2J5ajim5Sey8cfiLkI+RHI5gM+QvJb4SMb2Jq3RV
yz535IDrFjtGHnHx4QYTF+2llrm4ndq8vg1rOfblZrF1EWKAkV8XvQp+Pjz9
3VvOq7tN7Ly8xAuLVF+gaZmZfI5wdOHcktd3r5ZjYg5Tn2cS56V+NnEuVbAu
4q4TW4fYPcT3AnfEBxrOLbxMfC+JmUruTLBectGS9xB/MGK3wGuFH3u42o9o
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
ebvw8SfHMnmzwL3Ik3VG5rgC7ClwGx8FP0icXwxOVAP5KzZniPhe2MWwj80u
7ePDevxP6Xxa+OaSI4xc8PjRLp045zG6IPmRJ6r+g+pl7hzT3IdO+LW3HCsW
Wy18BORY5NlPWs6xxT71SGYeMvmXn8x8Pydnzt38a5v1W3JPk1f6l9j2po44
xpltEdiR4AoRDxlO24Kp887gm41NhFj3xD/Fl2/TsLd2cIE0v02xwav8O3UM
W2LZksObXN7YQ8lfQEyNa3XsU4X5WNiRf0VnbnrNf7FlOylxh5FVsMXt1W47
C/Y/bJHk0SaeAHmzsYVuUTMmjO2ZfYGYGZcWjr2P3E4OEWIHgM2So4TYEMSS
gjPFfUavPqx0buubMsexJ+bI1bG5MnBmsFmT02Rozc8J++OUiuOtkvuDWGxD
C8vTyNXg5DyLPJPgz/B6iLnGmk+8a/BEYtUS05vYQ8R8Hp3ZDo49vC3IBuhD
8P7xs8Am+6r6dAXPKxx7BD76RonjIBAP4fjcPrNwgttS+8riM4vO0lnfXatj
9yuMA+xfse8mPr8d/sKJY38RC4w+z2X2JSC3MjITay9rMLEYiMnAb41fLXr7
G4nxVnBX7B09M+uq85TOm4iv2xWFcyLii/ZV7rwD4LNwpU7P/E411J5mxouI
0wDvYEJ4l8El8E3AR+HhzHwQuCTEmOoT7gN+cPi/ofsQ62w51Q8pzNuD/won
4cnSubfHBd+TWQEbJ08fsWt2ULly5vWWdXfe8O6zBjyVOW4ZOb6J2UEsi9G5
7fzoI1M1zoeFuSMfF/Z/+THYHcZmfrbhAuAvg08L/Dr8EMFF8Lv5NrON/GGw
5cy+BcRa4PfmdyfvPLG24KHBR/s4nAtO6RWZ412MYn/IvK5uUzpvIv6v36lc
MTNnclphPz78U/CnuT9zjEZyspOXEX/cb3LH0SCexpmq/z/eN2N5
           "]], Polygon3DBox[CompressedData["
1:eJxFnQnYVdP7/vc55z3jPmfvN5VQGkxFhpIGyRBRSGkylCGihETmeS5jSCVD
EhlCkykZUlGRBiXDNyJKSKIiQ+h/f7r37/pf17uvd629hr32Pnuv9Tz3cz/P
anT24O4XpYMg+DEfBFX6P7AQBI1SQdAzEwS9i0FwYRQEjbNBsL/ONS4HwQXK
76H8vsrXqgTBR9RRw7XKf6O2N6q8lzpsp/46VAfBOTrXUGXd1d9Jqnuozi9T
+846d7fSQ9XHb0qfp3r7qP5J+r+L8sepfmfVvyAOgiOVPkbpJipvTx/Kn6lr
bs1p3Go/UOnP1abCeMIguEb3UVN9N1P9CaUgmK/rzVXdDip7Q+cPVvuWym9S
2dM63s+6zkEq26j8QSrrpD5+LfkcZT117jalt+n+Wih9rMpDPY+fdM3zdf0V
un6kdHvVWar6Y3VuuNKDVL+J8rvqmXRS+c86Bqnse9Vfr3QH3U97jecj5bvo
3jsq31H563WNBhrv8TpXK+U6R6usrY4xyn+g/P1KF/V8DlXdazWevNIDdL1d
db0NqvOGxjdSY/hBZa+q/j2q/4Gu+aPSd+ncfTw71d9N9Ucof5bST+t6Hyh9
m+pcrvqPq88rlW+mZ3GYnmdB+Xa63k/qf4L6n6c+VqlutfKx8q1Ub2f195/y
36qvc9TnLkn+VZXX0bnpqh/r2Fv936vjLaXf1fP5VWXX68go/YPOjVbZQzo2
KV1f5wYqParossv1DOvq3soazxH8NvweSrdU+6UqP0DHIaq7mfdQ1+6gMRyv
sTVT+SKV7aPjYJUv0vg3Kt1CdZpqfOdpvPVV927111/pi3TsrfwTyi9R+ck6
Zqr+cLXdX8/jZfW5UuVf6pimdG/1X1d9dVadE1XnevV/vNJdlN5b9cer/BjV
PVrHCar/Z97Puqvub4LKXtPxscru0z3tpd//Yl1/X+Wf1PWX6tqnJP2foDbd
1efxRX8rq3TuVJV1K7rsW+X7KD9f1/9G+U+Uv0rpF3n/1dcq9Tld17+j4rqR
zjfV+CI9w/a69j8697Kut7v6mKv2DXQcqL7nqv7XSs9X+SVKv0975XdUfifV
j/le1f52XaOi9HsqX6nyuSofovSjus6vKpulc/epvxqqc4zqP6xze6l955Kf
zfF6Hk/p2qnY3+o7ah8ofaPKH1D52fr9P2Tu0XGF+vpPx2Ok1aagts1U/0td
6y31mVf+cp0v6v7O1/8tKjtD9c9S/T80pqvUV6w6Ryu9QOf6Kn+Eyo9Seo6O
Lsrfqmuu0ziq9JucqP/N+J41lt8qfhcfV/5Ipa/kOko31zW+0vW/Vn6e0ueq
ziL1dbt+z97q6wzuU+NZo/JWKr9G5Z+ovErlI5Veptudov520T330PVaqs9e
vKuq86rKr1f52QX/bvx+X6p8gNIfq/xKlQ/U+AcoHevcGpXXY45VOq3xd1Z/
z6v9nTxf5hjlZyh/q8pr8z2p7s9Kn6nxZTSeEepvicqf0/WX8YyV76/++/N9
6dxlym9Tm01K/0/n7lO+p8ZzpdJv6vnnlL6M30X9HaT73inrb/Zinfta+ZpK
X5nyfMCczty+RG16c28695jyFyr/DfOdxvOo8hcov4+ut7rouZb8K+rvG53r
rfyRGm9v3dvyop/ta7pmQ+Zy5Vur7DSd+0Dpr3U8rPR5av+52j+i8TbQWBby
rKo93+7Hu682e6t8A+uh0sep/GSVz1L9ktpeoXxJ+T66n1N1rYG6j2pdP6f6
D7Gwqu1KPdtWrGPKdte595S+SnW+SXmuqFL7Nvp/gMpPUvlcpefpOEXpVhrD
YUq/rfq7qPxr1qBq308flU/RGDbkfA/cC2M4TWPpG3s+ZV7Nq/4OGs8k1T9a
fVyjsdeNPd8z79dS+a16fifqWj3Ub0b5b/N+lzbrGJM8r+fV30fq/3n1/33F
7zbveL7iZ8qznaL8+0qfzvgzXvNYkyfpOj3Utp/6mKz0mSrvrfJndK4Wc5P6
rEu5zp2jsgGJPNJL+dOUz2q8B+s+6+jcLhr/uZHr0+4IjXed+riE+V/936+2
F/P7K7+/8vvlvd6/rfv9QG2eVfoXjfmiRH4Zp/4261wr9T887fnlV7W5Wu3b
Kv8Q74eONwKfG4wsUnb/lyi9r65fR+OZqv46qs5W/VaHq/2HutYcnbtX6V7q
v6vyW9RfHbVZr+MFle2r+geo78/47tRfI9VpV/IaytrJGtpG+c/z/vZ2Uvsb
CpabkJ8a61iqso90DOZ9V/lqfnONoVfO94z8crf6eFZ9PafjHqX/0f3frvqv
qHyc6mbV5nSVDVH76cxlOnea2vdU/6lkfbmE9y/l9aet7r99ys/mV/02E3mG
Kf9WOT2PLfo/g3tXmxtVZ6Kez0T1P1zXzlZbHkJ+vCCR1zYqP0T5f9XHr0ov
VptxGktNHdcqvabiuf9k9TdIY9tB+T9Zi9S+ntr/oOs9U7X9cwuqWet1PKq2
m5iDGWMyf76mY1PR8wdzSx+N6UyN6SK+ST3fF9T+O2RRjXea6h6n/L26t4NU
vofK91B+V5XfrfxLGa9pj2gM1yg/XPmaajNB6Sn8Zur7Mx2TlD5A5+qq/GLW
Bz3XjzX+f5VvrTGcrPQSfpOs18S2oeeLvZDXVP97nZuta24M3EczlT2hI9S1
uqUtr52g8W5j/VKdU9V+J9X/Sekaqt9U5SvURy1kRf3/RNf6WPV/0PWaqu6n
secfZKPO6uPHnL9/ZKNK2usJ799+ylelPf+/pDFPQP5Tn6cw/+etK2T5/tR/
86Jlhxt1bo36G6g6DyndROPaS42uY95R3Ukawy5q+67yLdTXnsjoarur+tjC
+kqfSu+n8r8DP5PWKv9ebdqo7HXV2U3pn3Q/tXWdVaq7p/r/SecOUXlDXaOx
0rXKlqeRq3+MPWcydy7Q0V3l/1M7/QUlnV+hxGfqbxP6gdI91N9zumYjXesk
9bEr34Ke20tpr+0NVP6g+lir9kW1/0xtJur8bqp/hercqvTZ6q+O+vtL7edo
LA+p/gaWB9X/VPUnISPp3k5R+R8q7xf7ffhIZb3U/zPqo57668GcwG9V9G+7
v859lnN//LY53i21+Z/+11T/tVRnX9X9Qtf/Tf31UL2e6m93/X9c5ftofHcV
LJ/trLq3qv+6yo/Ouy0yOrI65yirk/H7vlTj/VvpQ3XuII13S8n6wsvq7w+l
H0bGUvkUvn/kobxlI2SkXbk264zGPlPlt1OmY53G95DGfQtrqq53tuq/rfo/
Kj1W9dN8jzwflS8v+V5f1DFG+YLqrFZfaV1zN+QP5a9R25k6flL6E403p/bH
KP+o0qfG/j74Tr5W+mg9n81VXu/76X6+QUbWtXbmW0C+V52dkjTr/8G6ZgY9
VGO+A5lA7SOla6vNjmo/Xu9HSuX76/9JzE+6zlu69pMaX17pk1S/ovoLVP9d
9EO1OUrlrdTXCl2rhY571L4F76bSp6h+rPpXaXyvqO4GHUer/gp+W5WP0/+8
xt9F/W1Vm8bKRxnrXOheDZTfpvpPKH8b84fG9bP6e0/3013je0Btshk/M57d
Il3vO5W/o/ITVV5XY3xaZQeo3mex9cuy6jfRNV9Qf98of6CuHarOp8ovUf0t
Gcu4+2msR6q/Daq7v8bfS9deq/qtVfaRzjVS+ljVX6u2EfOsrrdJ9Rvq/r9H
rqr2d833vVljel/pY3if1fYo3h/130H5jcr/ofxG9d+o6HfhWR1Dlf5M/RdV
3lnXeFzpiDUU2UXlI3T9M3RPX6ssx3eu632qOgXkJdU5Uv3vof7fRl9gXlfd
7/R/V42nro7VStdTH8N17Z3TXu++0DFJ6WFqXx/9XnVaaux761zIt6L+Wik/
Tm0Wq/9QdV7M+DfYHZkQ+RJdjHlF17tD5yYhG6Vczu/1XeBzlJ2g+lOUvhO5
tdoYAVhBSvUnqm435jFd+wRds7vST+h4D3xEx3jmC12/F1gEmAe6ltovyHhO
Zm4exDuELK3jkJLfYd5l3qmGrKV6Xs8xF+h8Y11/if4/obLddNyu9F2qMy3j
OZLnzfzys9Iv6NywoteDO3m31f+D6v8WnRunssZ65s8r/Yr6n5zxnHZaxd9T
H11vvM7djszBM1T+NfX7vZ7XTNZU9EPV34Lupj6PV9/H6uiCLKT2x6v+0Iz1
lVrKv5LxO70nz1DHBSmv8az1H/KNKj1S/T2o9B46NzDle+LeFujcT0o/qPIH
lH5b/Z2v8jPRWXW9kayhKl+q5/EPWADvSMaY1BFFYzRgNZemfP3FFcveDVT/
uIqfK88XnYTf8329P1+r71fV93e63yf1/znVnadzTyFLIPOpbqTnNx7dreh7
ba86LfnewHVU99C05dmJBet6tLmauVn5MVxf7Z9F9lf+xJRlnGuT7/26KmNc
h6uvETyjjHUs1lN0LnSvV3VcqfSbFeMJ4AqrYr+nvK+8w8zPD6iPqao7JWv5
4WmV76j+l6v8HvrimSIfMz8rvYLvRWPvqDpvqu4QPY9myPbIEOgjkbGO15G7
9T4eA6an/GMqP1rpUSVjO2+x5pT8DvIu9kt5vRyjczOZ/3Q8zPsCRqb0hRpL
Z/VXT9c4RNcfo3HUV/5zdCKwqER+QP8co/z0tPX7q9S+tdpPZo5Q2x30vtbU
td4Bp9PzeEp1qnUvp6b9/JFH6Kus4wulfweDQvZX2Veqf2/Bc8cEnVvGWqf+
D1b/U3XuMeQ/XeMplS1V2a4aX0rtPkkbs+ukc5fq+D5jHawv72bFsuvp6GcV
41zgXXyj4HPIbchvyMBPacyzVOcTpafq3OH8NhXja+BsqzW+hYwZfUfHM8hi
vAPqu7Pyd+atB6APoLMs1bVmq/2nav+a+rsokSd5F6ar/DeVN1a/o1S2m+qM
V9mfut+99Gx+RlfS9X5BJlXd1Wrzps5dr/L2WWOAR+jZPaZzs9HH1Ka9ns9Y
5edkfW7fvN+HN7Oek/dS/g2N4V1dawv3n9Tnt3uXOVvpB3W9ZegLKeONgY7l
ur+CyjtqrDPUfjbzscpP1/WbqM/XVfYD+ozS12p8bZV/SU2/Vfm+usZbGv/0
wPLPl7pGlPM7xbuFvgzWm07799qs9o1U/oPK2un3rah9P+VPRkYvGE+bo/qd
0sYbQ5X3VfniwPj7zjq3Xte7TvVXgwOpzVeBdcC+KotV/zzkdtbk0PrPUHQR
talTslyAfPBoYPn7KpXfCXYGZqq+liX6xUT0W91f67zllQN1DEXfj60foSf1
S+R1sM7mKn+Ad1blF+j6FaVfVrqh6v2lazfXNdrpWmWN6WyVn5CyPt2zaPwC
mwO2h/v1/E9Tfi/lZ5Q9DzAfgIGC19YHg61yn/SN/jgIPE35HZR/Q8c3WdsD
/tJ1TtEYVqqsls631XhrojOiyyXnzuFQ/dvS1l+GRZ6fmKeOQd7WeG/LeY6+
UHVHq/xG1d9Z/XfT+C7RuRuU3zHwfFavZCzrb+Qj9Ed+Q5UPUH6xyleV/axG
qP8d1P/hRb+LW9GHVPcU5XtkjKGApeys6w/R9R9Rfh/W5rxlpbWqv6PqD9fz
6sPap/KafM86tyZrfAcsc0fmbdW9Qdd8R+k2ectSG1RnGHhryd/eSepzW85r
DGvNr2nL9yPR39FF1d888GU9zytU7wGV36dnMUTtb1b7m9PWb+8qeb79UfXv
BDvU8SN4k46x6m833c+tav+s6jfiXSga222SMua7m46fq/yO76K2NQr+fQ9W
/lXV/Rp9GTxE412pdHP18QK6mOp0Yz5VmztZL5S/WumjNN7nwauV7182pgS2
9FPa+s3SkuX9eYH1ga8iv/vX562/Xavyu8H+0c/Ba5Cf0l6ThvF81X8Xtb9P
6Rqqf2Bo3Qad/WK1nVvys+6Yssx+tZ7n0brfU1U+OHQ58vzcwL/HF2rbRvfa
WsdL4FVFfztZ3nHm/4rtadjVUOLP0fWbJmtJrHwL9TlJffwSWL96pehn1xeM
TtfaGx0D3VF1rstbv/wLrIr5Cl1c7Qer7CbVqaX0Ij2zXZS+Wf2X1f8r6uMr
8A7wA7W/RePpmjEGCxb7sY5Gqn8bWLfqj9T4Lg5s6wCfnKh8Gry6aPnnetWf
pvxN6ner8iMqxtPA1d5hLin7e2+g8kPU/rWS5Sfwuj81zssrxv67Kn+uxjsV
mVjl9QLjN7cgoyhdD30e3VR91k3SFfXXSPmLsH+Aien+32V+Rf5QmwM1hqP4
hrNeA1gLdtA1BmG/S1s+BGNG90QHrYt+oPEcBR6gcxfxbuZ9v2AiYCNnI0Nk
rMP2LNs+dpfSddK2n5V5LsgL4ANKf6ox/QqewfqidL/I9rqWJdv3mK+QVZFZ
d8WegUyE/KMxHqbrT9bxIetDyfaLlqr/hfquVv7gamNoYGlfBLZ/NioYr35P
dVIquw1MQOWDeL4qn6YjpXxaR2OVnadrNswYAz9D93O5zt3KWqHyK5TuousF
Su+p9KHgLZG/H76jTso3V/5N5nPda2vlm6n/T5Xfk3dO6YrafVLld5Z3910d
F6q/acp/pT4+1NE/8LkBjFf9nZI1pr63xtaq7PaRytpU246DPQf7Q++SbSrP
q/3HVdbvPkFeVtklWc/3V4EnZP1M1+qZ9i3YlgMmCTZ5s8o/4N1R+a1KF/nm
qjwH91P6kchl1CloPD3V/gpkPfosGX/i90CnRbcFH2Nt5pn8qf4f1rn3lX9H
+X/45pF5spZZTs/7HeVd/TzRcQ8peG4ZkfU31bVk3Yl3aF7J4x3NvanOOWp7
rvIDlL9M91ZP78odyNfKt1b+N6UbRcaDwYVbIo+qzZisZdIzGGvkPOePV/kp
atNT+U/V/xHoK2DwWb9DvEtnhpb3kPtaVFtfA5uqrfpxwc+7ceA5nLl8Pr9H
4HduL9ZuHVdktz+G7fNje2wSSmfQ0UvmJ3RP5Inn9ds/pfGNV1lv5mNde3PO
WCuY6x6qP0jHpVnbSLC/DFabe5S/XunjEvtE25Rt2ti2sS82U/unwX/Qf0uu
f6+Ojep7V13jauYl1TlfbV8ueq5gzIx9sI5rmD91/TfAijX/XKX6I1RnT6Uf
x16m8jN4R5S+CvxO6R11rgWyho77la7SsY/SB6rN3Xzrar8e211o7gPnHi2Y
44GtpIbqH6j6t+v5dEuez6Nlj5mxf6j2PTXePpHfX97jw3X/d1Vsy0EeebFs
+3PPJP8YskxsPGgPXXeD0mMj/9787vPRd5Q/H92Q703p/TSGPPKz2vyta4/X
ucf5dnWP4yLPlx/o+pOrvEY0Vf2sypep/X8FY/xg/Rcz56nsl5zXLtqAN7co
WtfYnTmftVp9jmM+UP4HsPvQ73t/1e1Y7XmJ+ekj9f+36j+u68+vssyC7HJB
yXPBGypfW7BMiWy5UOV53h3mHJXfzjdUss0Z2/P7qt9FfQ3kHcuab7JK7Wfq
OEv5dugMGutbRa+1yJDIkk31zK4DF9a5fZTeDxt6zhjLvRXbK/8X+J3l3d03
NvdkDPh9ZIwIrGhhYH1tAvOt8gOVX1exPQPZFZkN2Q28FHwUvKthwbwH+A9w
FuAuLCpZF9xHbX5U2WHMP8zXaev3/8B34P1T+SC9DzNU5wjmWzB/pf/lN1f5
NuX/CM2fOVvpRSnzYwDvZ2NLD2xv6xeae7C/zm+LzQGBC9IRPEXp/9RmVpXn
xLZMAgXbayeCXyr9ZcXY+mnqo2nF+sssVbu/ypjrJDCiKmNQ4F/ZvLk82Bj6
gu2XrJ/yTvFuNS947HAK+N7h+/Aufab6ncBbSpZt66LjlXw/2A67q3ybyq9R
+z2z5mAdprK/8x4LNkVsi/tEft94716LbWPG1jw2ZXtJUXWWKH8Pt6r0Tzr2
0LhaoX+oTV3V6Z+2jQFbw1z9BtVpXyvU+71W/xvkPGfxPoIJgQ39m7Y9ZL/I
7zLvdN/Q+BNYNJgG2AZ43qrANhFsI9g4sXXCCfg0uf7f4CkqX8n3qv7eV7qt
2kToUrqnrUqvL1nff1HPo47K79c7dj34n84vUL4X+KD6u0fjn63rf6B6/8Xm
kcEnA3MDe2sWGXsGo3lddeerzWClv8TmrPJ1YGIqfyJl+2xJ/S+r8pr6h8rO
0T2+DzacyM+rcv7tjlOdWUXbv8CqTlB+Nt8K+knamBbYVn0dl6ZtU8K2hIyG
rIYNG77TL/Cn1Ofe6uNnXes1nWtbZZ0T/WVrwXMNnBW4K6eozisqa6fz/8Se
E5kbn0pZ35iKzSHr9/sz9HPmQ9VZE9i+cpuewRvoZkr/G1uHR5c/Muvv5Uhs
NsgO6GusRypfobYnZy3//J637ADGCtY6JTR/Ax5Hcz2f88BTM8ZIry54PUM3
Qd4EK4UvAH8vQB4omt+EvL8yZT5g68i6OTpcfX2PDfLmroFBYm84WOU7KX90
/v/r5yuT+uh+b4Wer7C9/qb7e11tDle5bjv4RucOAU+tMmeuQcU6MbrxzSmv
r2AeYB9/Bca//lWbmSljzn3ylrfhqjXV/R+humUdy1X/tcDyJ3g4+AacrvaM
rWDZ8zMd6QSfxRYGhwYuDfwFbGd3Kv950fItsiUy5u5K59A5de0lOs5S+jTd
0ySl57K2KJ3XuY+VX6bjbKUPjay/o8e/ovLDlV9TZRvkVj2EPXW+udLPqP6B
BfPn+O07aHzjlL+5aFvmk2rzfdH8COz/YMhgydgwsWX2T9m+XIpsjwdLOTDB
J9pkzNGDq/enjoVpc1zgujyXt/4Dxt2iYE4PsjWcH/g/2C/ADofrGs8UbBfC
PgQnEn0JvBrbbKz6T6p+DF6v/CDmFl3/SDBW7KPq4x7mKuRJ8ImU+VTHqU2n
jDmocFFP1/tyr8rfBzth/PrfDews7W8kp/7fBFtUeieVP5b3t49NCNsQOgu6
y56B1/NtBcsecNjgsmGfg/vEGsdaB74MF2adzj2j9JTItvE71H6y0mn1/6Da
z8CmwPtUNBaEjDdU/Z2v8Y5U+QL0rmrjidhSD0M+4vvR/Y9O+F+PqOxItdkv
629ytfrbR+dGJeVN0ZnV5tgq20BnKv120d8X5yg7Rv1NzXmOPELj66j8Kznz
Y/+OjEcfqfGM1XiO1Hg+KNl291tgmzocA7gG88En8y7H3r5rYPteSs93mMre
Y55X+0Whsbtfc7Zf/1uwLQUZFln2poq5l8gbo7CNhub+LtdxFHyK0GvdHWrT
WumlofHUWgme/yJrjPraqvYvKP1y5LUB28UJKn+JcyqvofbH6FqddL+vwgtU
/X/U1/55Y+9g8PADr1OdY5P3aYTGs0PBstoQ8DWlR6jONNUdFZjfAr7CUsIc
z1xfLJiX3RwZlt8itvyAHLEG7LRsPKGD+mmPvS/vutjMsZ2/oWOPKtvQbk1+
v05VtkmuBMfSmH9S+9lq303tf1R/7VS2XO1qVhuffRj7tq45J/J6xVo/Xn2s
LZp/+bLK/lL/jxZtc8L29GZge+Jjuv8bMq7zeGi+AHzNQap7QLU5m3A3b9Ix
BKxCxzjkN/Xxotq/Htn+Mgl5s2ybI7bHbzSGYtFrGGvZYp2bwvqsa5yh8S5S
/bv0LC5D5siYswV3663I9s63lN9Utr0M2yc6Oro6fFy4BXBq4NbsUDTX80/4
DkVz8uDmPZkyf/hRtZ/FWAPbh9rqeT2W85x/aeTrY1uDswB3ARsctjgw8q0J
Xo4sis0e231N5N20ORFwI5AZkB0eSJl/CycEbkhOY61dbQ4dXDp05JNL5h8t
1Vh6p22fA99FN3wQnYo5LG+uNDbctiXL6MjqvBN839jAsIXtB36k9Jfgemmv
n/CpVoJHqe41yEMVrxmsHceq3x3hC2JXqTLnYLu8jjys8lPUx3Nqv6lgbHdv
1XmxaM4A3IFZOvezyg7Q7/d4zjZ98G70GWx74GmzVH44MknOGNjfof0M8Df4
Pe3fG36DkttlcmTzt/UbLMqa4/i3xrpT0dw7OK1fFM0BhAuITfyZkvVVdFt0
3HqR5a9NgW37p3B/kfke8D6+1Fjmwr8veD7OYitCpgBnUn4n3jXl31S+hvK3
YOtL+Jcj0cGUn6PyKSovqPyKsjkff+XtHwEXJFCfQ9PGBMASGoGZq+wP8HDd
/83Kv5oyhgv/vkr170R20jVuKBtP/SplGepmsLXIXKlFVfbnuLFs+RAdulI2
RgpWug/4svKzlP9C+QOwuantJWXjHSdhN4A7qnxt3jV0KPgyobmIcK7hXo9g
jKq/t87tCXYWGtvdqOO5sjmDcAfhVz5cMf7CetoXDEbXGKY6bynfQ/maSt8Q
G7+Zn6y37eCUqPxwtd+m9ofBn0n5G3qk4vUaeba72vyjZ74+Ni8bDtLeqvtX
wfJyl8B84yE69yz9KX+20ksi3zuY1UfYskJzy+9T+Uilz1Gd0SnLTKcovVzn
6iv/i45nld+1bO41HF+4vleG1ldPKNofoD51VLYa+wK2Nh1nqXwH5FXsZToO
T9km+E1kvAWuPxzM27CPlo1lYvPeX+kPYj83nl9d5d9X/jhkLNaDiu2/6Cun
B8bbPlJ5Wf8vUv722JyeBwu2z8H1WQPnkW+ryvbTpSqvJDpSA+W/19EmbQ5p
B97XovXt0wLjiffp3Lsp2yjwD/hQ7d/P+5mMVn6x8qW88cNbY2M8YD0fqryo
62fU3yj1Pytl+XiByqvyfkb11H4431DKGDl8qyUqD/PGl29TurH6eF3th2l8
h5TN2UFH6ZQyl+e0gp/9pYH58W/l/Z7wvvD8l5XNHTw/Y/8QOFhbwCFT5mbN
1rFG+YOUr12xDQa8FKzzNPhDcIbUvpP6nF82XouvEhy5HdTuk9j/yb/E+6N8
jbzxvjuQVct+NtwT9wZHcxY6SNbczR11zfFpywDIAstUvhi7mK4xFv6ZjgsC
P2Oe9dNlP5ty8ttXFf1uDgkS/wGdq2bdVP5ypefp6Fqw/lBX1zumbFsrNuSn
da8bVX5p0ev3DSq/XOUTU54j/lR5HR2XqO7FOnYMzSfCNooNElsk5yh7UW1a
6Tq/qP2xadusO5btA4MvDDLBmqLnTObOJnxH1caYwZov1bELc0/o8mk6/tCx
W2z7E3aos6qtM6A74PP1TILHLQhsk8U2u6/Kh+aM0WPvQw5CHrolZ/sifDV8
Ve7MGaNsGLoMmQIuFTw9+Hr8PvhTPF6w7gRmhL0be961WdvUsK3h74MD3hTl
Dwo9Zsb+T5XtYdgT4RaOSTiErIGshdiYsKftF7oMziTcSfiXbXPmCOKzNZg1
E/lfx18lY4Zgh9SBn3lXbPvB/72LyPzI/ugIcILbqv64nH0M4PM307mJ5HPm
gy9QHy/lzPH4EH23YvspdtRzqy1vv8zz1vGzjguK9mWZoGucX7Seir5KndbJ
80R2xKaLbRd7K+/PTsy16u+e2L4qHxfMt7lc460PBhZ4fWlXMdftedbEim2C
4L7gv3Cl8InDNw7u90FqP1V1HsdegH1EZTerzolZcyi2KN8+sv0YO/LmgjmW
YG58A3Avx1WMPZVUZ2PZnKbfCsZr4Tp9HNq+UzvRP/GPhFt3JjIO3L6yZQVs
GPuq7EfVb5myTjBN+eMrnluwgXZGl43tMwSf6H6l9w5t18G+0yo2Zs57yfs5
NbaMsi1v/BDZpYv6ODhlm1lXpX+J7SeBv0QP5Z9QnbFZ/4b8lk/pGJmxD8Bm
jfWkkn04zsa+oLoHqf0/ur/ndf2WsflVLdS+Sdr27GrV+Tewj0ONyJgd2N2e
OXN3/ihYz0ffP6RinQbdBnvIS7E5RFsKtifALZpRst8aHI4Fav9hZN1rqsoX
Kl3QGMspY4BfRuZFwI8Ac4F/2Bp/gcAcpjbISpGxHGyMdyn9TWyOOXjp8DjY
DgzlU5YRBlXswwNGDP+6ifL/4eOTsk3/ZHwlQssqcDazarsIeUX1l6NTqP5C
ZKa81/wxKj+XNVrP94O0x3NCxVxZfmN+6+N0TM8ZEwfv7qr8uzlzlrDPoA++
lnMd6vKNzCmYo8C3A492bXL/8N/Rz5vkrLOiu36oPiYo3VFHTeUn6Brv5awP
oR8NqDZPCr5UF5UfEdu3Bxm8fWx5/F896/FJ/uBkzqDO8Ul9yrDxX6v+HlX5
7JznVPS5n8rum3vi3vrresfzDSAjYYsqe+0HswG7qaPnczP6aPL+MsfUV/3R
ab+vfD/MLd1YX2L7M+JLgk8ivol1WM9y5uCtLNufdX3KPrT40v5dsl8a/mn4
lvZUn+1S9sHDF68Uey5lTsXfdFvJOjz+Kazv3VV/37Q5HHA58Kc7Qekr4Xhy
L5Hn+sk6jlZZh9jpF9RmqsbeB5knYw778chLzPGBMRawFvg5+Bpiw8GW83jJ
djnsc9juwHSYv/Hxq8X8ENsWhg0IWxAYOlj6iJy/V+xtcDeQIZEla+t92aj0
O4E56GA2YDfI1IeXbWPH1s73vaJsThPcJvhKT6qv80q2UcH/vz40BgsvCn4U
2OyhiY2MbypVts8WvltD1X5cbE4BNnXwZLgG+JCj46HPj0/wyhvV927KHxZZ
hsbGhD8SsjU+5PhE3ajyUap/ctEcKHyShoWJj2ve8s5old9UNI4JnvlKaPzh
krTXZOQNOARwCZgzm5Vts8Z2Db97ofIvqk1vPb9z09Yv4eDBxYNfNUD5m/Lm
sTEHwdVCv4cLhc7yWMHzJ78FPsTzme91TE55zT0MWRX7bcoyyf7KT1L+Dr5t
HdXKN4s91+MjAn/pNB07ILvo/jbATVX52Jx16kO5Vmz7M3M+cz8yFDaTt1OW
rcCUeX/AAFlP4H/h34IMCf8Ajh5cPfgwbVTesmxsEcwD7AO8Di4+12wX2+aL
7Zf2Y5XfsWhdHc413GvwlfVpY2ZgZ0OQl3L2GQT/xz8RWYNnzLPeQ/krc+Yc
DAFvK9qPGH/i3ujCse202GvPZe5EHsYOCqas9ECNp5PaLQQ/5P5i28Gwhw1l
/qrYv4g1gLWgB3NkzjJI/2S+wja+TPmTVfZGbB+zG9Tm0kSexhcX/BFfcDjo
cNFZE1gbkO8vLNhnbTL2zdgYNDLCJbF9kvBNwp45MLQ8jw8v+sllSr8e2+cc
DHRAbHl9Sd6YANjAzmX7RrYBk1TZTObUgv3fVoXW57FbYb+6ItFfsENgj7gy
Nh6Bnyn+pucl8j88Pvh8N8fGM/CLhiN1fmz8A94A/IHrebcq5trDAX47wUOw
a2MTHBhbHwXDhmNxU2yd5oyC4wmg6wxM1s9ZeT8L9EVsHOfo3EWx109sGucq
Pzi2/o6vMGswNi/W20LeHJ5bYus8pxfMH0QXQr97O9GPB4TWgc4s2EaAbgRe
uzhlHf3aijnZ7yT6Jro5+ii2GvrnOlnlv0qbv0DsjPr8vjlzVutxv6Ft3fNZ
U5XviwxYNL8b+ZI1jrVuATqn0r+ojzkqW69zOxfsk4Rv0rWsQarfLXZd3ske
yXxLnAhs9tjukSmRLUfp+T+t8dcr2laHTwe+HXw/6P5wROCKNNZxTc4ck2vV
z/DIujuczN2T9ePanPlF14WOsYH+yjn4BMi7cPnBJ++NrWPVDG3vQPeCj4du
BiYFNoVOj27PNww/pWveuCT45Fll44Pz0vZxxNcR+f4THbco/yBYdWwfMuT9
Ucqv4xvIG2MCawLfWZW3T9vIhEOyZ+g1jrUOmSoumn+NrAW/Cy4GnLZbI/vY
4GuD/t8ntDzaJrSMhawFPse6yPp4Tew54veC/QeZO5BX4b6DD9+n9Asl63Ws
+az9yONgh/N4v2Lr8+hZ220ysTn92+1WVeb6gzegU6LzXB0bn8H3apryd/Nb
xl4Ltuo6p2MPKVmW+wCZjm+p4LmAmCLwCyLWqIwxQ7BD+BFwUTlHfAZ8dp7P
O34GvjzIvy0yxsQuLdunFN2+Zcb8/HTZ6YkJflnW0TZjTBFsEXs0WBp9ID8z
Pz+cN5/01LJtkNgiL0Oe1vOpBu9S3ekJXpqu2FbDmoi/Oj6dTYqOH4KvZ9+K
0zN0dC97PcAvdw/mf5Wdo6N2xj4MxO7A53RC3v6l+KLereMkpX9X/3dorGcq
XwJL5XtV/ZeVn6h8LmN/o7d0zM+Yo4g/ADFANhZsH6b/VhX7CuDjgv4Hn3F4
yj4E+BJ0VZuPc/aB+L7gNYu1a67yLeCqIw9n/A0clIyfvvF5wfeFe+ReZ6eN
v+Pjtb5geyu+X6dXnMZHCl+pUyvmruCji6/usarzdMY+iPBZplXsO4XM2Vvp
53U8ovQTev9eCs3pgtsFp57YAN0L5kZ/qnvoFrr/IOM+6Rv5q1fRnDm4c3C6
mBvhoA+rWP46tWjOF9wvvjG+NTBa/Pd4PnyL23WQ0HM0czWY8FCVD654bTpL
41vNu1G27IKNFlvtBv22b/B8kT9C4wR8O5w7RPlUte3k2MtHqu2D5SSdtu2U
GAxdNb5+wf/Ha5EtseGxHhwTei4H82gZek1hbXkFmTw0JxluMhgtz+vxsm0J
P6Azoa+p784FrzHXVCyfEqeFGB7DkvcR2ZSYHfcoPV3HOxn75PI+P1A2lgv/
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

           "]], Polygon3DBox[CompressedData["
1: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
           "]], 
          Polygon3DBox[{{3078, 1972, 1781, 1782, 1973, 3079}, {3027, 1901, 
           2143, 3973, 2947, 2948}, {2948, 2947, 3952, 1994, 1995, 3953}, {
           3937, 1913, 1829, 1828, 2016, 3113}, {3032, 1904, 1999, 3957, 2954,
            2955}, {3932, 1879, 1782, 1781, 2105, 3193}}]},
         Annotation[#, "Charting`Private`Tag$17605#1"]& ]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl01toznEcx/HvHMachiSSU8KVTckpzCGlHC5MUthszLRhoxl7Ck053SyT
HFKYDKVdbGxzuHCDFFIOG/NsDG3typ1ckLye1Lbf5/P+fH7f3//5/Z9N3V6e
W5YWEb/8HhgYkdIdAyLyiGxr7tCIkdij/hFHsJXYBmwyVstvpLPo1/J6vnt4
xCadJVh2ekT1sIh7+Fr+s04t/5wv1tmCpWdGLNJLYqV8nbyPvuFZqs1OYL32
pfWzlz/Nj6VbR0Tc17nI/5TPwH47+5i5t7A+cxZiLfQqvXV0jexp6vPpjaML
sBeyd9h66zb+PJ4zKOI9Np4uxF7KlmJtWBG/jG6nJ8iL+a6MiEv0B2ynz9I0
OGIX/pHfxd/lS/jLOh3YSJ+jBC/FPvEt8r30G+csNzuJTdQtx65aV2Cd2H6+
YYjn0Ovip8gqsF7nX6c/Yw/NqsS+0NOxQ/QNazd/R28mncDazfiK5Vur+Hq8
xXO9xUbRW7Fz1if8avqarJn+46573e187Lj8JpZlRhs2DbvAv3K/P/RG8wmd
U9hZ76tM7wp2xqwqrMd73i0/mroP/rs9Hdg+fjP/lO4xq0hnDf9eftg5jXge
thj7y58wcxb9zBlJZ9TI18gnpe7W/gf2JbCELDN1jqyKX2795j3YFq06B7Eq
HVuikv4qMz6aZWPcawWWY4/Hi0K9x9gRZ3slkfRnmH65ziIdVx07sAK9wzqd
MvXYI18gT/JeazSaXYI12TAPT099Z/hGfi5vezToDLW5CJ+D+YkMvpAXxUnd
20Q+P1vouDiO1WGb0/7/X/8DGUCAPQ==
       "]]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzbkyA2AUxfGrYsT2ABIUjBnbjDUJKjNmYpcqdiM9j0FvaHRaFYl99xy0
lih5AD/Ff86959zzfW1bO/ntqogoIp+IKNRHnGEJubqILvqKieqIU7qMFUzL
fhojLnSmzAMNEYOYMVdqIi75JXerKGMNs7Kepohu85U8pd+MJEo40L/mz7kb
MmfcHvHn/3s6N7IW+zEmZbtukvwEvZXV0n7+MB1BSpamBfdZfsa8ztvAgjc/
7L+yO9138yLvkJ7wcu7v+Z/2LEbRotfK76UPsj3eGMZR1umkj/wOmrYX//+k
L/YvPMkqdJ/XLvs2b3or798++oZnN+f0D7F3Mow=
       "]], Line3DBox[CompressedData["
1:eJwVzj0vg2EYxfHLJKLFZG4tokPjbVaTSCziqVaLoaVsfBkJH8EX0LJqH68f
QNLFZKu3gcXi1+Gfc65zruvOnW+ebp2MREQdyXhEIxvRRDkTUZuMeEXCD3QV
Oq9bH43Y5g/4Ng5RNRenIhb4s4mIW/sDuoIS/vTT+q78zdzy7hVq8kU3PXmH
tlAc8x/5Ep/KZ+w13OZoHufu7+Rl/Jh37V7I3lE3V+1+8Efuj7GnX6Yb/t2n
17jBvvzX/r13Zof39JPuuP+im7oH2Tc/hwLasgzt4VHXpZeyDvr8k+yFJsM/
8Fl+FWv6Z3PK/wMivDVP
       "]], Line3DBox[CompressedData["
1:eJwVz70uw2EcxfGfiQRt3QGLRWLSIiZKWESUCgZvLdoSrgPhClyCmAW7hZ1I
vN2A11IJ4tPhm3POc87/efLvWNnObTVERAH55oihRMQzXWyJSLdGDMrvTREL
ckk+xYv+nGZwhodkxD6WbLL2w3i1+ZEnGiOW6SyKqNld6gr8iN2aPJeKeON7
3dWHVV2ZdtbPbfd0O9jFr+7YN0Vdlq7JU3QSOYzXz3R5OoOS/sN3VXTLn3Re
X3Y+Wv8397d7qx+P+gNUdBX5Q/dtc+TsCTX+C9e4xbR7rmxu+HX9CS74HppG
gu9Cxq5qN8an0IYkDm0GdBve28SdN+/xx/8Dpu07OQ==
       "]], Line3DBox[CompressedData["
1:eJwVzskuw3EUxfFblIVOZmplZ+cdPIG0hgUbMy2teVjQlIQEQULiAbyGnbY8
iAVPwcfim3PuOff+/v+xpWqhkoiIRex0R7xmIpLZiHwqYoKO0A7ajoVcRNXO
aTriE8O6Bwzhw3yCiv6YznlnUH6PcXdl90fybf0XrZnn5W301s4kvXOzpa/z
LYyaX3RlWcLuM/+EkjlvHuBv0I8f+5vyPv4avfiWbch6+LeuiHX+iu/8/3f3
5/o12ZTvnPFNJHWXdmZl7/yq/pDOmEv6Bi70OUzLDnQrdsJ7+3wLWV0dGTTM
e1i28+u24KaItK6GFJr6XTzyf+jqLPg=
       "]], Line3DBox[CompressedData["
1:eJwVz8kuRFEUheEtEVTLXBfRFl5EzMzUwEAiMaAq+qYaFXNtQii98Cz619C+
hK8Gf9Zea+1zzr19s8WpQlNEzKCaivjNRDxkI/5oFofm8faI+WRERf8tu5f9
0AxGdWPIoay/0d3hFmn9XEfEiG4YJf0u/UBKd56O2JYV+Xec8T3YkhX4N5zy
3diUNbtrx7kaTmRVWkFOvqEvmcs4btxLJxIR6/Iu/tVdi1jjO/kX8wJW+Rp9
RtKZI92K7NL3X+MKT7qEbpAOYQDLdh7ppLcv7NTRZueA9sv36ZKdXv1n41/5
L9qKvHkP02ix+w91JDCC
       "]], Line3DBox[CompressedData["
1:eJwV0LkuRHEUx/GjYJidloLRqTzC6FVqTCK0I+IFFCJBpVBLhBmziIgoDA9h
3x/BrlP53OKbc37L+efmjswtTlW7IqKClUzERy5iOh/xae5kI97Md4wXIy7l
JfuMvIJZ7OrUzDomda509u2pQkQferGXdMxueUN2rXNg1vgF7w3yb3irWNI7
Q5F/S9d1lukO+nl3yS1vmx5zt8Zr0mXzXtaw9/DX6Q206Qmzmopo2Ydx7vZB
99BewgX9SG/iiB7QH/LGE52WZZDFXzriWN7y7W08y5tmTlZAHifyL/ffeJGP
Jv+RX/begu48TnV++L941dni/QN2Hjhr
       "]], 
      Line3DBox[{2959, 3252, 3672, 3683, 4158, 3998, 2958, 3250, 4053, 3978, 
       2957, 3248, 3924, 4201, 3977, 2956, 3976, 4052, 3246, 2954, 3957, 4051,
        3105, 2953, 3956, 4050, 3229, 3468, 3467, 2952, 3990, 4139, 3464, 
       3228, 3463, 2391, 2951, 3460, 3461, 3227, 3459, 4099, 3988, 2950, 3457,
        3458, 3226, 4098, 3954, 2949, 3103, 4049, 3952, 2947, 3973, 4048, 
       3237, 2946, 3972, 4047, 3235, 2945, 3971, 4046, 3233, 2943, 3997, 4159,
        3675, 3612, 3230, 3232}], Line3DBox[CompressedData["
1:eJwVzjdOg2EQhOGlIphgCVqQjE2JaDgBsac3GBdECSquABXgwDUIogARbJMl
whXIoaAmtDwUr2Zmd779/1R+cWyhLiJyKCQitlojtrGJZFtE9p9kxF5zxGpL
RK+8RtsxgC+Mm6V09nXW5WsUcCB3mw/y37h3P0On3J7BNA51+nW6+B086HTS
ZTcr6OMfzYpYkat44o+8a/AuTSt4NjumjWYZWsWE7idKdj3yUn1Ema/xJ2jS
fZFzvjGJWeRxZpe2G/KvP3jVOTUr8jcooebuhdkw/4s3nXO5zN9iA1fyCN11
893+Uk64OyfPo8NuFB92d/QPM1g6WA==
       "]], Line3DBox[CompressedData["
1:eJwVzzsvw2EYhvGnFolz4hCJyWQxSWjVsWUUwmKUMNgYGJDwBWwWbVXZJD4B
8SkQrVETieOA2enX4cr1vvf9PO+/7V1eX1hLRMQKThojvpsjppsinjCFvZaI
z9aIPEr6or6MrO6GM3zHR6gzm8AuJuWP+KqPOLa3b7+CHnNVeVG2Yy7bFjHh
3q0b54I+5Dn3ft2YbNt9lP90V86lhogB/btsjt94kWexaufI26+yC7Mv3C47
0126/3pjRNbHaf6o/TfnH+QwLOuULdnZ4hl0oODNJJ+jjFtvXSMvnzebsvfg
nuRq7ffLC+ZSuiHZpmyQ07IN50P9qXNGfy/v8u0KH+ie+R/AfzpA
       "]], 
      Line3DBox[{1171, 909, 3312, 3144, 4082, 2983, 3143, 3311, 908, 2982, 
       906, 1031, 2463, 905, 1169, 1168, 4059, 3310, 3142, 2981, 3962, 4058, 
       3309, 904, 1167, 2521}], Line3DBox[CompressedData["
1:eJwVzzdOQ3EQxOFFRJMLqKgokICOO0BLQUFt+QBwACxh4i0IJto4kkrSJQgS
uAAugMhUfK/4af5vZna1bzgzPzPXFBFpnHdF1HoiWnoj6vSnO6JK75FLRZzJ
y94VfMsG+yOyfRGn/JyZJXzx0/ySzhFOZAXaLCvShv6nzqH3AY7lN7JSZ8Q1
nZJPos7PJ2+7FvkfZvb191CTTfA7+CmM89bpWjLPr8pXvFcxJmunDfdX+Du+
d/FuX8X+Af0hWpb98S50p3lX9DK5i99K2/CkN2o2j+3k/2TL/FvMun+E/tpR
5C/oPuKZ94oXFPhZd2yZfdPbpHfYwAP+AcZOPr0=
       "]], Line3DBox[CompressedData["
1:eJwV0LkuRHEYxuFvaMQeIRPlVK6B2ajGmEKi0KCZRmEXYr0HF6HS6hSWSmzh
FiS4AonDYfCc4pf3e99vOf+cQnNtZjUXEQs47I6o9kRcoYJ2tLoiav0Rx30R
Bf6hN+Iew/jRm5TXkPJP/C+9xrSdW3qHs86IPP3WH6Q3eLNzgiF1Kq+qJzCO
A+9o0FF5hTbMDGBf3uYNX7J57PEpnTX3iF0+77s5MyV5EWUsykvydzfq2OHL
2Qwus3t2R/SX1Vt6RZp0RGyrP/U2aOLOHDbVTazjlH9FHVNIzLay/4IV/SPZ
C87dG8Of7MPMhXoJz/gH2RY3xQ==
       "]], Line3DBox[CompressedData["
1:eJwV0D8vQ3EYxfHnUoqiEomozc5kthqk2rBQf4pODG4lElsbA4kmvAs7RqN6
GxYEL6Kozx2+Oc85z/nd3713vtHcSJOIqOFiPKI8GZHSmIho0tWpiLtixGYh
4g89+z79kW3RE73QO0OCZf2Kzhpq9qn9MwbsztF17gjd7Pn4wCmq+g9599FB
vTfZtvO/upf8ivyK7si+ZDnzEHb5b37YnEfJ/Xuya/O0Mx3akD3q1OWvshHZ
DB2lS3b78gV+jJ+lL7rHWDcv4sA++ARP3rEvK+geZv9EdmOek91md8nuZT20
+JzvaNN3+ol/NkcsvA==
       "]], Line3DBox[CompressedData["
1:eJwVz8suQ3EUxeFtJNWLWwyMqiLuERPvUFQiJp0JHdMywIvog0gRQ0aup4rw
Cio8ACZ8Z/DL2mv91945p1RrbNR7IqKK11zEbz7iB2/ma/z1RZwUIj6yEaP9
EfOywkDEC63orWIEV96OsK+7hyfvK/I2ljFh51k2h4RvomMu0139bCaiQWdl
dfpI83Zq6V2+zTd9wye/jRn+ix7Lupjmc/oJfecP7DyYl2Qlcye9iXFc2jtE
Mb2LBOt6Y3TKzg5dwL15WG8Im94H6aTsDr38Fr+od8G36JrsjJ7iVnaDb/93
zv8DKiUyaw==
       "]], Line3DBox[CompressedData["
1:eJwVzb0uw3EYxfHHZPDSMiiSDiKVGKg/ohdgsdRLqywmzCQGkTC4BC9Jexs2
iZvw1oVqK4SB4AIsPoZvznnOeX7Pb2Rzt7TTEREbeO+OWO+JuMca6piV3dJ8
OqKWingzV8zD/Co96o2Ykc3rD/kX/rMr4pXW0S9/psed3tif5tso8z9unOGG
T2Q12qKnsj7vBmhJlqFN+YH7Q+aUblt2ZX6Sp81Vf37gUtaQZWWDdlewjDE8
yhfk53Yy5iUsYt88pSvoEn4Uc+6Pu3fH53UtWtFvydt88/8Nf4FvJHiwN4k9
Xc7dE9kXinwDE7prWsUv/gAMxTM7
       "]], 
      Line3DBox[{1351, 1239, 3634, 3141, 4178, 2976, 3796, 3797, 1688, 4182, 
       2977, 1538, 3620, 4056, 1240, 2978, 1677, 3891, 4057, 3961, 2979, 3980,
        4126, 3356, 1025, 1166, 898}], 
      Line3DBox[{2461, 1026, 899, 1478, 2723, 1477, 3772, 3314, 2980, 4200, 
       1733, 1734, 1480, 2727, 1481, 901, 1028, 902}]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzrsug2Ecx/G/SKhDolHUIlHdXAC7QVI6OTQRItF0kKAiqruVG1AWh83I
6BhxA4REHLfGBbgAn3f45nd63vd5cuXNmWpLRCzjoy3ioiOi2hlxSW9SEWW+
tytihU6mI951V7Yt+Zrey332/uSMPUO3bTXUsYMHZyq2QVsWAxjTPSKrH6d/
yd3tEc0ed9MJ3S39le9oUS64bwolvkinscC3+scsP4eKXKLzGNWvyk++r9GU
/MzX+U+6S7t1X3wee8lZDOn26YG3N3CEQ2T0L/qc949gGMf6E5zhFK/2dZq3
rdGm/O0t5/wPfZOX+A0sIu3cP9ldMZA=
       "]], Line3DBox[CompressedData["
1:eJwVzr0uw3EUxvHHUsqgXACRWKwmBq9tp+pfdSGKRAcVA5P0JsQVGN2Bl9lF
2CpiqyZWi8mnwzffc55zfi9L3Zv29USSFj5KSWUq+S4n89PJaiWZ44FsAb+z
ySL3ZZszyRY2sIcLuw0ema3Z+bO7Pj7jzufJZKh/5arsjUf6hrrurRoKdZNX
3FPwkb7NB+ioD8cZeuoTLtnr8JX+nLu4VZfl7+7vqz/5xztfvIw7WcX8nh/8
c8d/e/pd3kaBJh7NanxpVucqWtjH0NlT87rZGR/jSfaCf4avJ5g=
       "]], Line3DBox[CompressedData["
1:eJwV0D0vg2EUh/GDeo8QCTFJbFaJ0YChoQZpv4CGCJbWyGTiA0iMlEiIUQkP
S4MRsbFJhMVGTV4Gvw5Xrvuc/7nP/eQZmC3mCnURMYOXpoikNaKnJaKCXpx2
qtsi6tGA7eaIPt7hM1nK+d2dez7Qu+NDTmQnzsdIMN0VUeYPfOLCTJUvedT9
tLfSPGjuWu9ZfcMLZm6d+9sj5mVDnFVnOMdZnsQEluQFvW93ivzDyzzMj3aN
8BNXfNuct1Zli/yqNy574yvZmPODbB2b6LZ3g7dQNVPiL54yl8GuesWeEn71
9/iP92tv4Ei+xnl7OnxnSn2ORuRr/4L/AWFcN8o=
       "]], 
      Line3DBox[{1400, 1249, 1690, 1689, 4195, 2735, 2733, 2736, 2734, 4023, 
       2766, 1528, 2539, 4150, 1224, 2094, 1577, 1717, 3912, 1716, 2542, 2117,
        4094, 2249, 986, 988, 836, 3527, 993, 838, 1660, 3883, 1659, 2695, 
       2132, 1810, 4053, 2161, 2703, 1601, 3855, 1602, 864, 1002, 866, 3531, 
       1005, 877, 2180, 4110, 2021, 2821, 1724, 2196, 4163, 1338, 1339, 893, 
       3541, 1030, 895, 2210, 908, 2216, 2045, 2219, 4117, 2054, 2232, 924, 
       1061}], Line3DBox[CompressedData["
1:eJwV0Dsvg2EYBuDH4tSBTYIog9NUi1N6iK0GFlYLUXGWsLEUi9lgIRFh0X/A
H8DiF0g0XSRiIQ6DpFwdrtzvdz/P+31Nexa2ZjbrImKeSn1EX1PEDf20NUYM
yufmiAHZ2xpRdr7ngTtmdecNEa/mKftvMq1LmnXRTUaX5ck8b7akK9CZiGin
g9+WiKIubedIfjJn96v2Dd2k+3mSdpd1K5T1P/KbIXL2h+UIFbMxOcqEflwu
ul9g1yznOaHPykfPexw7/1ElfGfV7honZim7G86nrHPGNju8++0Xdqbdm+LS
ueo/+dCXau+ufZMrirywz63ZobzmgBL/22E0pQ==
       "]], Line3DBox[CompressedData["
1:eJwV0DEvg1EUh/FjURVJJRa1aE1CSJlYiFTSpEmXxmKoCKOEpItBO0iIxcZX
sPERbLqRGIixkRoYDEIMDPzu8OSc+5z/ve/JW9zaq+/2RcQmljIRp7jIRuRx
ORDRVltY4E/QGYy4QX044su5hEMMcSvcqlrGJHeAnLvvuYgXbz3qH1Dg91GT
P5c9Q8t8jGuiwf9yTW5DvoGR9C1+R713fjabl5nDMp/lt3Ht3DW7kxnnb9VI
byL0FbNZmT87zag//RHraVd9Vb6ddsEHv8Z/y/dkS+qi+530L/BmXjP/5CfS
7u7k0eMrfNedUX5adgpPfJk/1r/yGRT0V2lPHOEf3NIw0w==
       "]], Line3DBox[CompressedData["
1:eJwVzr8rxHEcx/H3d7k7p8NguUxfPwaF+ppOKZHhigzKDfIrGcVwi4HBKaGM
57/wR2BXNoPBcN1goLA4iofh2fv9eb5e33ffdHt/eS+JiDXM5CMuEcWI3y7Y
n3ojpswzPPAT3RG1vohxM+MaGLN39Ct8j04Jo/whRmSvbgybbe8UB8jrHhUi
rnzXxABX/8/5nHddtmVuop9f5HfNC7fPsS6/d7fI7eCYO0EDC7oJt4HE91Xd
OTP4WfM7F7Eq++Kn8ePOtfc7v2JW/GuLy2R3+rd4kS3J2u5/8s/yIXNSdoMM
LZ2qzhtfRtP+yH3oztsL3KBeilP8AZWgLhQ=
       "]], Line3DBox[CompressedData["
1:eJwVzzsvw2EcxfGfgd6GmuyERYSko0QiMYhFkbhMHSSM+gqYXIZqYzJ7A/4v
gMklJAatTjV3chmIiMQl8fkP35zznHOe598OrleXtnoiooLpTMRaPmIVSTbi
FCv8DcqYxwI+7TrFiCJf4q/oJS6w2B/xKhvFNpadW/ImJgsRs/jjK/JfuuMb
HbvNXEQbWQzpMrSra+ke+IZtr7xOD1FL39A3/Y6CzQZ2ZXOyW9kev59+1917
TPDnNte6Gec7/Nh+Y0Q35e1EP8x/9Pnf/JdtKe3xIiunPX9CB+zOvFGl77Jx
9xvOb3ydHtsc0DE8uvssb9s+0TyO9Ikux/8DHy43Nw==
       "]], Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/G3uh9+lCNSlGIwsShRTAaLhbvl8jW4GGQ5i8EZTBYD/4Aw
Of+AsyGDkpFZ3CnDyaoMyuOGZ6/P+/V69fm8+4yubxfKbRFRwnw24hhrnREf
HRFX7RF12sBkT8Q7nZMfoqCTR1WnSi9xgSnZAbJdERmcyM/45zjFhGwfOfc9
y44wZq7gKxfxRoexg6b5hQ6gjLT3t/QTuoJxd3TzN5EyJ7JlmuIv0TS/hCf+
EO/e+S8TsUofeYO8mvMPr0h/vffAn7H3NL75+dZe9k50m6395RW6h1186izq
FOUNcx0jOrfev8MNXnUWdGZ1+uV96NWpya5b/4wN3j+DEzOi
       "]], Line3DBox[CompressedData["
1:eJwVzzEoxHEYxvH3lj9OupNikZLC4GJBZJIsshyDwcBNSjkUyqLIYrlSSMlq
MdpMSiFlUOoOKZPNILLJ54Zvz/s+z/P7/f7/9kIxv5SKiDmM1kSU0FoXUamN
mE5HTGEsGzHC30O6PqJZfibfqPawjn7ZLk7NTTiR9zi3Yi5jGTn5Fo7NWTTK
S3qH3jjCATrlm2iQ7ci20WZfwxNacJmJKNJF2QN9tGfoAmZ5t/Sel9B5pNw1
yf9L5PbEOwVet3/pwi9/hn/B78AQb7h6j2+8ww0+dfI6++Yf2bv7c3TQfo0B
fOhM6Jybv2RX6DOvurOXvsm/nRvXeeWV8YwKXvAPAO8zbQ==
       "]], Line3DBox[CompressedData["
1:eJwVz70ug3EUx/FTg7dKWHRop5IIGhNTE911aiwdKwYb7sBiYatE4g7E5gIk
NBJilEifpMIoBgZBaKJtfJ7hm/N7OT3/PsXN3fWdTETUkR2NmB2LOMDRSMQF
/4ZDfmkq4p1+HI5oj0ckOLHzYK6ZOf2LLm9nDjVZd9JvZGf0suwXXdy6V8G1
/lx3TPfkfey5t4gb3So/TzfsDOFOVpVt0RO45xv8Nl3w/rS5wX+494kV2Vf6
LW400dF/85d0TXdlzshe0/8qX8h6GyW+ZCbut+xk6P30G9CR/Zh/9vsYoMw/
mc+68H6CPH+KQprjH9U1NSQ=
       "]], Line3DBox[CompressedData["
1:eJwVzrsrxnEUx/GD8lzcS6E8ImR4BpMUq8xyKSWLRckl/wAmk0UMBhksFLvL
pGxkohSR3BaRsmDweP2Gd59zPud8zvfbMjE3OFsUEeOoTUe0ZyJWsJ6K2KPv
vObqiA/6UBpxwts0e8lGPGHU7Jn2l0V04Ux9jiE7w2afMvvqA94RjvHDS9HT
qohDs7z6z/0CFpO8N77omHwf7w7FvBKk7V/IDfBy3pvS1+CKN837lpvXN8o2
0B79DL+XZuRb+Vl6iUk82tmgFWgzq6QdvDesyi3RTly7v6bfwrK+Gzd2b/m/
6hH36/Tl/lSf+FjAvfl28ne5HZrDLprwin/C8TPt
       "]], Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/E3N7gfhE2ROgPd6kcKhclmsF2pq7Pj37Apy93I5CzukkFR
BpIfiyjl/oBjoAySMnh8hmfP9/v1fr/v+/1esbq1ttkVEetoZSPK+Ygmv+AY
qwMRDdkh6vq/XESNR+VPPF+I+OyJWOAPrsgz6m7smBfcreDdbNbs1/2bOi/7
UV/2R7T13+pXzsmzuJBvuP+SV/kBZ7J7O3d4VPfxNa5wq8/wsr2S+yUe8rwb
Hte3zCbSt/EYL/rdmfT+vIejNLc/LWuod2VzKOmH7XdQNj9Ie7J9njIfUZ96
dl3/bKeWct8+iW39IJ+kd7V3jt70v7pr4h9j5jIp
       "]], Line3DBox[CompressedData["
1:eJwVz78rxHEcx/H3XeKOurtBSRiuJJEfA4MSE7EqWREGw93CzEYMwqBOSjl/
AKOwKEqubP4CZXMTBsrjOzx7/Xi/P5/v51tcLs+VUhGxiOtMRK4lIo80P0xT
NEszaC1EXMqb2Yhz/DRFVOVveiZvoCKX6WxzRF1/ItfzEZ98Sf8ur5vt0hn3
vdIdTOumsM2P6r/sbvGdzt07v8avooYbuaZf4l9o2v4C/8TP00f6bKeB3uEW
v40Rk8kMf2YTyd2+V8SQf+uXx93zIffx7bpDb3hI3kNX9FX39Njp1V3wbboR
sy55kB7gVN8hV+i+PIC8POZcwf4bjs1yuiO6Z96NK/wD3x8wvw==
       "]], Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/H3FY77Knd+lEW6xSTLySYyUUrZbr3tFkzyP1hsShlNZ3U3
uIxKKYOiFCJKcvfNcjHx+A7PXu/36/16vz99v+Xa9uZWLiKquBiMaA1FjNIx
PBYinrBWjHgeiCjzcvr1fERvJOKDd6L+4r3qOzRFN1OzfjqFhkzH3XeZM30T
P+YtfsXt1Oyc18Yf/1Juw1uz+ppMHte8K1pHEbf6G7qDtnqS7tmp2NlVF9yd
pnduv9AlfqJepsP0HnUc4tP8wG7qTkl/lP0DzPFX5fuSiG/1ipvHcuNmE1jg
Pdj5pYnMPl1Ew868vik7Q9+yb8cp/x+IcjRP
       "]]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJx0XXVUVtvTNq7dXViggu21Ax3ba2OL3YqJXZioWGB3K4piC6igOKICKqDS
JR0vjd3Kx2LP867F+X76z1mcd7vP7Ilnnpl9ov60RcNnFipQoIBF+QIFCuce
G9Zsv+bSuyTG8V3ir18jhr6mn60/+55bncw/3b/0uNkrgbff231729AwMqxW
rv/kZSnUdf0qr9sr4+jTtQY5t38Fk18pXb/rA9Po+Zlmw8eWiaYWh9dUauEY
RNfHGvs6PUjhxofCZjZrE8zDts40nTosjkoPqPS2xMBMThxyqm0T9zc86fzJ
ncUPBdKe3wX++dPmLbU2aujqUvsWFfXKan7YIYOsb+TMLrEhi45YNj01zvSy
aV/b7FtrpwdSnT9q/Go1nuM91XjMH6Pmp5kyv7vI00rJQ51EHl+R30PJz6Yi
fwNZr6laLyfLer+Lfr4p/dAR0Y9Gn6TXp+gReoU+rWwv/flvYaL+WNr7ZB3d
pkhacfNpm1NHdRT/0G9U2JUEqjf0aZcnH/3p45Z/n63uGkwniva89XWYL9k2
6VveaGwmWT8bNOzV8zTemneM4LL/pp/avCeEqiwfu6XcpnR++K3z2JKjA/jJ
3YfxlapF0qG2T5NORCWR/7sbNmuM3ankjLmrKlTWUbkVO0r6FsiiTxuSm0/y
v2o6Ydb9BtV7hNAtGR+nxvP76Wp8JZnfWc1P/jK/jcij5IqgEiLPHZG/u5Kf
T4v8K2W9cWq9bCjr3Sx62aCO/MlL6UejT4I+4ZfwU/gn9Ai9Qp9tnpy/6TQ1
Vn+ce8gou0KlZDJMGBG1PzCJhw5dUa3cijje3vKM1UGTGJpWuGMz+1Op3LtD
rzlN3aP5c8jYKh7vQ6jkobKOqdZJvNix1PaR7f05o4hbpcMVkmlRzqQ7kT1T
qOmxJI+bc55SvxnnDQYNTKQpo66vHWCaSQ/cRjTd1OuW6b6vW1edKBJBa2W8
iRrPnWT8j4Nq/olqfvoj808XebopeeibyNMwv/y0WuQ3knUaqiNvkfUmiH6W
Kf3o9a/RJ0OfiHPEPeIdfgk/hX9Cj9Ar9Ln2Tkz7C6WSGMchTesYbtwcSgE/
zw0pUjKZY6y+/7C2ieUnQ2etD+gXS8av5zXct8eZG+cd7XnhzKEfddHZZPHq
eM9LK1PIMu/4nDLCS1k3vZNAG772jw7+kk72Uz17VljiZFrUInhuikGMjEuh
WWo8J8l441dqfsO8oz1Zyvz+Ik+4koeeizxWIvdqdSTIP1zW20Ctl9bKenuJ
fm4q/ej9X6NPhj6Bm8BR4CfiHHGPeIdfwk/hn9Aj9Ap9mpZ3KtnHIJBxvO0y
qz4XzKQxFt93Zo6NINO+lyac3utP5p3vDynyOp2s9juUfltORwUWxpR/w6+o
Z0jHnJGvE2l90fnrTjulUslky6gZQfdMF9Yxvm1WPoHWy/h3C/LGczcZbynz
91Xz8wiZv77IYaCO9EDkiRb5Xyv59frvJ+udqtar9//top8tSj9URvSj0SdB
n8hDyBvIR8BN4CjwE3GOuEe8wy/hp/BP6BF6hT5vjXI+4xwVpT/mBpmfS8kU
uh3jb3dsfgK55B0DaduDYxHXN+potLfT01ozkujfBY6v4tnd9NO7+ktcfHUy
LoEc1XjeLuPvyrxX1ZH7yfx9RJ4pSh4eLfIEKb/nVyoOCPLPl/UWVuulj7Je
9/z6IW/Rj0afBH0iryPPI78jDyEvIR8BN4GjwE/EOeIe8Q6/hJ/CP6FH6BX6
dHZa4zo1PVR/9Dl/f1rbJunUccU383ddIujsvdp3q3Z7Ynr8w6HRDVpl0l0Z
d0kd2VfGu8r8N9T8vFPmLyLyrFHycC+RZ1l++Rnyt5T1Wqr1cl9Zb7Do54jS
DxcT/Wj0ydAneBJ4E/gS8jryPPI78hDyEvIRcBM4CvxEnCPuEe/wS/gp/BN6
hF6hzwJ5/56Z5j++o/MyvrEaz6dkfDuZf5ian7/K/GVFnnVKHl4i8lwS+dcr
+bmkyP8w/3r5oKz3S3798CTRj0afDH2Cd4KHgn+CJ4E3gS8hryPPI78jDyEv
IR8BN4GjwE/EOeIe8Q6/hJ/CP6FH6BX6vCLjcXwt42/I/Lc1/vxZ5JH44u4i
z2yRf5H4M+Rvkn+93FHWmyz6uSP+nCX60ehTz+fB44HP4PPgneCh4J/gSeBN
4EvI68jzyO/IQ8hLyEfATeAo8BNxjriHfuCX8FP4J/QIvWK8s8zvrMHnISLP
KsHnISKPn5+S/42fwuclIv84We9HtV4qUlStF/opL/gcJvrR6FNfH6EuQp2E
+gg8HrwefB68EzwU+Rc8CbwJ+Rp5HXke+R15CHkJ+Qi4CRwFfiLOEfeId/gl
/BT+qdej6BX6LCTy4Ogp8kSI/K+Eb7wS+bvLeoVf0Q9Z79b8+qGioh+NPvX1
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
fi6TiiQUu3Bnthd9ijuzu77pPar1beG3FpOzKarQ3S93rcP5iPV0Z/vE1zyr
2q+hvbplUNzB481al09gMws7H3/zYK7ysNnGgVN1ZBVXcecgx1gu8L2m1d1X
9/jG2RKVvYzT6VnVwG7FtqfyEYvmtn63vbhOQFz9epbxlDFyx60y58O5/96L
rSewG4/s/mhZ//q5PFnOB+7JO0/z5PzmDYfqzW2ZSsNXtHZ5/zOCvYMtM/sH
vKWjcUr+FbF58vO/Ir/BOu9vq0bF8xcTo2XOdaJp39w/1z+sSiJbsdNcZTfq
IvaC34gfEfxHY1+CfU0a583LneQ6s2R+2A/2hB3Xepi5uvc8RNaHVjXyWLCX
tvy37FPz39l09UFYdOZ0b7pRfdOU7R29qKJF7TLWX7Pom4PD5mZWHuQT8iPG
8rs7hfedFjp8Te66TIOnHA7ScU6nwNIVTAI4MXH2FJ+RCZS54OC8ETcduMP5
KynWFXZxyOriNtZfsumK9KnrCK7qBFdnz1XjG5zOG08RMh5+Az+C/8DP4Hfw
N8gHeSHn2Bm92xkPeMR1Tfq3GOTpySt+VWrfdUi2fv3QB/QwrGE1t5yfb7hn
39hPK78xF0lvU8jtSBYZt0sOGuP5lg1eZdl2bhHIPKFe9tzMNPJUfU6apfqc
1Ev6nFVkHq8+efNQWZlHIz9Dfvgx/Br+PFn5Ge0Qv7so/oY4QdwgXq49eVDZ
6u5bPrPKqFL5TRGc42UyL3xMKt02P1S9T6vHvLjB7EJB1925Qr921jbbsslx
rmErw5+u/HhmzI0ev5xYd3573f0Pc/XvktfXpaGqr8u9pK+LuJU4JsSvRh6G
PNAX9Ae9ff0v9E9d71dsFjg0p3PfeA4fUTgxvHYqQQ7IBXmgX+gbem4s+yBX
JW9Hi18ZiP26KDtQCdH/b/HX6sp/KU38FvEPPAAO3KnUymlpki9fyztmcJSt
c2/fGaEEHAGuAE/g94gD+H+7c+p8cXWecL6zXPetui6Zy3WBX4JnBByDPWAf
2AU4BdwCXp39ljcP9RJcfCPzIN4Qf4g7xCfiFXHqo+xFpmKvTLFX/VNqns0W
al2Y57D4/fcGSv+VRf/PRM6Vsl5LkTNb2YXKil1+il0uKv2To9I/ZYr+Nyr9
012lf2ot+p9slOffVFv5O9UQP/82I8+vyNEiz68oXfwKf+N3nP/sl+e3lN02
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
SYsjH/l+RnX5LoaLfBfj2LOctDeNk+hyuRifs52d6YTJx7tzonVkfSNndokN
WVTktvGPKPdTpv1ss2+tnR5I3dJDVrYqlELrb3pO6lr9AY+78LJzk/hEOlrk
+JBBufZuvGthUHZFX1q8zP5G4pNEulF599lzDukcWbjo522Nc+uThgUMI/4L
piCRp6583+OiyLPP1LJNkWppdGz/0fWTBufixK+l5ZJP+tOuMj1tZzxO5lST
tdUWpyZQ91WBj6p8DaLSJUau8FqcQJVnJfXa4qejsjOtwu3e+FPpE9v3OlvH
U8crqX9qb0+gxPp77YqZxf31e0w59jbHTy9IpWstt265YOXBg8Y9snbPjKcm
UXPX17kUyCanbcMdTz2moX+Ct21smkW67UPXO7umcsjiypbfC0aS3bygAcMD
IiiqxbXv8YOD6MU9WhHUJ4YaZbdxMS6URsOlf2cvfbUB0k87YhY/fey3BK68
cbjtt1dJvKfd2P5FVoQRvkN/T/YXKkuf+dG6WxYLx6VSgbCibQ5U8uJBT75U
X+kWTzN/OdsOM3hFGQ3fX63V0YUXpNWrWet3rv0ePhyza2kCW9+r1K5cbj2T
+Obz2zXpSf+vT479i0sPynkv6hbB1c339NvsncYHrxkEJLQLpYrOk2q0fBHF
y1rWM/Ipksamry/Ev50QQgtWmH7+NTCWbY/bnJ/voePCvXt9znibGy/fDFvY
rdFR5sVetrMK+lCziT8aFLmaSBuKzl932imVynrwQWfbG6aL6hjfNiufQDdk
vE6N56YyfowmH82XfDTrmXG4f5MD3NHHa0e5cqdoaO/j4b1+ZpOPPMclz4WR
tzzPtXHS+klPmwSw+/wxZ0z80rldxuVTe76G659PrynPI6fI86Fhs6O3TqwX
S+vC1teqPSWSbE7m/K5dOIV+FXJoaRKYQEVLu8ys196fu519FzEpt56NkPFr
1HjGeN8zET/NroSQ0YIQXecFUZze9EX67HJpFGtSccLCVw9ok+3pgFO9k6ii
TWfLMAcdvdDc11Ff6o7qf/nOVK2GH/fGv3tDlhVe3h75JJfPXg9ccTqXz3w5
9PX09FtBVDmuWtLd63HkuORs2MdDKeQUdrf5d4sw+mizuPW0tsF8J8fy4uxT
6fRsSbHeZieCqEN4yi6ThDguvuXQnbNLUyjLuUuz+NdvqNq0DZs+fE9iv547
Lre4lUQ1//Idq45nOyx6OOaqac8LXZc4VsyiA8n7P7yICabz9tHV7CfcNJ1V
pVxKH8tMGlz7zrXUquF0/pZJ8fe975i+PDlZd35lBp2q2aN7rS5RZOl80aT0
TRfTqWV2nopLSKPHX9K2hYyNI/ekgMadmrmZVm09pPiH1inUqk65B83fJdLO
YyNbbTv3xHRRhQmjd/QJZcfP9Wp2fZ1JQ0x7Nk3fzqbBDwK63L+ZwKV/t304
qnMqscxTRc3DrWWeJXLdKeq67CHXhfwzlfw8VOT/oOzIp8WO37YpO3pLv66s
5n6SUn/5PtdFZRf+LHZxEbtkKjtyFWVHviZ2rKzszkuU3fmr2L3MX77btUr5
Pz0Q/+8l/o/n8cuL/38T/w9W/szWGv//rvyfS4r/9xD/D5XxG8X/t8n4N8r/
uY34f7L4/wWFM1RLcGaX4ExphTO0XIMz7vK850R53tNP4tpR4QZ/EJxpIbix
TuEMVxScWSI4I7jE6YIzzWX8mZmfXp5ZGMsjWrbu4mcfwMMvxDv8CEwlN7nu
WMGTALnufYXzfFBw3lRw/tDSOs3MYqPIsdW7GjcXJHDLcc3O2B1IpEMK56mK
4Pxuwfkamn3kGoLDb5tUf1mtQyo7W9TyT/Dz5CGmRoV/Z8XTVoXzXKaRwvn5
gvM5D/JwnjYKzmcIzmu/d1ZT5pe8yVU0ebOwypvcWvLmV8mb/8y9PGvsh9w8
N3VW5cpFw7jOm7U9tjVOQz6lD5JP20s+LXAxL5/yTU0+raryKRlIPh0p+TRJ
5VMKlXx6QPIpvlf7TrNv1fHsj2XGleLYalrRnJHF4mjZ9arFfhdPohzXPF7E
x4QXFRNeFKD5LtgV4Ruk+AxvET5jLnzmoOIz1Ej4zErhM9cVn6Eo4TPNhM/s
VvyE0hU/4c7CTzrLfRXz5D6LU3J/hfAcPq54Dg0VnnNH8TF+qPgYbxU+hufr
L8t+aLr0ITc82+4yc0Ww/vht/sfNdXLrih13tk15USQ3/1odO9stN57nPX47
5dm7YLK8GRC03z2FCpvH3egX/YD3D3p3Y8efBP3+wUPZT+gqfeCrdzu+fb4p
gW4bF8nZMFxH85cZHl35KRDvZ9Yf8X7m+3MfGZqtTWE7y6E7DprE8CDfHaF/
vkfQ+eHHoov5pFIftw7Glbd6sMluh2qNF8TTLfmOQld573S0vHfa4smHxFZP
0njc8y5DY1pF0Dmjn3YnJ4ZSkUHh5QJeh9HIzvNsY8fFU2ijXuk9q+ly+Z16
DnaLPFfrKM/D1nvzPDMmKoFx3HnbbfyJ89G4r4MN5b4OF9nf100o/HONdSot
KZP4M/mkJz9MmtDeaFc89ZLvVGWp940zyfvDm8k89TX3OfR79tvDZXoEzxxd
0rFyYir7v3Jd/sQ3Ipcn/u86t0G7MbevJMex7SSL0+vb67jYshsTq18Npw3H
Xxcx+aijSHerIt91L/mfqr3LpNVLpEjN84mX5b61tgfsmiRQIKfse99ls3c6
/252/p1Ln3AylPcJ4n2VyfJewawvm0s8WpNIBmt86xT99oYvmJsVL1FZR0/u
eZf69iuWTn7ZP3PR1Ah27Vhv54PbOrr+uUZkpZU3qGDF4dfa/QqhYb8rxSb6
ZdJAef+4mXxfIEbeK24o30e/pL5nTnXlO+YeLzf/2BgcQZWnvexT8GcQm3VZ
EDu5WjoVunP35KYDYXTfuKJ152ZxfOjCcL8WpVJoX2DW1Hrvg+hjee9iXkUS
2TnThSIuJ1PVeRc/dG96gNYuNx8V/SOTLNsuPcNjQ2hZepegSl/saVK55TM8
S2ZSz6gjfuU4glY/eBo+6vQdqt0p9fS89+m5+Sz+RGZINLWT77LL99gJ32G/
U/NFG3vjq7T012KDXaNCeUiBpA+unEn25W+u2Tn/Hv00DyhobpvAe8ZPPL2r
cSo9Xr9+e1yZh7TiY8rPA7n5d4xV+XahSYnUWeZPlO+94/vvhSQOl0pc2kk8
tpV9QDPp60+WvnQd+U58ssi5SeZx3VttZ90bwYyjbscOn8dVc+vtva29+5i8
5uyNd0eX3hDPzXu1/XwoI4XMHqyekHTLk+sWGtKoX28dfz1/LKj5gCSqK/Nr
5bx9Z/nR3o5vqGrs2U5/DNN531I7h807o6iPxK2zxPFbid/0Ej1z0r7H8wqf
NiOfbvHnU/s7vxneJYXm5YTsM3eIYhx7u4+83rNZSi7OXy69dGcwX/HoeLbJ
oTh26O3Z+eqqFGq6qJV9x8Ph5Nir1qDHlM4Lh85pYeUSTGvsXL37uEVSQqth
X6bPTGObl1tfhXUNpYMDM3v4NNDxZIsSD5axD/tsb3lw9s9Eii7t+adK01iu
cHlKqYX9g9ig93d/uplKuhJ+5q0cH3Oqg9HpzlNfUMnzx7e0qZpNfaRffVj6
1VnSZ57nZ/p1W6EEWhBYNutidjIvn1fNtdHkUBqe5dX7+qcUvrXiXLn+hl7s
WmxN7ZbdEyhLnrPYJs9NdpTnLLKDnbY2u5CgP7atWueyh08Mee0ts9OuTgJ7
1mnSY3Zunb2kRbU6ow0CKFL6wGs0feCmcn+akeb+tBv3/y0/3iGV/9v/r2/1
7k94WsqDiSsOxFOcfPftqXzf44Z8HwHzAMfuyjyLfWasrVYikZ89erLAISGR
In6Nn/h6QCT5jt84pvHNZI6ue+vhoHuJ9Lx26S+90v1pqMkj78svUrjPwnER
Xcq78/QDz6bfS0mgYfI9gnma70y5tr9z8ELRdNoZOGGFTfNwetLmWeoGCiW7
M+9KnmuWTEa9F/Xp9CSB3fcdbJcYEEoReO+/PE9/XJ6jdzk5qAMPTeK38S3M
vPyc2cvFtdpBNx3Zyr5eI7m/6LLs65n1veSRvCmVxpY2+m9jeG4+PtP+qUta
AB29UNZu2Oog7pG+tf2G0l5cdF1l30ZvMjEPt5L9wQsyj+yf8gvZP20ieTNO
5rFV89AXKzXPK6U3ihK9eYredk9esqDirhiaW3Hyihtnc+t/u0NDPn9LIVfJ
p7aafOoys1Efrxbp3M2i7hb78eG83z5rWL/BIfq8OVnlTT4peXO8fN9lvXwP
Ikz07y1xO1W+K/FK4tdNrrtbXZf6yXWniJx9lZz8r8g54Hb09Zx+t2nJhnLf
tsy9zgU2p/V8HJOt5w83FX9gS+EP1fd8vHn6VwJfq3e62RFdPP/QtTVoNTaW
jBsarvDumcLVH3iWDN4Vyde329m5mMeQUbs9y6PK6Hj0b137Yi6R/M62zrmJ
o+NomnxXqZHmex9v5LtKbeX7IL0kXx+58rrBtg86Dp1gfqV2i0h6/DTr36xc
/lVL5Lmh5KGPIo9Rfv5AG4U/fFZxyx/laCDxqwvLvHto2FtebTvz+6rDQawr
f37Ghhdp5PTJLmOFQSBbmY7snJLmx5F7Krk0PJlJiTJ+sRpPqTL+k8z7TvDB
WObfpHCP4wX3rAX3zEUv0BP083xDhRt1u7/kECrdvOqUADY6dCui/vtM6nin
6pe4jd764/qE4T2/J2eR1ebsjec/B1B91yovrv4KouOma7yuOWfQAYWrNEPh
Kr0UXAV/MFL8gc4Jf0CfZ6nVzf8SUx1NLaX+OizzjBN8fiHzjPF2elprRhJN
6rOviuUUJ9OP7+ovcfHVkfHzx1/qrvGkeurI2cNC44rm4vNVWdcjtS4ykXXB
P+oqPdBn0UOGi12NmP4hbFDw9vavKxPp8enVaw9nJtG84cesncfco0Y/V882
2PqG3r6yL1zOO4vmqvykPyJP/SP8xFXxEzoo/CRD5Ttao/IdnZB890x4Ti3F
c2iI8JxRst4uDQY1sn51y/SzrPedzLNY8uZxmWevyElKTg4XOUuPq/nIJukZ
NTNYfGpndm79emTkTj/7NBqv8jvVU/mdPkt+fyP8ZKXiJzRK+Emq4gn0XvEE
aio8wVV4zm/Fc2i38JyvMj5TeEUzGT9TrltbwyvOqOvyKs11+woPMRQ5P8n4
deq6/EdzXT/hMx81cs6S8eBje2X8HrnuSg0fq6n0xr2U3qi36O2+shfXEXsN
E3vphM+sF/ueEbs4yfhqwmNHyPhhyr5MYt/vYt9vt/P8hx8Ivz0s/lMnvzzc
S+TJUnZnG7H7K7F7pPJnqqr8mX3Eny1VXNAZifdWEhfbVFxzW4nrQxLX/0lc
DZM4S5f4SldxzY0kri9KXO8XfjVXcOCVxO8IWe9Uid+vsl7MU1fqC8xjJf2Z
FYIPSwUfjoqcfZScvEfkHCnr2i7x3k7W9Vb0UEni2k/00F/hANUSHMgRHFgt
vFHwk3YJfp5oaZhT/Vs0VTO4O8C5fCp/Ht6pf9Uf/1fXecf7XP7/n+xVRCUr
MxmhRMbJ00pGGR+7jIRQ9iaZZZNIdpKt7D0ve5O9x3EOjnFQQpTxczvX4/7u
9n79vr7/uPX6vL6vc72v1/W6rud83E/YTe2/t7Ufv619eKzfz6229vNo7ef7
/H5uX2j//1P7eXvd/6q/32J1P89nny+q52fTecP501vnTlb9ntra59jfcvpz
0zLo3Fyuc/NfcbL6BDhZb4uTlUjn5hydm5n0/Kqav0c8X+Ph384aT2Z/btpS
nZvXdW7O8+e+W6q4QSud+zMWxdkJrmnvODvBnpOdIDvHxsjOeV/2xgZxqerJ
Pjki+6SO7MmesmfOw2f09o81VNxgpuyfdXr+aNkzxfX8wRpPET8el1DjKe7t
HJdHds77snP2hNu9brfsN9k5TnES11a/d7CPw7ibisO0VhxmqrcPrYrszESy
M5urHm+H7Mk3ZU9ixwbtzz/1nJ9kZ/4lO/Nug9Rvth59xW1d/8rkimcj3eG+
A8dvqHocu9fV8XavGy+7V/Eip3iRa6lxTnwp27jal4+5rt0OdCtz86hb26z6
pH/2XLc8VQYnbdwhxuos+TZJ+ktRVuHw+O9u/3o0lL8LxrX6/p1j2JCbV+yf
ClUHd9sXaSPnDKg74NpRa/Pjqdwt80RZu7h/D1nTReO391z7dF+NP/f27xlj
3fg7nXs2KHPMVWq45N3jT/fj+Pd2RBRIE+s21m12+chrx92g8/2W3Sl9xNa2
2FSozohr7nSj28Xu/7vXpa9av2T8mpE2U3nJEj6O55oojkd+s1KK8vd3tZwc
UVH5zUa7Gi5/nPey3V7/9lE3Z4VbUyJn84iYy7ZM4/nBj8fKazwvt42ZMPbx
dffbhRwPB408Znt6TJla4v2jVl2/q5r/Xa63fhd+R3D+9b6M97Vf76un5r+e
n3/bqflf8nnSv8fVuGgVX/m554Lxl+1GpYEbXn3+iO040frIu1GXbGCOK2Ne
j7poD9/Y1DPPhSOhOBXxLuJUR9/M36TckgtuXY2Mr5/5aKc7+WBB0c13r4by
myd9PNZ9o3hsNeVDy/j4rauk+O0LXYck3xvvpnVr1G/C/bw/RzT8fFXO9E/n
qUnt+V9VjrhhD2qW3Tw5ckbE6L+/7T4p0Snr3OaFMoMeXrH6ybJl/TG1cwP7
bE/cfXK0rfH+oBssf9DJH7x0a+rs76ZesCM3P6z+z8MYq5K/64t1ez/1a8Qz
Wi2e0VnxKfqOaHN6baaL7vLMIeO/7xPtMv/W971v/jhnbb3/7r6U/95Z/nu+
wPzgR1+LbFRj/+gYd7Jbhi07n+6rNT+/k/32okjr0qdf+SylfnKvZP5i8qC9
v7gzw5b1unzvlqVUvvV7H4d3pxWH3ye9pNbSWyitOMCegC7ZfMXxkterVn7O
oqsWNbhIoqZntrgRh15d+VzrKOv/tf+7qzPF/V07q7870ucd3DSfd7ASyjvs
8vEE2+rjCa6D4gllGvd84fCD427GgJfWZLp10R2utPedtokvWcNURS9vqh3p
8p/s+2K8TlfcwQylcpUvfdJSNypSNmpElDv+86AHY/PGuEPd3y964/rxkJ+C
H/Sazq8LTSb06J7/uJv9uOv3w08ddMNuVtieo2us5Wjz6+q5PSa6+PkfHCrc
f5Kr0H37kY/+uWXVfPzEVvr4iW1Q/ORrxT+jfPzTEin+2efvSueO3rtuRYvV
W98p76yIJK2OfnEl0/mQ3xG/zMLbGW79l1++ozq0m6pDS6Y6tCLh8VJ7rHjp
5Wl9O10sfNIVul5p4rB211y5AxPXb99zMhTPnK54ZjbFM0/6+JKl9PEly6b4
kguPo9paxVFT+niXzfbxLpureNcoxTlv+zinLVec81/lnV/weTcz5d3qyI/Y
nHDW6EE5l0Tckd2VU+Oc4cfpsmqcfcL9Rxso+2dXw0QN93fe6r4t++PFi/2P
WYYJhTffHHDDfmkU83u505tdqdI/1MrxQbT7p2PstHIZrtpWcWiGi990XHyZ
V8aPP1Mqm7M6cxKsSFX8ujUa/9WlbA0jrUJ4/NOIKw75NufQR1EX7PAb6dv+
WHxZxNHc285tHXzNFitP/a/Ph9pi5UM7yh9rrvjh+/LLinW9X/+Pkqes5Tyb
kt5WREy8PbZOzkI3LLXmeYbiir9qnj/QeKIV5/xW40kbPn7H+JsnKXx6c9Kl
tqFvoebPpYh1h4/8894nXc7ZT5qfYn5+7InmZ2R4/NlVUPz51oCt1z7KvN0s
3weVsxV+6tcXyRcR78kVS5R8WpYx2Xdbu8Kd3qi09JjNTlRt2YC3b9iHyl+f
9PlrS6789ZRSPx089MJe+/JJ532b96yMmD+27OzlxW7ZEOXBe/g8uM1VHjyh
nt/MP9/N0fPjxf3f1og3ljfKP7Ppqgj/33/YbY0zwo/T5dE4i/vf5T5VXL2U
flc9H1d3WRRXv6O4espAvLqP5lnfkVuo7+hlrc9D/u+60oH5Geq/C/e3voul
+i6SK248X9/RTL3fqGRxv9cxn/zeB/K/1gf892ZaT+21vlhXPfw8u3aa50Wa
Z/L1j7U+l2l9XtTf/VzzPE9/N49fn+4Lrc8pWp9H9XtLBeb5Rc2b8hGOOP/r
mrcl+q7Tad6ahM+/u6v5vzsubj27+lrPH2s9b5hRse/Onttdl6s/vZD3+yuu
0pcRFautirb/6f021rotrffb1a9zy6B94JVOfp0vEl8qUYCPtnZk4Xnzf4p0
bduuztW/1GFL9v3BUjvHX7UB/nt3x/S9n9T3/rfqCtJofyur/e1/8iu3aX+7
r/0tsB7cEq2H4X4fs8rax97QPtZJ439Z32kGjb+g3//tsvb/VG/6/f9NXY9R
Hi2Zrp/z54IV1Lnwkc6FDosyFspY6qS9Onpvxpw5L7sEi2afu14/2jb4/d9N
1/6/Rvv/KeUj0uq8eE3nxfDo/skrpLnsSs7ps7v59P02d/WQomnPX7KN4c8J
5eP+fCXJ9C7pL7gcf1WuUf67467+0VzjLta/YpEaZwE/TquucebweUZTntFS
Kc/YWnmN1t4usq6yiw4EdPx+lX1yTnmNPrJnImTPJPb2jw2T/RMl++crf467
GJ3jiXWOV1XeZI3O/fWc+4oPJNQ5Tv2G7AEXqXwoz+nt7QH3ruyBFLIHnqif
8JHO/UQ69+d7+8QGePvEJsk+uRXwxwvLnnne2z92wts/dlT2D/oAshv/00nw
dpQV9HaUbZMdNT68DsSGqQ6kgbfHbJO3x2yR7LHyvePsPTueKdzOxM8lzj9V
fi75lJHefnYbZD8XV91FYdntVWW3y850lwJ2ZqZe/u92CdiZl7w9bIe8PWwN
ZA8H80fMw7feDrfr3g63xLLDa5xc2XRc9nO25qfjhaLynLJWKbKlr5Dwql3w
dr476O1810h2fjzVpRT0dSnuEfWcqmNR/adLozqWfd6vsRXya87Lr5mmuo5i
8gdbyB9cs39fk+Jdr7rGX9ZuOy7JRldo/7aJ++9F2To9Z6p/jsXqOdu8n+W+
9X6WS5rH+1mdff2ty+Hrb90G1d8u9f6aq+z9NXdZ/prqeJ3qeB31KvK7Leh3
35Ffv937ibZPfqL8axf0r+Uv26aAvyz/2oL+dboc6WsdyBtrn/XdN6RuxqOu
WcJBmZcfOxrqg1ukPrho1Z/Ij3bP8KNd0I/m/mBd8XMap/PjtIEaJ7/rvv9d
7kf9rrw+/uDq+viDs/D4gwvWD8uPtqAf/aPydKUD+T78+gXer3d75ddXUHzg
jP9ddki/62U/b07zZg00b8Q9guP/Uv5vPe//2hj5v1vkj8/QeovReksif/Cq
/07te32n+VT3u9bX/VoH1YMdL5Sg3OeTrlijmMHDu36y01rUez3h9EHRdlLX
a/vrrrmu3/TniGXx54g10jmyXfWrWX39nt1Q/d4of05ZPn9Oudk6p2LkN+l8
tAo6dzZ7e8A+8/aASyx74GbU86lT99lu2VaWOPz2sCvu5KMlv7Rx0XbR1526
jL7u1Pao7nS5r1N9ahDH1alaEtWp9lB942pf32gVVd/Yytcn2zBfn2ypVZ+8
9r1cfWakOO32TUydomLzXba02Z+rB3wYa0f9/LhPNW8tw+fN1Q/M22XVrZ1R
nGQYcZK1fau363XVLV/3XuP8w7bYi8cK/1x3dRTv3X2i9z5a713r0J6xDu0Z
69AF1+EKHwezAz4OZjkUByuouv0uvs7NWqvOjbhNrWIv3X+SZFoobnN9SkTJ
h6WPu9/GLhw5MftFyzw4ql3Hh5csV3g9j8ss+zNB+5Nzzw/fbBVfGfR1s+2n
XLobQ/rVWBxr8QvkGpMk1VL7qEi2gfty3LC3tjXfdCnBKXtO1z/01x3Xr74Z
d91V1/3Zdf2arlfT/Tl1Pb3/u66b/7uWRH/3sR+/bfLjd4k1/g9VP3lG30s7
fS+FVAfYU/PTKnx+HPPTWPNTdky6GluOLHMdmib+/cNCy9zl73IWi9hzKxTH
Y3/eqf053hkr1GxajM0+cKv79OhIa1whuv9zZ04RB3bBOPCz+jUU73XBeO9B
3Z9J/RS/6v6Nqs+jT/Cy6vRGKF8f7fP1Rr4+xcT2Ix9cOu6er7z/1b01jrgX
t1c43PfidVuqOoHSqvc5qzg8v4ffx+86qHq8VqrHW6F6vHyqo9umOrrSykc0
v1xwXsLXT7mOfd5ocmpLjBvWtUetqf9E2l+B+FIO2WOHVeffVPXAm1SXm091
br+pzu2w6tyuK/+bRfmyDcoTjbBSw29N3u9On3t45djr512Xsf++PiPqmi1W
fnmH8mivK9/UdeDq/vuqb7LKv26d0eKj/XZtba7uE3fdtB90/yLlp/Lp/kG6
v7m/313R/UdLbDg3dOUSl6/Xvkv5Tx5yX/05KOn6r29aXtXR5VAdXazq6Pju
5uq7y6jvLpPq8Ier3nuf6r1r9BoQcWnyFvtt4We9R8Y/7v6a2CXZ3M43LNs/
Ud/sfe2Aa5GlR1SiocfcF+/fLZb3RKy9pvc6Se/5pt7vduUfv1B+/JDyj2Wi
Eo2+eniJfflOzPcLh2x1c7Psa/ZZn1vEndxvGmd6jXOXnwcXo3k4p3no6OsP
HP/2UB3CydkfpDzSa5GrMunzmoe3zHcNipY8lPHCLftCecAfNc9vaZ5Xqk67
ruq0j2g9RH2zrHDV6Xts/st/92u08bjL8yDLne6XY+2B/JfRqssqSjxW+bum
qsf4S/m7Evurpv+4TZSVvzYw8kHSkxbVq8SDFA8u237VU61QPdVC5dFeVz4u
nc/H2Url49I1rb4gbfundmjOBD+XaH3aFv4xcGuFr09bdeWzWqs+6oryWWuV
t/pOeauyyludUj1zXn3vk/W9z53au3aa/Gfsds8uO1OmO+WKtGldf8rEq9Q1
WbCuqbXPU7i2yr80U55CukyWW3VTc5VvUl2TBeuaquo5VZXv6KvnqI7LBeu4
NE4XHOcpODeB+i6uj9T1sbqu8Vtw/CNVr1VQ+bIpGr/GacFxDtc4s/lx2m6N
c4LGGe3Hae9pnKNUbz3S/+tuq+76/Pf+XMj0Wdy5YDd0LrT3dXTmVEd3S3V0
S96pU2VCqYt2M1vRATtTXLZB8yYOmzD9mDW68fzyV6Of+ompO2SfOvesXVvp
ouoUvWifqo6rv/KeR7ROtui7baA86UF9v7V0fxutqyjdX1PX2+r6RV3/S/pi
A1VnWFV1hgd1vYuut9D1V/16dtP9enY/aT13Ul3W28ovz9B3cVp1WZUDdVlp
dH+UvqN5uv+J/77ccV3/Tdf7Jo+r27Qzc3zd5oNpvm6zlf/e3fv63ivoe//I
f7/uE//9un36flenaFMmeSrnXq2Rf/Lez9e4IacKvt5/3C3Lq+fX8s93z6ku
9Mvw59v7ej78sE91Hm3T/nN4Vtw+Zk0mxO1j9qn2sW46d7b6c8e+1rnThfen
97lN77G6rq/W9eO6vsrvw+6m9uHp2odLKh7+4+wPHzefuiJiguKNgxVvzz5v
0JwCVZdGHFP8bZmec80/x3jOj6r3vpkmrt7b1VK99zKdX4n9+WX9dH45X38c
+veS6pCL+nPH2vhzx5rr3Lmm+upevr7aqqi+uozOrxX+/LLbOr+K6Hf1vn4n
2aMvlkdM0u+aqXh47ZV7Fyy5+188fIfGsUJ10YznLY2nuc7BlhrPkJj5i7tf
3hNxs9CMyc8X/i8e/qOen6T1yvl/Fl8ZsUDPr+PH74Ljz+zH71Zq/Jy/izWO
zRoXddq5dC631fy00HhiNY7YwHg6KC6dXOMhLp1F4wnWq7+p8cyXPXBX43ld
cel+ms+fNJ/99Pz6mk+e/969uPXgWqv+v6TWQ1O/HmzxV96eGan10NvbM26c
7Jndsmca6voXun5c1/NrPOO1bidrPP0VN86hdXtK6xY7pLnW7Tyt29c1zvp+
nK6UxllO4xzpx2ljNc6P/fdoi2UHfqPvcZnsFie75YLslvK6f4K+3+G6/32/
n9iS6nH7iQ3XflLB94NYC98PYlvVD9LW273Wx9u91kV276+qSx/u69JdGu0/
W2XPjNb+U0j7TyJvV7sftK+W0b5aVnU+qbUPz9b+2Vb3F430dvh7ur+OrqfS
9VK6frlKXN+NM9934/5U380v3v53D0/H2f+ul+z/Narbqal9i/3qY9k5X+v8
OqVzZ7buf0d26CXdP0/X39X1aF1v4f0Ua+z9FPtjm/dTqvpz0/37Qty56RKu
8udmV9Wxb/fnr9uu83epP3/dH/78dd11/s7Xub5E5/wlne9jRsed77bFn+/u
qs73I+H9ZTZL9ti/mpcZmqcemp/f9Hz+jdHzB3r7wbY18fbDTT1f9ok9wz6x
oH2ifjQX7EcbNrPS4G3Zf7e3OqeJd2XSPosqULjK/Jw36VOzYJ/ammHjvvhg
YJStKDi+QcfaZ6z22sO3+159eq5FJZm+pMV223Jh6vBsESvttftt7xdofMsu
/jAx/9upo13NViP3HKx/1KVZl79vlSYxIXuM+qWfZY81lB3SV+vhmNbDpgv+
+TMi457vCuj5jSvke/3fJofs+dz7dhRNuN9SXCtVIMGqG3av7rDLkds2uyTf
Nni7a9/1rud7O4pEtL9l23ReNtI6/F3r50niDRfHDIp0J3e3m//2B8fd2jdK
tsq7/4rtVp1GS+U1ysovKCq/9Xig/6tdmgpp1k/Y7RZe3zDlcLztLtuGl9t2
OHDT1sof3C//Maf8lFe9f2qz5J/el3+q/iyjP+uSrqfzz7fm/vmWV8//VH7Q
9/KD3tbz78ivGS6/5l2N/6b/vbbJ/17bq997L2+uVK26r7NBb669Neqn7dYp
++Dj7avcstnqb+3h+1tdRfW3rtP3WEfzeVTzeUJ+0PpAX8nVenHvxaYOjHsv
9qXeSz3tA1/pvZ/Ve7/0ftz7dR+9Hvd+XT693+fGxq0r6+jXld1e69fVdL8+
3Vi/Pl0nrc9JXjfDrfC6Ge4N6WaU+GhWgpGTL9qZ2F7t/10T5QrkPb2+0zfn
Wc8uuJ4vyd8ZJX/nrvwdrU8XXJ/v6vkn/fOtrJ4v/QoL6lfo+S74fOItFoi3
aPwuOP7Tu9PcHXDtqv2++J8aNb6OtDoVFv7W4o+D9s7rb75SOiLWVZ6wfNTP
o466Dxaump838VHi/O4ZcX4XjPNP9f01tsf319hp9dfEZMtSYVPjGCuz9/O6
TV9eZS8+nNJu0sxL9ONYsB/nvu6v4u938XR/9Hdv1f6g52UblqF3sSnDV7iD
I3v/HDXhshXV+Cv58Ztp/Gf0e/f53+vq6fdq/l1w/tMU/XlJymqRrvb4VfNK
lDrrhkwsvP7NWjFW3vcrWXnfr2Tt1a/U83DuNDN6XLU65954cU5rZyPPj0jV
/V4U/U1WRv1NzXR/P91f09/vvtH982tNyZirwFWbND/5mUtlN7jspwdWXNQk
2o4rXpdL58U0nReR8rN6y8/6RH6W+tHc9+pHi1/c96O9H6436x6oTy2Z/Klz
+h5/1fc4KE/c9+7q54/73t1Afe+/y3/5TP7LFvkvyvNaZ+0n5Hmv6Lryv66E
rl/U9Z66XlLXj6u+6Eefl3cvKy8/WfGxEbKvLsm+Ul+kfaa+yOnqi6wzZc2j
P3etsM6jumU7WCjWDmd9rWaDDWctufogCqqev4bq57ukOfhKjbY7LOkPJS4O
unHZUmX7rW6roZesnH+O+0rPcXpOB3+/e1H3J9D9k1VX0Fjjz6Hxb5R9eFjj
j9T4sfdaqf93k+y9L2Xv9VKcs4fsvc4r637yWcOjbuMAd39sp1MuatL+lcUz
XbeHreLq5axknrh6OauoernPZKdlDdhpc7U/F9G+cVH7RrCP/h310Z+Q3cI6
/Fnr8Fn98qrXdcF63c/9e3LqK7ef9L7aZni30fqhMa5spcQZ/yi+2sqWv3Nk
XIdL1kH3J1b/6yjd/7Xur+jvd2/r/je+zLRoebErrk3P/WObTFjjajVMWbDV
zIvsJy64n6he14L1utpPLLifqF7XBet1X5sVZy+5Ld5ecgdkL8E1L1o2X/XP
N0+NmCUu25NWcToJbqDXSbDs0klIJZ2itMpTv6A8dZkFDwp9F73E8iw691yp
D9e5RCf7fV9r5S37p3+1vrdGXbBcBX5e+uKVGLd4ys+Vkz4+bntUV/mD6hbG
qG4BfZ5OXjfD0M1Ye/WFfhvO/269V37W5miOA+5++Q2flom9YTkUp12g+qtX
FKeNNyj7ifOXjrosyVslzPxCtH1ZpdnS5WViQvfP1/2v6v6FWv/rFQ+P0vrv
KftktuyfArJPtvnxuOF+PHZP41H+0eVS/vET5R/3bYnT+bHpu+N0fhw6P9Rn
kBfIr7zAVtV1jFXd6Q+any3z4+bZTV4YN8+WVPO8JrwvINR3MLLl+u/W/XnN
JvYb1KrEkpOuQMuSv7/xwvFn3n9Y30sOfS9z9L2oTt4F6+TpYw3GM7/zf9eN
9X/XCurv9pKuV37VFSxWXUF9xQmT+Tih+0txwuLK47wj/+g55XHKKQ5WWXHs
U4qDqY7IMquOiPnfqXNBuiu2S+fCLum6FFRe+Irywu20j23x+5hFax+rLr94
u/eLXcgvVly9luJyxzSeB379O61/W6X1nzi756cvVV5pgvJKt8VVH6frM3Rd
82DFlM+Kr3lopr5d+izeUp9FauVDb1xsGn0793/5UL7356OKPerZ56fQ9679
yoL7VW6/X9mX2q/qaL967P1Bmyl/sJ38wQmHi0TeeTHajZz0865jAy+4qC4v
7d66K8pa6RzPF4ijZpEfNFN2ckbZyUl6Z+10KEu0Nb2Z81qqRFesYubxjbOl
OmR5Dn6bfGfGKNuRI/0PZf+Nsd8LNm7+4ZOj1q/Cg+4n9l50yQu+U7Z8/1Ou
bvq+39ZtetHGez0cq+L1cKy+9HDuy2/aLT9ii/yIhz4+YFUVHzin+MAs5Qf1
u90X+r27pZP2m/yLt+RfiJto/wTq4fcVSrp9UZlNlvafAovqxttor/6U9179
zrfsePj9bq7uT1NrU4MNyc67EZt2j+s9Jca1OfhG4aJJz1m+fC0a1mx70j20
LxOVLXfZvf9et/l5X4+2Vn7d2lKt2ytat4WnPYhK9doBe/mt9JfLugP2epGv
Rg9+ap9nD6+vDulaJPT7p6XX/tlW+2d/2TlNtU+SB5wmP3GN/Lg82ieT6jmv
+Oc4nrPW6zC4jNJh6CUdhpsFKw+dV2Wnu376vWorZ112s2Pfubdw2yVLOrJR
i4lzNtug9d1fWpfptF0YfXP7xUmxVjxcp8v9IJ2uuV/E6Wk49DTaSE9j/9Bf
JtR9/Jv7IN+YX1sOuWEv/VGuyMOPT1gCnReZNE7Oi86yo17ydpR7ktXbUZvC
n+/a6fnbw5/vQs+XfdBN9sIQ2QkfyH7r4e03t0X22z3pcU3zelzurvS4XpAu
1vfKk+5UnpR62kXKV76k91jAz5vb5efNHdC8LZIORjo//zZJ83/Iz78d9/Nv
6zX/1fz6cUX9+nFZtH7yvRW3nl17v55dWq3nZH7d2lC/bq231m1mv27tjl+3
Vkvr9qbich9ID+eKvjviTew3HfTdTZTO1f/0XdfVd31QdZ5P9N3N03d0R3GD
vYqTbNP3/pXfN+xJgbh9w5po3yimeGOyQLwxl/e/rJv3v6yj/K8Zft+zCX7f
s9+17yX2+5jTPuaqah/L7fcxt9XvY+6c9rFP1K8nXQJ7W/16tRQPTKI82j86
HzP6/dNp/7TM2j/7ez/O1ZMfNyDcj3NT5cdlkx/3qfr11ks3qazOEekp2boA
j4Y+xO+Vz42Q/cD+yH7ZSu+Lfr2gToX8ffcMf9+C/j4c4aC9Kr/ePcOvd0G/
nnqYWJ2PjcLPR5cicD7Kr3dBv17+uwv6783l78WXH/FzuB9hQT9CelkW1Ms6
rjyjBfKMFaXL1Exx+APyy1qp/qS74vD95Jd1lf+YXPtYCvmD+Dn4Pfg7DeSf
dtK+dEL70inF5eQX23vyiytIL6Wi4g/tFE/4SuvwE8UfRmgdHtB89vHzaRc1
n7puweuv+jpbN9jX2bpBqrOVjpk753XMXB7pmM1UvELr3N7UOq8VyBdHK173
QLqp0nmz2tJ5m+v1Z6yK15+xVtKf+avJgy4j9ly1j27PytqyyxYrVX5osrc/
irJ5n+UteMRdta79V/yW5MRm++PNXaeut4gK9Q/m2jN/Srqo6RFj1D8ofRt7
P6Bv87eeX8k/35XQ8xfq+e398901Pf+bTl8XrBt7zLX5PP1Pd1LFuvEREb/t
H37ECnndITdHukOdpDs0qUxk/SmHjrvHZ36rfej36679+J0dC504Yr11vtfT
+X5V5/sYXe+h+ECMrn8b/ndtgv7ugUbf1P3i2HIrPbJLVJan582OAzUXxM9z
xiqLU1BZelAtpQdVTNer6vpnul64X7a+g1uttrG/tG90ad11e+nemhZFK5y3
xfGuFr9UeauljCnVJdt3V83yfZT17ugo2+r7QayN7wexGuoHORg+HrdT4+kX
rqdqRVVvuczf78pp/Bt0f3bpWdXSOOtrnGn9ON04jfMFjfOf8L4Vo29llh+/
e1HjL6bxr1M/S2eNv7LGvzx8PG69xjNdfut0va9ovZdfdX1xwJ/t49+X8b4m
6X31Dr/ueI8/+HViT7RO2mqdRAZ4ozN1zp4JP39Dem7ndD2+7p+l6yekD7nO
60Pa/6QPGe3161xPr19nG6Vfl8rPl1ui9897//ObyNSPRz4913rXTNfk1lb7
eMx381cPigr1U4zMn71EWjc71E8hfTzXKaCPl1rPn6f3U0LPv6vnj/fPd3X1
fO0bbklg35jidQJdZa8TaAWlE/jg66mxT1pfdW+W+b17RMONtqHVxXsTH0dZ
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
1dfr9dtar9/vhkm3f/WgGneujoqxSknHZRuwMtqNGTTnTNHIg1b7dqmtJV6O
scHfbzy4uOxFd+3FrwclvH3QZqq+YrHqf5qovkJ9H5ZNdeBZ9H2pv8aC/TUz
AnogcJ8f6Rz8W9yBxPp+X3nwsGSD8VPdgVSP48+t9oMdHl98Ta9/btkvipPD
IbyouMHA+/7+HoH7HwfiIegkiNNgfcVtgNeQYMmosx0fX7eO3VYUOPblYfvf
a0+qtMt3wrYNa3npozdjrUL2vDsOnztq/VusTjc+0VEbEchH/Kh8xB+BcxMu
wMivRh39qnGk+9/qehuLf3fFDsxOVuvFVSdsZECvrwo8rGdc36h5WBKob1xf
85fxNwbE2Pr+UzKnHHXWZTs4cFmXneettNcrDvEHUkivGN7AqX1x/AH3UNyB
zeIN9PD8AZdK3IHxAfvnquyfDdJ1aej7Me2g+jH1fOsqvsG/ev5G/3wbL74B
XINaC/PXmD93ZgRcAngN9/ScuxrnAz1nsecN2NueP+B6ijuwSByCwrreS9e7
qk4lnvLvw5R/ly6TSZfJEkoHsrr21XdkNzbWvpo93G4J2fPoqGQJ9P8G4tXu
PZ2bpVTvsVj1HudU79FU+mzTpHeHPttC6Zuhi9hV+h5npatWRHqD6KrlUj/4
Yt8P7uaqH5z+36AuEHqbr2n8xA0qSc/2Ta9n60pKzxa9xY+lv3hL53tO6Ytl
k95Yb+mM9ZKe4VL5oaflh34hncZ96n+5rf6Xd5T3ORDI+/TR9X/9dVdW14d4
fVeTvquh73rB68Haq14P1s5JD/airr8kndgLuj5Sz+kvndjhek7k3QRfbTo5
L6Qb3156EX2lKztIf3ew7k/fO8mdBKsWRdSWjt9d6fKdkD5tJo3nrP5uRt1f
Qzp+D3R/tP5uL+lUdNLfzSq9yDzSj7wl3Ug4XBmlo4Z+Wlb9d129rzu6nlY6
Zr9ID/mRdMwq+/duuaRjXE7vvZ/XnXboTveT7vSA8Ouul67D0dkTyBuu9/q0
VtDr01oR6dMqf2TKKznyStHSaZEuhyWSLsc2PaeQdG4L6zlrpEtTVbq+6NLs
fhTd6uzZGSH9k9HS8bjfpn2T3enmhnRO4KrEk05IkBewTvq672j8b+vvol/T
QXo2FaRj8650VIL6/P/o73I9ua4zTvRG4NFIx8zaSM+5q+It+k4tn77TUnpf
L6heIqWvl3Avql6ipfpuSvm6d5uruvdn6WVlUD7rgK7P1/UYxfN36Tw6p/No
nPJTX6pu5y3lp7ZuHby8edejttn/6861/qt/lvyxFtWomD38dHlEEfVxTFJf
wwr1gexQX8gl9YNc1P2vqw/iJ91Pv2owDtZUdf783nn6vdQlUFfeU/UJ76jO
X3Um7jnN2zXFN66LyzdX8Y3Z4tDDpYdH74qUGNQt97SI1AF9Hq6jDwMXPnG4
zrYbpXNqpsap51t7PT+t/JEF0l2fJH+ksc476XbbbD3nWf3CE5/B6a4Ybp+H
eG1zA1xp4g8pZN/DNyur6x+Jt1tFvN0t4u3Cf4UHCwe2peeP2neeR+qOiUMa
72w4N7Odxomfyf4Hf/CW8on39L6m632Rj1mqcZbWOCeHz4PBI4aLmTJg//f6
Jt6xnoUjLf/EPw7Wyfj0/+/wwO6jXrjK/S5VQC+O+R2vv8P4qZPhPX+p91tl
9KxpWdtcc/EfdWowv8cp1/xJhuebDTphT8o+qZu5z1aX9t66Hg1bb7JOu7d0
TFbpllULcI1Xap5zPONcXp8m4Zr/LdjnBk/+u+GGtpfterMlCab8cMlGzx4x
fXrGQ25Og2mPkz21c0sXGDKv4/IrdvevvZ1avX7IzezcNf23GaLcc3XfuHVz
+xWb9MNP+Rqe3udqdV6Xu0Hly67bRwWiaq64ZDPaHt916I+jrtfwk6Xaz4y0
NWkf1v4ryVVrqX2ybWCfPLFpefFUQ/q7m2tfOX1o7ly36/yYKw3v3rJ3dd6Z
zrsbOu+q6n1n1vn2SO/9F9X7nVG93AjVy03Q9V2qA6SOro6L+7tWfE3c37Xd
+rvrpf+wSPoPK6X/MMf/Luvuf5dbp9+14Bn5vsbP0HOY7ufNavp5s66at3/8
PJvm2eJrnif792Iz/HtxZfRedvv3aAP9e3Q39B4bB/QiWunv3sufMV+fpdMj
4G5VFW/rXop3Y4esmRWxe3LjmF+6xdpPGcqUzljyrO09m35IqxnzIuBuwdsq
f3dH2i+GLIx4Rfyrt8RtKfzR1Oop+y2JOCZdqFTSg+J+eC9wXvbp+XBd4Lkw
zuZ+nK66xnk8kEc4ojg8118I6DNs8d+LXbwb9724bvpe8McbBfzxyv67s0cP
4747+1LfXcHw+22H7t+atkmD6i/FuAuXiu0YvyPaItbn+DfX48O2RLoHf0r3
4GXpHqyRrksd6bqslq5LgXhfplr+9P+/9LTr3/3vpRir2HnUtV8fHba+6rt5
z/dBuK7qg8gw+6du23bPtUdL67fbV6KfS3Yo+sVqT9dt1gD39m99F+WlAztH
urC/6++i5/Km4t8H9Lt26PsZrfrTsfpenptZt3LKp+u1Xftkh958un6HTJ36
x9yn65Z1sK3S0g0d+y4McdDeW7mizt+vRtnWsnuSuFyHrGfC9cu67PiP/1Wz
XtYiA79b8h//y9/vnL/ffaX79Xfd5/7vuqH6u+m0nnbo77Ku7kpHY7V0NV7Q
/BPfL6Dfu1u/d5n2hUH6vRP1exvMiptnt3dJ3Dwb84z98Ejnfhft2wX9e3Tm
36OroPe4za8Ti9Q6KaZ1kmBY7tEDslx1fVtezngl8z7rn+Tc7vnto0zr3hrM
/TtD5uXTI6pp/XMuPNT6bKX1qXXv0HMNfBeO/53vAp2XOtJrQadF36Glfnym
6AeT5kU4fY8BOyF0/n649My8jU/Pp/i7172Q/em46n28J1Wlp+P57p3i24fM
iLRLd442enzrqI27+DjL2qRX7aPw+62+7t+d9cWF59Puc2syNdnZ8rWrrqAl
Otbx6Tx8rL6qjfKXD8tfbqfzo2VAN/Jt7T+sL9bV0uyzCp/OvSICThp8tE2y
L1fK3rwsO/NZdk576RYm3nAna74cKyJ+1XM+8L/LmIeG+l3WKd/3f78T5TY2
bVQ9S6ZDVqX091tbLf9PN6+21j+6eXPCz023WufLWj8/tsTPj5XU/MQvsKH5
7Kf7fs8CmY7senoO/DIt0ex5T/f/H/z8u6t+/t0YzX8ljTOe5r+xxoleT73A
emisfTmN1gP780PlV/4JxPHYf9HLYR0S/4XDSxw4pV//NtKvf9dZ61/fi9P3
4orqewnqUB3S98v5yrnHOTsj/Ly29ZrPRH7erI2fNzdN81bevy9b6d+Xq6T3
9Sx9pHrP0Ds6pv9Gt4nzV9+vPSe7rgV2XT1vrzcL9FWxf7GfpdY+FqE40gJ9
F5HoCciOauXtKMOOOiFdxL0BXcSB2u+Wav9j31slf22l/LUo+WtXZvpz5zXt
h8m1H57VeTFTdhZ217+yr+Z6+8phX/EdJtR3xPfId8h3yffI98v3x3c3xZ+D
bsEyfw4m1Xhm65wrp3PvgM674jpHe+tc5TytyXms83mt7qdvp73eyxi9F/w0
+Ehwkcqpf6fton0Fci/4OdS/g/1aXPYsduwevZfNsjOX6L18F/79hvbPRS+V
y9Rw1CbnHg/dv+PTrVZiQtL2CZ/aM+oPCdm52Le7/f0W6e93xXR/cp07I/Td
ddV31y4QL+X3zpGfK3/FtdR5F614/iXlXZ/XPlBL8aZsskeIOyWoM2zn0fk/
R2ie3I+an8B1G6vrCcPnPzTPQb+4rcaDP4B/8FB/t1E45zqU30+o/aefzt++
mgc4cW30HhlPU80P3+svGs8t2XmLZfelx97T97ZX/sQyvV/qusYG/Fl46vzv
XK8Znv8y8l+BvG2o7u5Z9WOc35zn+LnYB9TpYCd8r/1hu75v+qfwJ/Ev8Sux
f7Bjy8n+wb7FLqqi6zonXKpAXQ3/Td0NuvTiebt10uN6KD0u6g6Zj2maB+za
RoG6DtYlHKG/tE7S6Lzn/C+pc+qW1vcVnXsptc53yW5ZrXO5kM5lzuulsmdK
6Pqz8uP67xDX6J6uY1+y3rEzWQfkRalH3T9gS5oHOS9Y/0tpik5cdcwVHnx2
8F8DrtjEX2YPv1MzxqYXKDKu7aNoN/3MuiOtrh4M+aucy/iti5+RtyWvVGV8
96i3xsyMSKm8EnxMrsPH/FV8ydk/NR4z98wvERfEl9zYf+Pp3N/MCnGxX9D9
/w9v+4Sb
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{342.53518163614626`, 281.4097383033869},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-3.14579, 3.14579}, {-3.14579, 3.14579}, {-0.9999754405386854, 
   0.9999754405386854}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-0.9314795044569779, -2.561615039001569, 2.0051120479259152`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{3.7715220674995975`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771522101794671*^9, 3.7715221164271884`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "9", ",", "16", ",", "25"}], "}"}]], "Output",
 CellChangeTimes->{3.77152212122444*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.771522188944087*^9, 3.77152219315374*^9}}],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.7715221937893763`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"i", "^", "2"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "5"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.77152238033692*^9, 3.7715223995631404`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{1., 1.}, {2., 4.}, {3., 9.}, {4., 16.}, {5., 
      25.}}]}, {}}, {}, {}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 5.}, {0, 25.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7715224006864977`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.77152242281483*^9, 3.7715224326474524`*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cos", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.771522433281089*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "integral of sin(x)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", "Integrate[Sin[x], x]"}, 
      "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x], x]"}], 
       XMLElement["moutput", {}, {"-Cos[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"sin", "(", "x", ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"-", 
                    RowBox[{"cos", "(", "x", ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-Cos[x], {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2674$$ = 0.5, 
                 
                 CalculateUtilities`GraphicsUtilities`Private`min2673$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2673$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2674$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1435500$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2673$\
1435505$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2674$1435506$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2674$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2673$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`more$1435500$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2673$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2673$\
1435505$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2674$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2674$\
1435506$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1435478[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][-
                    Cos[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2673$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2673$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2673$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2674$$]], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2673$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2674$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2673$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max2674$$]], 
                    6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2673$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2674$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1435478]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1435478[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1435478[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfv/\
6D5B4RoyVBx6QGN0YkwaUpLzXSy6JhWsH29kG/zz47CZp1q5STAdoSh9O9aX5fPfdd9d7eiyCpN/\
r9dR1Yz4IFidbeHpizEjMclHweP8sl6AUFTy5hs/uGBOC3gNGfkDsfDeNeS/\
kjGh3foPvExYVjGj4qimjmoKaHkiSZzRStWcs6Yn5yZSJiDD6E55tD3deDV+/\
cDAYy5hoDZKrnbaQeSaJgqSHQDeMeccI/+\
aOj8vjp4KxEL4XwCNQD413IklsYAQnDPPxvvVqM3UPE9OEx0TGl06Tleeo7QVKS8rTCcxyfONisrbb\
AhOZKsfN/ZKbdQpy4d/CByK0MTmPTdqeLYF+YVwx+\
s7L6p9zN8Dz27bwUpyuJg7z22XIG9H0BNQync9b18kxUnWtjX7O1WXNl40GefGUqf+\
XjqjSy2G8bBsGzI5NjVdrbxl+2BZe5Nj1c3E/\
MOazc5SAq4ZDJbiPIi7YPIpmygMn0fbpqtw4HMbdiu8QnT4VrHACE2fZL7Y/\
HlXg9aYQYu2mG5AOr2dAADkYV2y53aMp1aOMSBIZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaA6ThboTHWVf/\
qi4lVzONRnyfsg1pCDXiv421kcacnk8EZ6RhHhBU6/eHFZJjYn0lv2gBAlzwilC0l/mY7+\
5h4uVQKoOJKpLOhYHtjRn/kn0ywIfAU911tyxPUeXd9tiNoE4rVUX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwFqq7hu"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-Cos[x], {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2676$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2675$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2675$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2676$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1435593$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2675$\
1435594$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2676$1435595$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2676$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2675$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1435593$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2675$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min2675$\
1435594$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2676$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2676$\
1435595$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1435573[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][-
                    Cos[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2675$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2675$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2675$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2676$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2675$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2676$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2675$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max2676$$]], 
                    26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2675$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2676$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1435573]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1435573[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 
                    Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1435573[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkUY3iS9IsI6NSQNKUr73ljiJhWsH29kGfx58dpM0a1cppgM0pR9O9aV5fPfcc9d7fiKCpN/\
r9dRNYz4IFidbeHpmzEjMclHw+P15LolSVPDkBj67Z0xI9D5h8IPEznfbmAMhZ6Dd+Q2+\
DywqGGjyVVNGNSVqeighz2ikas9Y0lPzkykTETD6k7zY3hnu7r4eOhiMZQxaE8nVsC1knklQJOkh0C\
1j9hjwb+74tDx+KhgLyfeC8Iiox8Y7kRAbGMGBYT7et15vph5gYhp4DDK+\
cpqsPEdtL1BaUp5OyCzHNy4na7stMMhUOW4eltysU5AL/w4+EKGNyXls0vZsCfQL45rRd1FW/\
5y7AZ7ftoWX4mw1cZjfO4a8gaanRC3T+bJ1nRwjVdfa6OdcXdV82WiQl0+Z+n/\
pmCq9HMartmGQ2Ymp8WrtLcPvtIUXOXb9XNyPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G/\
4jtEp08FK5zAxFn2i+\
2PJxV4vSmEWLvpBqTD6xkQkJwYV2y53acp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmqNk\
oe6go+zLHxW3ksuFJkPej7gmKZFrRX8X6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWhRHVJx+LAlubcP4l+\
WeBjwlOdNXdsz9Hl3baYTSDOatUFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb9gLuIY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "2DMathPlot"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "2DMathPlot"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate form of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[-Cos[x]]"}], 
       XMLElement["moutput", {}, {"-1/(2 E^(I x)) - E^(I x)/2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "2"]}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "x"}]]}]}], "-", 
                   FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]], "2"]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = 0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0.", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[-Cos[x], {x, 0, 4}]"}], 
       XMLElement[
       "moutput", {}, {"SeriesData[x, 0, {-1, 0, 1/2, 0, -1/24}, 0, 6, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    FractionBox[
                    SuperscriptBox["x", "2"], "2"], "-", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "24"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", 
                    FractionBox["1", "2"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "24"]}]}], "}"}], ",", "0", ",", "6", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Definite integral over a half-period", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralOverAHalfPeriod", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x], {x, 0, Pi}]"}], 
       XMLElement["moutput", {}, {"2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Pi]"], 
                 RowBox[{
                   RowBox[{"sin", "(", "x", ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", "2"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Definite integral mean square", "scanner" -> 
     "Integral", "id" -> "DefiniteIntegralMeanSquare", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x]^2/(2 Pi), {x, 0, 2 Pi}]"}], 
       XMLElement["moutput", {}, {"1/2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  RowBox[{"2", " ", "\[Pi]"}]], 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "2"], Identity], "\[LongEqual]", 
              TagBox["0.5`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.963", 
    "parsetiming" -> "0.34", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSPa722413i26d1dfa358i3000001798e76bii2ia322", "host" -> 
    "http://www4d.wolframalpha.com", "server" -> "38", "related" -> 
    "http://www4d.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa722513i26d1dfa358i3000004ag3ic4b47fc42892206861520850736438", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2019, 8, 20, 22, 34, 54.93814`9.492448793619527}, "Line" -> 2, 
    "SessionID" -> 32539794157568752484}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "Integrate[Sin[x], x]"}, 
   Typeset`open$$ = True, Typeset`newq$$ = "integral of sin(x)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {1301., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cos", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.771522447792782*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat1", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "6", ",", "8"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771522467781336*^9, 3.7715224901724896`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", "mat1", "]"}]], "Input",
 CellChangeTimes->{{3.771522510225009*^9, 3.771522514839366*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.7715225155029864`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "mat1", "]"}]], "Input",
 CellChangeTimes->{{3.7715225215185623`*^9, 3.771522525103489*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat1", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "6", ",", "8"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771522467781336*^9, 3.7715224901724896`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mat1", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "5", ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "6", ",", "8"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.771522467781336*^9, 3.7715224901724896`*^9}, 
   3.771522551205977*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "6", ",", "8"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771522551702693*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "mat1", "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "3"},
     {"3", "5", "7"},
     {"4", "6", "8"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.7715225594842377`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "5", ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "6", ",", "8"}], "}"}]}], "}"}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.7715225682652297`*^9}]
}, Open  ]]
},
WindowSize->{958, 1028},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (September 21, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 111, 2, 30, "Input"],
Cell[694, 26, 76, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[807, 32, 121, 2, 30, "Input"],
Cell[931, 36, 74, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1042, 42, 119, 2, 30, "Input"],
Cell[1164, 46, 94, 2, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1295, 53, 149, 3, 30, "Input"],
Cell[1447, 58, 88, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1572, 64, 173, 4, 30, "Input"],
Cell[1748, 70, 97, 1, 30, "Output"]
}, Open  ]],
Cell[1860, 74, 71, 1, 34, "WolframAlphaShort"],
Cell[CellGroupData[{
Cell[1956, 79, 31837, 650, 1373, "WolframAlphaShortInput"],
Cell[33796, 731, 94, 2, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33927, 738, 31841, 650, 1373, "WolframAlphaShortInput"],
Cell[65771, 1390, 94, 2, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65902, 1397, 129, 2, 30, "Input"],
Cell[66034, 1401, 72, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66143, 1407, 137, 3, 30, "Input"],
Cell[66283, 1412, 73, 1, 30, "Output"]
}, Open  ]],
Cell[66371, 1416, 126, 2, 30, "Input"],
Cell[CellGroupData[{
Cell[66522, 1422, 241, 7, 30, "Input"],
Cell[66766, 1431, 151, 4, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66954, 1440, 229, 7, 30, "Input"],
Cell[67186, 1449, 170, 5, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67393, 1459, 117, 2, 30, "Input"],
Cell[67513, 1463, 72, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67622, 1469, 230, 7, 30, "Input"],
Cell[67855, 1478, 150, 4, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68042, 1487, 40101, 828, 787, "WolframAlphaShortInput"],
Cell[108146, 2317, 170, 5, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108353, 2327, 435, 14, 30, "Input"],
Cell[108791, 2343, 252, 8, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109080, 2356, 262, 9, 49, "Input"],
Cell[109345, 2367, 210, 6, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109592, 2378, 297, 9, 30, "Input"],
Cell[109892, 2389, 661, 23, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[110590, 2417, 274, 8, 30, "Input"],
Cell[110867, 2427, 3156, 66, 237, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114060, 2498, 284, 8, 30, "Input"],
Cell[114347, 2508, 6989, 130, 243, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121373, 2643, 388, 11, 30, "Input"],
Cell[121764, 2656, 18521, 320, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[140322, 2981, 98536, 1866, 937, "WolframAlphaShortInput"],
Cell[238861, 4849, 44569, 857, 323, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[283467, 5711, 378, 11, 30, "Input"],
Cell[283848, 5724, 229182, 3804, 329, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[513067, 9533, 257972, 4339, 1047, "WolframAlphaShortInput"],
Cell[771042, 13874, 168872, 2802, 296, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[939951, 16681, 232, 6, 30, "Input"],
Cell[940186, 16689, 146, 3, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[940369, 16697, 123, 2, 30, "Input"],
Cell[940495, 16701, 73, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[940605, 16707, 270, 7, 30, "Input"],
Cell[940878, 16716, 1405, 35, 245, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[942320, 16756, 183, 4, 30, "Input"],
Cell[942506, 16762, 117, 3, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[942660, 16770, 110371, 2109, 1337, "WolframAlphaShortInput"],
Cell[1053034, 18881, 117, 3, 30, "Output"]
}, Open  ]],
Cell[1053166, 18887, 386, 11, 30, "Input"],
Cell[CellGroupData[{
Cell[1053577, 18902, 125, 2, 30, "Input"],
Cell[1053705, 18906, 72, 1, 30, "Output"]
}, Open  ]],
Cell[1053792, 18910, 129, 2, 30, "Input"],
Cell[1053924, 18914, 386, 11, 30, "Input"],
Cell[CellGroupData[{
Cell[1054335, 18929, 386, 11, 30, "Input"],
Cell[1054724, 18942, 302, 9, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1055063, 18956, 87, 2, 30, "Input"],
Cell[1055153, 18960, 661, 19, 63, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1055851, 18984, 317, 10, 30, "Input"],
Cell[1056171, 18996, 72, 1, 30, "Output"]
}, Open  ]]
}
]
*)

